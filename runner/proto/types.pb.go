// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: runner/proto/types.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Property
// An attribute, characteristic, or quality of the containing object expressed
// as a namespace qualified name/value pair.
type Property struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Property Name
	// A textual label, within a namespace, that identifies a specific attribute,
	// characteristic, or quality of the property's containing object.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Property Value
	// Indicates the value of the attribute, characteristic, or quality.
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	// Property Universally Unique Identifier
	// A unique identifier for a property.
	Uuid *string `protobuf:"bytes,3,opt,name=Uuid,proto3,oneof" json:"Uuid,omitempty"`
	// Property Namespace
	// A namespace qualifying the property's name. This allows different
	// organizations to associate distinct semantics with the same name.
	Ns *string `protobuf:"bytes,4,opt,name=Ns,proto3,oneof" json:"Ns,omitempty"`
	// Property Class
	// A textual label that provides a sub-type or characterization of the
	// property's name.
	Class *string `protobuf:"bytes,5,opt,name=Class,proto3,oneof" json:"Class,omitempty"`
	// Property Group
	// An identifier for relating distinct sets of properties.
	Group *string `protobuf:"bytes,6,opt,name=Group,proto3,oneof" json:"Group,omitempty"`
	// Remarks
	// Additional explanatory notes for the property.
	Remarks       *string `protobuf:"bytes,7,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Property) Reset() {
	*x = Property{}
	mi := &file_runner_proto_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Property) ProtoMessage() {}

func (x *Property) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Property.ProtoReflect.Descriptor instead.
func (*Property) Descriptor() ([]byte, []int) {
	return file_runner_proto_types_proto_rawDescGZIP(), []int{0}
}

func (x *Property) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Property) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Property) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

func (x *Property) GetNs() string {
	if x != nil && x.Ns != nil {
		return *x.Ns
	}
	return ""
}

func (x *Property) GetClass() string {
	if x != nil && x.Class != nil {
		return *x.Class
	}
	return ""
}

func (x *Property) GetGroup() string {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return ""
}

func (x *Property) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

type Link struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Hypertext Reference
	// A resolvable URL reference to a resource.
	Href string `protobuf:"bytes,1,opt,name=Href,proto3" json:"Href,omitempty"`
	// Link Relation Type
	// Describes the type of relationship provided by the link's hypertext
	// reference. This can be an indicator of the link's purpose.
	Rel *string `protobuf:"bytes,2,opt,name=Rel,proto3,oneof" json:"Rel,omitempty"`
	// Media Type
	// A label that indicates the nature of a resource, as a data serialization or
	// format.
	MediaType *string `protobuf:"bytes,3,opt,name=MediaType,proto3,oneof" json:"MediaType,omitempty"`
	// Resource Fragment
	// In case where the href points to a back-matter/resource, this value will
	// indicate the URI fragment to append to any rlink associated with the
	// resource. This value MUST be URI encoded.
	ResourceFragment *string `protobuf:"bytes,4,opt,name=ResourceFragment,proto3,oneof" json:"ResourceFragment,omitempty"`
	// Link Text
	// A textual label to associate with the link, which may be used for
	// presentation in a tool.
	Text          *string `protobuf:"bytes,5,opt,name=Text,proto3,oneof" json:"Text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Link) Reset() {
	*x = Link{}
	mi := &file_runner_proto_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_runner_proto_types_proto_rawDescGZIP(), []int{1}
}

func (x *Link) GetHref() string {
	if x != nil {
		return x.Href
	}
	return ""
}

func (x *Link) GetRel() string {
	if x != nil && x.Rel != nil {
		return *x.Rel
	}
	return ""
}

func (x *Link) GetMediaType() string {
	if x != nil && x.MediaType != nil {
		return *x.MediaType
	}
	return ""
}

func (x *Link) GetResourceFragment() string {
	if x != nil && x.ResourceFragment != nil {
		return *x.ResourceFragment
	}
	return ""
}

func (x *Link) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type OriginActor struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UUID          *string                `protobuf:"bytes,1,opt,name=UUID,proto3,oneof" json:"UUID,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Links         []*Link                `protobuf:"bytes,4,rep,name=Links,proto3" json:"Links,omitempty"`
	Props         []*Property            `protobuf:"bytes,5,rep,name=Props,proto3" json:"Props,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OriginActor) Reset() {
	*x = OriginActor{}
	mi := &file_runner_proto_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OriginActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OriginActor) ProtoMessage() {}

func (x *OriginActor) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OriginActor.ProtoReflect.Descriptor instead.
func (*OriginActor) Descriptor() ([]byte, []int) {
	return file_runner_proto_types_proto_rawDescGZIP(), []int{2}
}

func (x *OriginActor) GetUUID() string {
	if x != nil && x.UUID != nil {
		return *x.UUID
	}
	return ""
}

func (x *OriginActor) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *OriginActor) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *OriginActor) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *OriginActor) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

type Origin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Actors        []*OriginActor         `protobuf:"bytes,1,rep,name=Actors,proto3" json:"Actors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Origin) Reset() {
	*x = Origin{}
	mi := &file_runner_proto_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Origin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Origin) ProtoMessage() {}

func (x *Origin) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Origin.ProtoReflect.Descriptor instead.
func (*Origin) Descriptor() ([]byte, []int) {
	return file_runner_proto_types_proto_rawDescGZIP(), []int{3}
}

func (x *Origin) GetActors() []*OriginActor {
	if x != nil {
		return x.Actors
	}
	return nil
}

type ThreatId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	System        string                 `protobuf:"bytes,2,opt,name=System,proto3" json:"System,omitempty"`
	Href          *string                `protobuf:"bytes,3,opt,name=Href,proto3,oneof" json:"Href,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ThreatId) Reset() {
	*x = ThreatId{}
	mi := &file_runner_proto_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThreatId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreatId) ProtoMessage() {}

func (x *ThreatId) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreatId.ProtoReflect.Descriptor instead.
func (*ThreatId) Descriptor() ([]byte, []int) {
	return file_runner_proto_types_proto_rawDescGZIP(), []int{4}
}

func (x *ThreatId) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ThreatId) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

func (x *ThreatId) GetHref() string {
	if x != nil && x.Href != nil {
		return *x.Href
	}
	return ""
}

type ComponentReference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identifier    string                 `protobuf:"bytes,1,opt,name=Identifier,proto3" json:"Identifier,omitempty"`
	Href          *string                `protobuf:"bytes,2,opt,name=Href,proto3,oneof" json:"Href,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentReference) Reset() {
	*x = ComponentReference{}
	mi := &file_runner_proto_types_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentReference) ProtoMessage() {}

func (x *ComponentReference) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_types_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentReference.ProtoReflect.Descriptor instead.
func (*ComponentReference) Descriptor() ([]byte, []int) {
	return file_runner_proto_types_proto_rawDescGZIP(), []int{5}
}

func (x *ComponentReference) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *ComponentReference) GetHref() string {
	if x != nil && x.Href != nil {
		return *x.Href
	}
	return ""
}

type ControlReference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Class         string                 `protobuf:"bytes,1,opt,name=Class,proto3" json:"Class,omitempty"`
	ControlId     string                 `protobuf:"bytes,2,opt,name=ControlId,proto3" json:"ControlId,omitempty"`
	StatementIds  []string               `protobuf:"bytes,3,rep,name=StatementIds,proto3" json:"StatementIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ControlReference) Reset() {
	*x = ControlReference{}
	mi := &file_runner_proto_types_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ControlReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlReference) ProtoMessage() {}

func (x *ControlReference) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_types_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlReference.ProtoReflect.Descriptor instead.
func (*ControlReference) Descriptor() ([]byte, []int) {
	return file_runner_proto_types_proto_rawDescGZIP(), []int{6}
}

func (x *ControlReference) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *ControlReference) GetControlId() string {
	if x != nil {
		return x.ControlId
	}
	return ""
}

func (x *ControlReference) GetStatementIds() []string {
	if x != nil {
		return x.StatementIds
	}
	return nil
}

type SubjectReference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         *string                `protobuf:"bytes,1,opt,name=Title,proto3,oneof" json:"Title,omitempty"`
	Remarks       *string                `protobuf:"bytes,2,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Attributes    map[string]string      `protobuf:"bytes,4,rep,name=Attributes,proto3" json:"Attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Links         []*Link                `protobuf:"bytes,5,rep,name=Links,proto3" json:"Links,omitempty"`
	Props         []*Property            `protobuf:"bytes,6,rep,name=Props,proto3" json:"Props,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubjectReference) Reset() {
	*x = SubjectReference{}
	mi := &file_runner_proto_types_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubjectReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectReference) ProtoMessage() {}

func (x *SubjectReference) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_types_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectReference.ProtoReflect.Descriptor instead.
func (*SubjectReference) Descriptor() ([]byte, []int) {
	return file_runner_proto_types_proto_rawDescGZIP(), []int{7}
}

func (x *SubjectReference) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *SubjectReference) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

func (x *SubjectReference) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SubjectReference) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *SubjectReference) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *SubjectReference) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

type RiskReference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identifier    string                 `protobuf:"bytes,1,opt,name=Identifier,proto3" json:"Identifier,omitempty"`
	Status        string                 `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"`
	Href          *string                `protobuf:"bytes,3,opt,name=Href,proto3,oneof" json:"Href,omitempty"`
	Origins       []*Origin              `protobuf:"bytes,4,rep,name=Origins,proto3" json:"Origins,omitempty"`
	ThreatIds     []*ThreatId            `protobuf:"bytes,5,rep,name=ThreatIds,proto3" json:"ThreatIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RiskReference) Reset() {
	*x = RiskReference{}
	mi := &file_runner_proto_types_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RiskReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskReference) ProtoMessage() {}

func (x *RiskReference) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_types_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskReference.ProtoReflect.Descriptor instead.
func (*RiskReference) Descriptor() ([]byte, []int) {
	return file_runner_proto_types_proto_rawDescGZIP(), []int{8}
}

func (x *RiskReference) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *RiskReference) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RiskReference) GetHref() string {
	if x != nil && x.Href != nil {
		return *x.Href
	}
	return ""
}

func (x *RiskReference) GetOrigins() []*Origin {
	if x != nil {
		return x.Origins
	}
	return nil
}

func (x *RiskReference) GetThreatIds() []*ThreatId {
	if x != nil {
		return x.ThreatIds
	}
	return nil
}

type RelatedObservation struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ObservationUUID string                 `protobuf:"bytes,1,opt,name=ObservationUUID,proto3" json:"ObservationUUID,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RelatedObservation) Reset() {
	*x = RelatedObservation{}
	mi := &file_runner_proto_types_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelatedObservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedObservation) ProtoMessage() {}

func (x *RelatedObservation) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_types_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedObservation.ProtoReflect.Descriptor instead.
func (*RelatedObservation) Descriptor() ([]byte, []int) {
	return file_runner_proto_types_proto_rawDescGZIP(), []int{9}
}

func (x *RelatedObservation) GetObservationUUID() string {
	if x != nil {
		return x.ObservationUUID
	}
	return ""
}

type AssociatedRisk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identifier    string                 `protobuf:"bytes,1,opt,name=Identifier,proto3" json:"Identifier,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssociatedRisk) Reset() {
	*x = AssociatedRisk{}
	mi := &file_runner_proto_types_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssociatedRisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssociatedRisk) ProtoMessage() {}

func (x *AssociatedRisk) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_types_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssociatedRisk.ProtoReflect.Descriptor instead.
func (*AssociatedRisk) Descriptor() ([]byte, []int) {
	return file_runner_proto_types_proto_rawDescGZIP(), []int{10}
}

func (x *AssociatedRisk) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

type RelevantEvidence struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Description   string                 `protobuf:"bytes,1,opt,name=Description,proto3" json:"Description,omitempty"`
	Remarks       *string                `protobuf:"bytes,2,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	Href          *string                `protobuf:"bytes,3,opt,name=Href,proto3,oneof" json:"Href,omitempty"`
	Links         []*Link                `protobuf:"bytes,4,rep,name=Links,proto3" json:"Links,omitempty"`
	Props         []*Property            `protobuf:"bytes,5,rep,name=Props,proto3" json:"Props,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelevantEvidence) Reset() {
	*x = RelevantEvidence{}
	mi := &file_runner_proto_types_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelevantEvidence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelevantEvidence) ProtoMessage() {}

func (x *RelevantEvidence) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_types_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelevantEvidence.ProtoReflect.Descriptor instead.
func (*RelevantEvidence) Descriptor() ([]byte, []int) {
	return file_runner_proto_types_proto_rawDescGZIP(), []int{11}
}

func (x *RelevantEvidence) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RelevantEvidence) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

func (x *RelevantEvidence) GetHref() string {
	if x != nil && x.Href != nil {
		return *x.Href
	}
	return ""
}

func (x *RelevantEvidence) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *RelevantEvidence) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

type Step struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UUID          *string                `protobuf:"bytes,1,opt,name=UUID,proto3,oneof" json:"UUID,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	Remarks       *string                `protobuf:"bytes,4,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	Links         []*Link                `protobuf:"bytes,5,rep,name=Links,proto3" json:"Links,omitempty"`
	Props         []*Property            `protobuf:"bytes,6,rep,name=Props,proto3" json:"Props,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Step) Reset() {
	*x = Step{}
	mi := &file_runner_proto_types_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Step) ProtoMessage() {}

func (x *Step) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_types_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Step.ProtoReflect.Descriptor instead.
func (*Step) Descriptor() ([]byte, []int) {
	return file_runner_proto_types_proto_rawDescGZIP(), []int{12}
}

func (x *Step) GetUUID() string {
	if x != nil && x.UUID != nil {
		return *x.UUID
	}
	return ""
}

func (x *Step) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Step) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Step) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

func (x *Step) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Step) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

type Activity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UUID          *string                `protobuf:"bytes,1,opt,name=UUID,proto3,oneof" json:"UUID,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	Remarks       *string                `protobuf:"bytes,4,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	Steps         []*Step                `protobuf:"bytes,5,rep,name=Steps,proto3" json:"Steps,omitempty"`
	Links         []*Link                `protobuf:"bytes,6,rep,name=Links,proto3" json:"Links,omitempty"`
	Props         []*Property            `protobuf:"bytes,7,rep,name=Props,proto3" json:"Props,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Activity) Reset() {
	*x = Activity{}
	mi := &file_runner_proto_types_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activity) ProtoMessage() {}

func (x *Activity) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_types_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Activity.ProtoReflect.Descriptor instead.
func (*Activity) Descriptor() ([]byte, []int) {
	return file_runner_proto_types_proto_rawDescGZIP(), []int{13}
}

func (x *Activity) GetUUID() string {
	if x != nil && x.UUID != nil {
		return *x.UUID
	}
	return ""
}

func (x *Activity) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Activity) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Activity) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

func (x *Activity) GetSteps() []*Step {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *Activity) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Activity) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

type Observation struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	UUID             string                 `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Title            *string                `protobuf:"bytes,2,opt,name=Title,proto3,oneof" json:"Title,omitempty"`
	Description      string                 `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	Remarks          *string                `protobuf:"bytes,4,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	Collected        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=Collected,proto3" json:"Collected,omitempty"`
	Expires          *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=Expires,proto3,oneof" json:"Expires,omitempty"`
	Methods          []string               `protobuf:"bytes,7,rep,name=Methods,proto3" json:"Methods,omitempty"`
	Links            []*Link                `protobuf:"bytes,8,rep,name=Links,proto3" json:"Links,omitempty"`
	Props            []*Property            `protobuf:"bytes,9,rep,name=Props,proto3" json:"Props,omitempty"`
	Origins          []*Origin              `protobuf:"bytes,10,rep,name=Origins,proto3" json:"Origins,omitempty"`
	Subjects         []*SubjectReference    `protobuf:"bytes,11,rep,name=Subjects,proto3" json:"Subjects,omitempty"`
	Activities       []*Activity            `protobuf:"bytes,12,rep,name=Activities,proto3" json:"Activities,omitempty"`
	Components       []*ComponentReference  `protobuf:"bytes,13,rep,name=Components,proto3" json:"Components,omitempty"`
	RelevantEvidence []*RelevantEvidence    `protobuf:"bytes,14,rep,name=RelevantEvidence,proto3" json:"RelevantEvidence,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Observation) Reset() {
	*x = Observation{}
	mi := &file_runner_proto_types_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Observation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Observation) ProtoMessage() {}

func (x *Observation) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_types_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Observation.ProtoReflect.Descriptor instead.
func (*Observation) Descriptor() ([]byte, []int) {
	return file_runner_proto_types_proto_rawDescGZIP(), []int{14}
}

func (x *Observation) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Observation) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Observation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Observation) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

func (x *Observation) GetCollected() *timestamppb.Timestamp {
	if x != nil {
		return x.Collected
	}
	return nil
}

func (x *Observation) GetExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.Expires
	}
	return nil
}

func (x *Observation) GetMethods() []string {
	if x != nil {
		return x.Methods
	}
	return nil
}

func (x *Observation) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Observation) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *Observation) GetOrigins() []*Origin {
	if x != nil {
		return x.Origins
	}
	return nil
}

func (x *Observation) GetSubjects() []*SubjectReference {
	if x != nil {
		return x.Subjects
	}
	return nil
}

func (x *Observation) GetActivities() []*Activity {
	if x != nil {
		return x.Activities
	}
	return nil
}

func (x *Observation) GetComponents() []*ComponentReference {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *Observation) GetRelevantEvidence() []*RelevantEvidence {
	if x != nil {
		return x.RelevantEvidence
	}
	return nil
}

type FindingStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         *string                `protobuf:"bytes,1,opt,name=Title,proto3,oneof" json:"Title,omitempty"`
	Description   *string                `protobuf:"bytes,2,opt,name=Description,proto3,oneof" json:"Description,omitempty"`
	Remarks       *string                `protobuf:"bytes,3,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	State         string                 `protobuf:"bytes,4,opt,name=State,proto3" json:"State,omitempty"`
	Links         []*Link                `protobuf:"bytes,5,rep,name=Links,proto3" json:"Links,omitempty"`
	Props         []*Property            `protobuf:"bytes,6,rep,name=Props,proto3" json:"Props,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindingStatus) Reset() {
	*x = FindingStatus{}
	mi := &file_runner_proto_types_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindingStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindingStatus) ProtoMessage() {}

func (x *FindingStatus) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_types_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindingStatus.ProtoReflect.Descriptor instead.
func (*FindingStatus) Descriptor() ([]byte, []int) {
	return file_runner_proto_types_proto_rawDescGZIP(), []int{15}
}

func (x *FindingStatus) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *FindingStatus) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *FindingStatus) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

func (x *FindingStatus) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *FindingStatus) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *FindingStatus) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

type Finding struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	UUID                string                 `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Title               string                 `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Description         string                 `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	Remarks             *string                `protobuf:"bytes,4,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	Labels              map[string]string      `protobuf:"bytes,5,rep,name=Labels,proto3" json:"Labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Origins             []*Origin              `protobuf:"bytes,6,rep,name=Origins,proto3" json:"Origins,omitempty"`
	Subjects            []*SubjectReference    `protobuf:"bytes,7,rep,name=Subjects,proto3" json:"Subjects,omitempty"`
	Components          []*ComponentReference  `protobuf:"bytes,8,rep,name=Components,proto3" json:"Components,omitempty"`
	RelatedObservations []*RelatedObservation  `protobuf:"bytes,9,rep,name=RelatedObservations,proto3" json:"RelatedObservations,omitempty"`
	Controls            []*ControlReference    `protobuf:"bytes,10,rep,name=Controls,proto3" json:"Controls,omitempty"`
	Risks               []*RiskReference       `protobuf:"bytes,11,rep,name=Risks,proto3" json:"Risks,omitempty"`
	Status              *FindingStatus         `protobuf:"bytes,12,opt,name=Status,proto3" json:"Status,omitempty"`
	Links               []*Link                `protobuf:"bytes,13,rep,name=Links,proto3" json:"Links,omitempty"`
	Props               []*Property            `protobuf:"bytes,14,rep,name=Props,proto3" json:"Props,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Finding) Reset() {
	*x = Finding{}
	mi := &file_runner_proto_types_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Finding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Finding) ProtoMessage() {}

func (x *Finding) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_types_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Finding.ProtoReflect.Descriptor instead.
func (*Finding) Descriptor() ([]byte, []int) {
	return file_runner_proto_types_proto_rawDescGZIP(), []int{16}
}

func (x *Finding) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Finding) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Finding) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Finding) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

func (x *Finding) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Finding) GetOrigins() []*Origin {
	if x != nil {
		return x.Origins
	}
	return nil
}

func (x *Finding) GetSubjects() []*SubjectReference {
	if x != nil {
		return x.Subjects
	}
	return nil
}

func (x *Finding) GetComponents() []*ComponentReference {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *Finding) GetRelatedObservations() []*RelatedObservation {
	if x != nil {
		return x.RelatedObservations
	}
	return nil
}

func (x *Finding) GetControls() []*ControlReference {
	if x != nil {
		return x.Controls
	}
	return nil
}

func (x *Finding) GetRisks() []*RiskReference {
	if x != nil {
		return x.Risks
	}
	return nil
}

func (x *Finding) GetStatus() *FindingStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Finding) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Finding) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

var File_runner_proto_types_proto protoreflect.FileDescriptor

var file_runner_proto_types_proto_rawDesc = string([]byte{
	0x0a, 0x18, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xe7, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x4e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x02, 0x4e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x55, 0x75, 0x69, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x4e, 0x73, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0xd2, 0x01, 0x0a,
	0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x72, 0x65, 0x66, 0x12, 0x15, 0x0a, 0x03, 0x52, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x52, 0x65, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x10, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x52, 0x65, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x54, 0x65, 0x78,
	0x74, 0x22, 0xa3, 0x01, 0x0a, 0x0b, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x17, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x25, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x55, 0x55, 0x49, 0x44, 0x22, 0x34, 0x0a, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x54, 0x0a,
	0x08, 0x54, 0x68, 0x72, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x12, 0x17, 0x0a, 0x04, 0x48, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x48, 0x72, 0x65, 0x66, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x48,
	0x72, 0x65, 0x66, 0x22, 0x56, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x04, 0x48, 0x72, 0x65,
	0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x48, 0x72, 0x65, 0x66, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x48, 0x72, 0x65, 0x66, 0x22, 0x6a, 0x0a, 0x10, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0xc8, 0x02, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x05,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52,
	0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x25, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x1a, 0x3d, 0x0a,
	0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x0d, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x04,
	0x48, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x48, 0x72,
	0x65, 0x66, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x07, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x07, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x2d,
	0x0a, 0x09, 0x54, 0x68, 0x72, 0x65, 0x61, 0x74, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x74,
	0x49, 0x64, 0x52, 0x09, 0x54, 0x68, 0x72, 0x65, 0x61, 0x74, 0x49, 0x64, 0x73, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x48, 0x72, 0x65, 0x66, 0x22, 0x3e, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x22, 0x30, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xcb, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x6c,
	0x65, 0x76, 0x61, 0x6e, 0x74, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x48, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04,
	0x48, 0x72, 0x65, 0x66, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x25, 0x0a, 0x05, 0x50, 0x72,
	0x6f, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x70,
	0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x48, 0x72, 0x65, 0x66, 0x22, 0xd5, 0x01, 0x0a, 0x04, 0x53, 0x74, 0x65, 0x70, 0x12,
	0x17, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x55, 0x55, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x12, 0x25, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x55, 0x55,
	0x49, 0x44, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0xfc,
	0x01, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x04, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x55, 0x55, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x07,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x05, 0x53,
	0x74, 0x65, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x21,
	0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b,
	0x73, 0x12, 0x25, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x55, 0x55, 0x49,
	0x44, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x87, 0x05,
	0x0a, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49,
	0x44, 0x12, 0x19, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a,
	0x09, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x07, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x05,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12,
	0x25, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52,
	0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x07, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x12,
	0x33, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x43, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x45, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x45, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x10, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x45, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x22, 0xf6, 0x01, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x12, 0x25, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x22, 0xae, 0x05, 0x0a, 0x07, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x07, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x08, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x33, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x69,
	0x73, 0x6b, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x52, 0x69, 0x73,
	0x6b, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x12, 0x25, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_runner_proto_types_proto_rawDescOnce sync.Once
	file_runner_proto_types_proto_rawDescData []byte
)

func file_runner_proto_types_proto_rawDescGZIP() []byte {
	file_runner_proto_types_proto_rawDescOnce.Do(func() {
		file_runner_proto_types_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_runner_proto_types_proto_rawDesc), len(file_runner_proto_types_proto_rawDesc)))
	})
	return file_runner_proto_types_proto_rawDescData
}

var file_runner_proto_types_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_runner_proto_types_proto_goTypes = []any{
	(*Property)(nil),              // 0: proto.Property
	(*Link)(nil),                  // 1: proto.Link
	(*OriginActor)(nil),           // 2: proto.OriginActor
	(*Origin)(nil),                // 3: proto.Origin
	(*ThreatId)(nil),              // 4: proto.ThreatId
	(*ComponentReference)(nil),    // 5: proto.ComponentReference
	(*ControlReference)(nil),      // 6: proto.ControlReference
	(*SubjectReference)(nil),      // 7: proto.SubjectReference
	(*RiskReference)(nil),         // 8: proto.RiskReference
	(*RelatedObservation)(nil),    // 9: proto.RelatedObservation
	(*AssociatedRisk)(nil),        // 10: proto.AssociatedRisk
	(*RelevantEvidence)(nil),      // 11: proto.RelevantEvidence
	(*Step)(nil),                  // 12: proto.Step
	(*Activity)(nil),              // 13: proto.Activity
	(*Observation)(nil),           // 14: proto.Observation
	(*FindingStatus)(nil),         // 15: proto.FindingStatus
	(*Finding)(nil),               // 16: proto.Finding
	nil,                           // 17: proto.SubjectReference.AttributesEntry
	nil,                           // 18: proto.Finding.LabelsEntry
	(*timestamppb.Timestamp)(nil), // 19: google.protobuf.Timestamp
}
var file_runner_proto_types_proto_depIdxs = []int32{
	1,  // 0: proto.OriginActor.Links:type_name -> proto.Link
	0,  // 1: proto.OriginActor.Props:type_name -> proto.Property
	2,  // 2: proto.Origin.Actors:type_name -> proto.OriginActor
	17, // 3: proto.SubjectReference.Attributes:type_name -> proto.SubjectReference.AttributesEntry
	1,  // 4: proto.SubjectReference.Links:type_name -> proto.Link
	0,  // 5: proto.SubjectReference.Props:type_name -> proto.Property
	3,  // 6: proto.RiskReference.Origins:type_name -> proto.Origin
	4,  // 7: proto.RiskReference.ThreatIds:type_name -> proto.ThreatId
	1,  // 8: proto.RelevantEvidence.Links:type_name -> proto.Link
	0,  // 9: proto.RelevantEvidence.Props:type_name -> proto.Property
	1,  // 10: proto.Step.Links:type_name -> proto.Link
	0,  // 11: proto.Step.Props:type_name -> proto.Property
	12, // 12: proto.Activity.Steps:type_name -> proto.Step
	1,  // 13: proto.Activity.Links:type_name -> proto.Link
	0,  // 14: proto.Activity.Props:type_name -> proto.Property
	19, // 15: proto.Observation.Collected:type_name -> google.protobuf.Timestamp
	19, // 16: proto.Observation.Expires:type_name -> google.protobuf.Timestamp
	1,  // 17: proto.Observation.Links:type_name -> proto.Link
	0,  // 18: proto.Observation.Props:type_name -> proto.Property
	3,  // 19: proto.Observation.Origins:type_name -> proto.Origin
	7,  // 20: proto.Observation.Subjects:type_name -> proto.SubjectReference
	13, // 21: proto.Observation.Activities:type_name -> proto.Activity
	5,  // 22: proto.Observation.Components:type_name -> proto.ComponentReference
	11, // 23: proto.Observation.RelevantEvidence:type_name -> proto.RelevantEvidence
	1,  // 24: proto.FindingStatus.Links:type_name -> proto.Link
	0,  // 25: proto.FindingStatus.Props:type_name -> proto.Property
	18, // 26: proto.Finding.Labels:type_name -> proto.Finding.LabelsEntry
	3,  // 27: proto.Finding.Origins:type_name -> proto.Origin
	7,  // 28: proto.Finding.Subjects:type_name -> proto.SubjectReference
	5,  // 29: proto.Finding.Components:type_name -> proto.ComponentReference
	9,  // 30: proto.Finding.RelatedObservations:type_name -> proto.RelatedObservation
	6,  // 31: proto.Finding.Controls:type_name -> proto.ControlReference
	8,  // 32: proto.Finding.Risks:type_name -> proto.RiskReference
	15, // 33: proto.Finding.Status:type_name -> proto.FindingStatus
	1,  // 34: proto.Finding.Links:type_name -> proto.Link
	0,  // 35: proto.Finding.Props:type_name -> proto.Property
	36, // [36:36] is the sub-list for method output_type
	36, // [36:36] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_runner_proto_types_proto_init() }
func file_runner_proto_types_proto_init() {
	if File_runner_proto_types_proto != nil {
		return
	}
	file_runner_proto_types_proto_msgTypes[0].OneofWrappers = []any{}
	file_runner_proto_types_proto_msgTypes[1].OneofWrappers = []any{}
	file_runner_proto_types_proto_msgTypes[2].OneofWrappers = []any{}
	file_runner_proto_types_proto_msgTypes[4].OneofWrappers = []any{}
	file_runner_proto_types_proto_msgTypes[5].OneofWrappers = []any{}
	file_runner_proto_types_proto_msgTypes[7].OneofWrappers = []any{}
	file_runner_proto_types_proto_msgTypes[8].OneofWrappers = []any{}
	file_runner_proto_types_proto_msgTypes[11].OneofWrappers = []any{}
	file_runner_proto_types_proto_msgTypes[12].OneofWrappers = []any{}
	file_runner_proto_types_proto_msgTypes[13].OneofWrappers = []any{}
	file_runner_proto_types_proto_msgTypes[14].OneofWrappers = []any{}
	file_runner_proto_types_proto_msgTypes[15].OneofWrappers = []any{}
	file_runner_proto_types_proto_msgTypes[16].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_runner_proto_types_proto_rawDesc), len(file_runner_proto_types_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_runner_proto_types_proto_goTypes,
		DependencyIndexes: file_runner_proto_types_proto_depIdxs,
		MessageInfos:      file_runner_proto_types_proto_msgTypes,
	}.Build()
	File_runner_proto_types_proto = out.File
	file_runner_proto_types_proto_goTypes = nil
	file_runner_proto_types_proto_depIdxs = nil
}
