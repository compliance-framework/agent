// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: runner/proto/results.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ApiHelper_CreateResult_FullMethodName = "/proto.ApiHelper/CreateResult"
)

// ApiHelperClient is the client API for ApiHelper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiHelperClient interface {
	CreateResult(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (*ResultResponse, error)
}

type apiHelperClient struct {
	cc grpc.ClientConnInterface
}

func NewApiHelperClient(cc grpc.ClientConnInterface) ApiHelperClient {
	return &apiHelperClient{cc}
}

func (c *apiHelperClient) CreateResult(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, ApiHelper_CreateResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiHelperServer is the server API for ApiHelper service.
// All implementations should embed UnimplementedApiHelperServer
// for forward compatibility
type ApiHelperServer interface {
	CreateResult(context.Context, *ResultRequest) (*ResultResponse, error)
}

// UnimplementedApiHelperServer should be embedded to have forward compatible implementations.
type UnimplementedApiHelperServer struct {
}

func (UnimplementedApiHelperServer) CreateResult(context.Context, *ResultRequest) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResult not implemented")
}

// UnsafeApiHelperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiHelperServer will
// result in compilation errors.
type UnsafeApiHelperServer interface {
	mustEmbedUnimplementedApiHelperServer()
}

func RegisterApiHelperServer(s grpc.ServiceRegistrar, srv ApiHelperServer) {
	s.RegisterService(&ApiHelper_ServiceDesc, srv)
}

func _ApiHelper_CreateResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiHelperServer).CreateResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiHelper_CreateResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiHelperServer).CreateResult(ctx, req.(*ResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiHelper_ServiceDesc is the grpc.ServiceDesc for ApiHelper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiHelper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ApiHelper",
	HandlerType: (*ApiHelperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateResult",
			Handler:    _ApiHelper_CreateResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "runner/proto/results.proto",
}
