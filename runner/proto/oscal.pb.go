// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: runner/proto/oscal.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LinkRelationship int32

const (
	LinkRelationship_LINK_RELATIONSHIP_UNKNOWN   LinkRelationship = 0
	LinkRelationship_LINK_RELATIONSHIP_REFERENCE LinkRelationship = 1
)

// Enum value maps for LinkRelationship.
var (
	LinkRelationship_name = map[int32]string{
		0: "LINK_RELATIONSHIP_UNKNOWN",
		1: "LINK_RELATIONSHIP_REFERENCE",
	}
	LinkRelationship_value = map[string]int32{
		"LINK_RELATIONSHIP_UNKNOWN":   0,
		"LINK_RELATIONSHIP_REFERENCE": 1,
	}
)

func (x LinkRelationship) Enum() *LinkRelationship {
	p := new(LinkRelationship)
	*p = x
	return p
}

func (x LinkRelationship) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkRelationship) Descriptor() protoreflect.EnumDescriptor {
	return file_runner_proto_oscal_proto_enumTypes[0].Descriptor()
}

func (LinkRelationship) Type() protoreflect.EnumType {
	return &file_runner_proto_oscal_proto_enumTypes[0]
}

func (x LinkRelationship) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkRelationship.Descriptor instead.
func (LinkRelationship) EnumDescriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{0}
}

type ActorType int32

const (
	ActorType_ACTOR_TYPE_UNKNOWN             ActorType = 0
	ActorType_ACTOR_TYPE_TOOL                ActorType = 1
	ActorType_ACTOR_TYPE_ASSESSMENT_PLATFORM ActorType = 2
	ActorType_ACTOR_TYPE_PARTY               ActorType = 3
)

// Enum value maps for ActorType.
var (
	ActorType_name = map[int32]string{
		0: "ACTOR_TYPE_UNKNOWN",
		1: "ACTOR_TYPE_TOOL",
		2: "ACTOR_TYPE_ASSESSMENT_PLATFORM",
		3: "ACTOR_TYPE_PARTY",
	}
	ActorType_value = map[string]int32{
		"ACTOR_TYPE_UNKNOWN":             0,
		"ACTOR_TYPE_TOOL":                1,
		"ACTOR_TYPE_ASSESSMENT_PLATFORM": 2,
		"ACTOR_TYPE_PARTY":               3,
	}
)

func (x ActorType) Enum() *ActorType {
	p := new(ActorType)
	*p = x
	return p
}

func (x ActorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActorType) Descriptor() protoreflect.EnumDescriptor {
	return file_runner_proto_oscal_proto_enumTypes[1].Descriptor()
}

func (ActorType) Type() protoreflect.EnumType {
	return &file_runner_proto_oscal_proto_enumTypes[1]
}

func (x ActorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActorType.Descriptor instead.
func (ActorType) EnumDescriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{1}
}

type SubjectType int32

const (
	SubjectType_SUBJECT_TYPE_UNKNOWN        SubjectType = 0
	SubjectType_SUBJECT_TYPE_COMPONENT      SubjectType = 1
	SubjectType_SUBJECT_TYPE_INVENTORY_ITEM SubjectType = 2
	SubjectType_SUBJECT_TYPE_LOCATION       SubjectType = 3
	SubjectType_SUBJECT_TYPE_PARTY          SubjectType = 4
	SubjectType_SUBJECT_TYPE_USER           SubjectType = 5
	SubjectType_SUBJECT_TYPE_RESOURCE       SubjectType = 6
)

// Enum value maps for SubjectType.
var (
	SubjectType_name = map[int32]string{
		0: "SUBJECT_TYPE_UNKNOWN",
		1: "SUBJECT_TYPE_COMPONENT",
		2: "SUBJECT_TYPE_INVENTORY_ITEM",
		3: "SUBJECT_TYPE_LOCATION",
		4: "SUBJECT_TYPE_PARTY",
		5: "SUBJECT_TYPE_USER",
		6: "SUBJECT_TYPE_RESOURCE",
	}
	SubjectType_value = map[string]int32{
		"SUBJECT_TYPE_UNKNOWN":        0,
		"SUBJECT_TYPE_COMPONENT":      1,
		"SUBJECT_TYPE_INVENTORY_ITEM": 2,
		"SUBJECT_TYPE_LOCATION":       3,
		"SUBJECT_TYPE_PARTY":          4,
		"SUBJECT_TYPE_USER":           5,
		"SUBJECT_TYPE_RESOURCE":       6,
	}
)

func (x SubjectType) Enum() *SubjectType {
	p := new(SubjectType)
	*p = x
	return p
}

func (x SubjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_runner_proto_oscal_proto_enumTypes[2].Descriptor()
}

func (SubjectType) Type() protoreflect.EnumType {
	return &file_runner_proto_oscal_proto_enumTypes[2]
}

func (x SubjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubjectType.Descriptor instead.
func (SubjectType) EnumDescriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{2}
}

type ImplementationStatusState int32

const (
	ImplementationStatusState_IMPLEMENTATION_STATUS_STATE_UNKNOWN        ImplementationStatusState = 0
	ImplementationStatusState_IMPLEMENTATION_STATUS_STATE_IMPLEMENTED    ImplementationStatusState = 1
	ImplementationStatusState_IMPLEMENTATION_STATUS_STATE_PARTIAL        ImplementationStatusState = 2
	ImplementationStatusState_IMPLEMENTATION_STATUS_STATE_PLANNED        ImplementationStatusState = 3
	ImplementationStatusState_IMPLEMENTATION_STATUS_STATE_ALTERNATIVE    ImplementationStatusState = 4
	ImplementationStatusState_IMPLEMENTATION_STATUS_STATE_NOT_APPLICABLE ImplementationStatusState = 5
)

// Enum value maps for ImplementationStatusState.
var (
	ImplementationStatusState_name = map[int32]string{
		0: "IMPLEMENTATION_STATUS_STATE_UNKNOWN",
		1: "IMPLEMENTATION_STATUS_STATE_IMPLEMENTED",
		2: "IMPLEMENTATION_STATUS_STATE_PARTIAL",
		3: "IMPLEMENTATION_STATUS_STATE_PLANNED",
		4: "IMPLEMENTATION_STATUS_STATE_ALTERNATIVE",
		5: "IMPLEMENTATION_STATUS_STATE_NOT_APPLICABLE",
	}
	ImplementationStatusState_value = map[string]int32{
		"IMPLEMENTATION_STATUS_STATE_UNKNOWN":        0,
		"IMPLEMENTATION_STATUS_STATE_IMPLEMENTED":    1,
		"IMPLEMENTATION_STATUS_STATE_PARTIAL":        2,
		"IMPLEMENTATION_STATUS_STATE_PLANNED":        3,
		"IMPLEMENTATION_STATUS_STATE_ALTERNATIVE":    4,
		"IMPLEMENTATION_STATUS_STATE_NOT_APPLICABLE": 5,
	}
)

func (x ImplementationStatusState) Enum() *ImplementationStatusState {
	p := new(ImplementationStatusState)
	*p = x
	return p
}

func (x ImplementationStatusState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImplementationStatusState) Descriptor() protoreflect.EnumDescriptor {
	return file_runner_proto_oscal_proto_enumTypes[3].Descriptor()
}

func (ImplementationStatusState) Type() protoreflect.EnumType {
	return &file_runner_proto_oscal_proto_enumTypes[3]
}

func (x ImplementationStatusState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImplementationStatusState.Descriptor instead.
func (ImplementationStatusState) EnumDescriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{3}
}

type ObjectiveState int32

const (
	ObjectiveState_OBJECTIVE_STATE_UNKNOWN       ObjectiveState = 0
	ObjectiveState_OBJECTIVE_STATE_SATISFIED     ObjectiveState = 1
	ObjectiveState_OBJECTIVE_STATE_NOT_SATISFIED ObjectiveState = 2
)

// Enum value maps for ObjectiveState.
var (
	ObjectiveState_name = map[int32]string{
		0: "OBJECTIVE_STATE_UNKNOWN",
		1: "OBJECTIVE_STATE_SATISFIED",
		2: "OBJECTIVE_STATE_NOT_SATISFIED",
	}
	ObjectiveState_value = map[string]int32{
		"OBJECTIVE_STATE_UNKNOWN":       0,
		"OBJECTIVE_STATE_SATISFIED":     1,
		"OBJECTIVE_STATE_NOT_SATISFIED": 2,
	}
)

func (x ObjectiveState) Enum() *ObjectiveState {
	p := new(ObjectiveState)
	*p = x
	return p
}

func (x ObjectiveState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectiveState) Descriptor() protoreflect.EnumDescriptor {
	return file_runner_proto_oscal_proto_enumTypes[4].Descriptor()
}

func (ObjectiveState) Type() protoreflect.EnumType {
	return &file_runner_proto_oscal_proto_enumTypes[4]
}

func (x ObjectiveState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObjectiveState.Descriptor instead.
func (ObjectiveState) EnumDescriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{4}
}

type ObjectiveReason int32

const (
	ObjectiveReason_OBJECTIVE_REASON_UNKNOWN ObjectiveReason = 0
	ObjectiveReason_OBJECTIVE_REASON_PASS    ObjectiveReason = 1
	ObjectiveReason_OBJECTIVE_REASON_FAIL    ObjectiveReason = 2
	ObjectiveReason_OBJECTIVE_REASON_OTHER   ObjectiveReason = 3
)

// Enum value maps for ObjectiveReason.
var (
	ObjectiveReason_name = map[int32]string{
		0: "OBJECTIVE_REASON_UNKNOWN",
		1: "OBJECTIVE_REASON_PASS",
		2: "OBJECTIVE_REASON_FAIL",
		3: "OBJECTIVE_REASON_OTHER",
	}
	ObjectiveReason_value = map[string]int32{
		"OBJECTIVE_REASON_UNKNOWN": 0,
		"OBJECTIVE_REASON_PASS":    1,
		"OBJECTIVE_REASON_FAIL":    2,
		"OBJECTIVE_REASON_OTHER":   3,
	}
)

func (x ObjectiveReason) Enum() *ObjectiveReason {
	p := new(ObjectiveReason)
	*p = x
	return p
}

func (x ObjectiveReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectiveReason) Descriptor() protoreflect.EnumDescriptor {
	return file_runner_proto_oscal_proto_enumTypes[5].Descriptor()
}

func (ObjectiveReason) Type() protoreflect.EnumType {
	return &file_runner_proto_oscal_proto_enumTypes[5]
}

func (x ObjectiveReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObjectiveReason.Descriptor instead.
func (ObjectiveReason) EnumDescriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{5}
}

// Observation Method
// Identifies how the observation was made.
type ObservationMethod int32

const (
	ObservationMethod_OBSERVATION_METHOD_UNKNOWN   ObservationMethod = 0
	ObservationMethod_OBSERVATION_METHOD_EXAMINE   ObservationMethod = 1
	ObservationMethod_OBSERVATION_METHOD_INTERVIEW ObservationMethod = 2
	ObservationMethod_OBSERVATION_METHOD_TEST      ObservationMethod = 3
)

// Enum value maps for ObservationMethod.
var (
	ObservationMethod_name = map[int32]string{
		0: "OBSERVATION_METHOD_UNKNOWN",
		1: "OBSERVATION_METHOD_EXAMINE",
		2: "OBSERVATION_METHOD_INTERVIEW",
		3: "OBSERVATION_METHOD_TEST",
	}
	ObservationMethod_value = map[string]int32{
		"OBSERVATION_METHOD_UNKNOWN":   0,
		"OBSERVATION_METHOD_EXAMINE":   1,
		"OBSERVATION_METHOD_INTERVIEW": 2,
		"OBSERVATION_METHOD_TEST":      3,
	}
)

func (x ObservationMethod) Enum() *ObservationMethod {
	p := new(ObservationMethod)
	*p = x
	return p
}

func (x ObservationMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObservationMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_runner_proto_oscal_proto_enumTypes[6].Descriptor()
}

func (ObservationMethod) Type() protoreflect.EnumType {
	return &file_runner_proto_oscal_proto_enumTypes[6]
}

func (x ObservationMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObservationMethod.Descriptor instead.
func (ObservationMethod) EnumDescriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{6}
}

// Observation Type
// Identifies the nature of the observation. More than one may be used to further qualify and enable filtering.
type ObservationType int32

const (
	ObservationType_OBSERVATION_TYPE_UNKNOWN             ObservationType = 0
	ObservationType_OBSERVATION_TYPE_SSP_STATEMENT_ISSUE ObservationType = 1
	ObservationType_OBSERVATION_TYPE_CONTROL_OBJECTIVE   ObservationType = 2
	ObservationType_OBSERVATION_TYPE_MITIGATION          ObservationType = 3
	ObservationType_OBSERVATION_TYPE_FINDING             ObservationType = 4
	ObservationType_OBSERVATION_TYPE_HISTORIC            ObservationType = 5
)

// Enum value maps for ObservationType.
var (
	ObservationType_name = map[int32]string{
		0: "OBSERVATION_TYPE_UNKNOWN",
		1: "OBSERVATION_TYPE_SSP_STATEMENT_ISSUE",
		2: "OBSERVATION_TYPE_CONTROL_OBJECTIVE",
		3: "OBSERVATION_TYPE_MITIGATION",
		4: "OBSERVATION_TYPE_FINDING",
		5: "OBSERVATION_TYPE_HISTORIC",
	}
	ObservationType_value = map[string]int32{
		"OBSERVATION_TYPE_UNKNOWN":             0,
		"OBSERVATION_TYPE_SSP_STATEMENT_ISSUE": 1,
		"OBSERVATION_TYPE_CONTROL_OBJECTIVE":   2,
		"OBSERVATION_TYPE_MITIGATION":          3,
		"OBSERVATION_TYPE_FINDING":             4,
		"OBSERVATION_TYPE_HISTORIC":            5,
	}
)

func (x ObservationType) Enum() *ObservationType {
	p := new(ObservationType)
	*p = x
	return p
}

func (x ObservationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObservationType) Descriptor() protoreflect.EnumDescriptor {
	return file_runner_proto_oscal_proto_enumTypes[7].Descriptor()
}

func (ObservationType) Type() protoreflect.EnumType {
	return &file_runner_proto_oscal_proto_enumTypes[7]
}

func (x ObservationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObservationType.Descriptor instead.
func (ObservationType) EnumDescriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{7}
}

// Finding Target Type
// Identifies the type of the target.
type FindingTarget_TargetType int32

const (
	FindingTarget_TARGET_TYPE_UNKNOWN FindingTarget_TargetType = 0
	FindingTarget_STATEMENT_ID        FindingTarget_TargetType = 1
	FindingTarget_OBJECTIVE_ID        FindingTarget_TargetType = 2
)

// Enum value maps for FindingTarget_TargetType.
var (
	FindingTarget_TargetType_name = map[int32]string{
		0: "TARGET_TYPE_UNKNOWN",
		1: "STATEMENT_ID",
		2: "OBJECTIVE_ID",
	}
	FindingTarget_TargetType_value = map[string]int32{
		"TARGET_TYPE_UNKNOWN": 0,
		"STATEMENT_ID":        1,
		"OBJECTIVE_ID":        2,
	}
)

func (x FindingTarget_TargetType) Enum() *FindingTarget_TargetType {
	p := new(FindingTarget_TargetType)
	*p = x
	return p
}

func (x FindingTarget_TargetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FindingTarget_TargetType) Descriptor() protoreflect.EnumDescriptor {
	return file_runner_proto_oscal_proto_enumTypes[8].Descriptor()
}

func (FindingTarget_TargetType) Type() protoreflect.EnumType {
	return &file_runner_proto_oscal_proto_enumTypes[8]
}

func (x FindingTarget_TargetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FindingTarget_TargetType.Descriptor instead.
func (FindingTarget_TargetType) EnumDescriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{12, 0}
}

// Property
// An attribute, characteristic, or quality of the containing object expressed as a namespace qualified name/value pair.
type Property struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Property Name
	// A textual label, within a namespace, that identifies a specific attribute, characteristic, or quality of the property's containing object.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Property Value
	// Indicates the value of the attribute, characteristic, or quality.
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	// Property Universally Unique Identifier
	// A unique identifier for a property.
	Uuid *string `protobuf:"bytes,3,opt,name=Uuid,proto3,oneof" json:"Uuid,omitempty"`
	// Property Namespace
	// A namespace qualifying the property's name. This allows different organizations to associate distinct semantics with the same name.
	Ns *string `protobuf:"bytes,4,opt,name=Ns,proto3,oneof" json:"Ns,omitempty"`
	// Property Class
	// A textual label that provides a sub-type or characterization of the property's name.
	Class *string `protobuf:"bytes,5,opt,name=Class,proto3,oneof" json:"Class,omitempty"`
	// Property Group
	// An identifier for relating distinct sets of properties.
	Group *string `protobuf:"bytes,6,opt,name=Group,proto3,oneof" json:"Group,omitempty"`
	// Remarks
	// Additional explanatory notes for the property.
	Remarks       *string `protobuf:"bytes,7,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Property) Reset() {
	*x = Property{}
	mi := &file_runner_proto_oscal_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Property) ProtoMessage() {}

func (x *Property) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Property.ProtoReflect.Descriptor instead.
func (*Property) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{0}
}

func (x *Property) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Property) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Property) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

func (x *Property) GetNs() string {
	if x != nil && x.Ns != nil {
		return *x.Ns
	}
	return ""
}

func (x *Property) GetClass() string {
	if x != nil && x.Class != nil {
		return *x.Class
	}
	return ""
}

func (x *Property) GetGroup() string {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return ""
}

func (x *Property) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

type Link struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Hypertext Reference
	// A resolvable URL reference to a resource.
	Href string `protobuf:"bytes,1,opt,name=Href,proto3" json:"Href,omitempty"`
	// Link Relation Type
	// Describes the type of relationship provided by the link's hypertext reference. This can be an indicator of the link's purpose.
	Rel *LinkRelationship `protobuf:"varint,2,opt,name=Rel,proto3,enum=proto.LinkRelationship,oneof" json:"Rel,omitempty"`
	// Media Type
	// A label that indicates the nature of a resource, as a data serialization or format.
	MediaType *string `protobuf:"bytes,3,opt,name=MediaType,proto3,oneof" json:"MediaType,omitempty"`
	// Resource Fragment
	// In case where the href points to a back-matter/resource, this value will indicate the URI fragment to append to any rlink associated with the resource. This value MUST be URI encoded.
	ResourceFragment *string `protobuf:"bytes,4,opt,name=ResourceFragment,proto3,oneof" json:"ResourceFragment,omitempty"`
	// Link Text
	// A textual label to associate with the link, which may be used for presentation in a tool.
	Text          *string `protobuf:"bytes,5,opt,name=Text,proto3,oneof" json:"Text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Link) Reset() {
	*x = Link{}
	mi := &file_runner_proto_oscal_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{1}
}

func (x *Link) GetHref() string {
	if x != nil {
		return x.Href
	}
	return ""
}

func (x *Link) GetRel() LinkRelationship {
	if x != nil && x.Rel != nil {
		return *x.Rel
	}
	return LinkRelationship_LINK_RELATIONSHIP_UNKNOWN
}

func (x *Link) GetMediaType() string {
	if x != nil && x.MediaType != nil {
		return *x.MediaType
	}
	return ""
}

func (x *Link) GetResourceFragment() string {
	if x != nil && x.ResourceFragment != nil {
		return *x.ResourceFragment
	}
	return ""
}

func (x *Link) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

// Originating Actor
// The actor that produces an observation, a finding, or a risk. One or more actor types can be used to specify a person that is using a tool.
type OriginActor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Actor Type
	// The kind of actor.
	Type ActorType `protobuf:"varint,1,opt,name=Type,proto3,enum=proto.ActorType" json:"Type,omitempty"`
	// Actor Universally Unique Identifier Reference
	// A machine-oriented identifier reference to the tool or person based on the associated type.
	ActorUuid string `protobuf:"bytes,2,opt,name=ActorUuid,proto3" json:"ActorUuid,omitempty"`
	// Actor Role
	// For a party, this can optionally be used to specify the role the actor was performing.
	RoleId *string `protobuf:"bytes,3,opt,name=RoleId,proto3,oneof" json:"RoleId,omitempty"`
	// Properties
	// Additional attributes related to the actor.
	Props []*Property `protobuf:"bytes,4,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	// References to related resources.
	Links         []*Link `protobuf:"bytes,5,rep,name=Links,proto3" json:"Links,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OriginActor) Reset() {
	*x = OriginActor{}
	mi := &file_runner_proto_oscal_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OriginActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OriginActor) ProtoMessage() {}

func (x *OriginActor) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OriginActor.ProtoReflect.Descriptor instead.
func (*OriginActor) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{2}
}

func (x *OriginActor) GetType() ActorType {
	if x != nil {
		return x.Type
	}
	return ActorType_ACTOR_TYPE_UNKNOWN
}

func (x *OriginActor) GetActorUuid() string {
	if x != nil {
		return x.ActorUuid
	}
	return ""
}

func (x *OriginActor) GetRoleId() string {
	if x != nil && x.RoleId != nil {
		return *x.RoleId
	}
	return ""
}

func (x *OriginActor) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *OriginActor) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

// Select Assessment Subject
// Identifies a set of assessment subjects to include/exclude by UUID.
type SelectSubjectById struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Subject Universally Unique Identifier Reference
	// A machine-oriented identifier reference to a component, inventory-item, location, party, user, or resource using it's UUID.
	SubjectUuid string `protobuf:"bytes,1,opt,name=SubjectUuid,proto3" json:"SubjectUuid,omitempty"`
	// Subject Universally Unique Identifier Reference Type
	// Used to indicate the type of object pointed to by the uuid-ref within a subject.
	Type SubjectType `protobuf:"varint,2,opt,name=Type,proto3,enum=proto.SubjectType" json:"Type,omitempty"`
	// Properties
	// Additional attributes related to the subject.
	Props []*Property `protobuf:"bytes,3,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	// References to related resources.
	Links []*Link `protobuf:"bytes,4,rep,name=Links,proto3" json:"Links,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,5,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SelectSubjectById) Reset() {
	*x = SelectSubjectById{}
	mi := &file_runner_proto_oscal_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SelectSubjectById) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectSubjectById) ProtoMessage() {}

func (x *SelectSubjectById) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectSubjectById.ProtoReflect.Descriptor instead.
func (*SelectSubjectById) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{3}
}

func (x *SelectSubjectById) GetSubjectUuid() string {
	if x != nil {
		return x.SubjectUuid
	}
	return ""
}

func (x *SelectSubjectById) GetType() SubjectType {
	if x != nil {
		return x.Type
	}
	return SubjectType_SUBJECT_TYPE_UNKNOWN
}

func (x *SelectSubjectById) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *SelectSubjectById) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *SelectSubjectById) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

type IncludeAll struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IncludeAll) Reset() {
	*x = IncludeAll{}
	mi := &file_runner_proto_oscal_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncludeAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncludeAll) ProtoMessage() {}

func (x *IncludeAll) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncludeAll.ProtoReflect.Descriptor instead.
func (*IncludeAll) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{4}
}

// Subject of Assessment
// Identifies system elements being assessed, such as components, inventory items, and locations. In the assessment plan, this identifies a planned assessment subject. In the assessment results this is an actual assessment subject, and reflects any changes from the plan. exactly what will be the focus of this assessment. Any subjects not identified in this way are out-of-scope.
type AssessmentSubject struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Subject Type
	// Indicates the type of assessment subject, such as a component, inventory, item, location, or party represented by this selection statement.
	Type SubjectType `protobuf:"varint,1,opt,name=Type,proto3,enum=proto.SubjectType" json:"Type,omitempty"`
	// Include Subjects Description
	// A human-readable description of the collection of subjects being included in this assessment.
	Description *string `protobuf:"bytes,2,opt,name=Description,proto3,oneof" json:"Description,omitempty"`
	// Properties
	// Additional attributes related to the assessment subject.
	Props []*Property `protobuf:"bytes,3,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	// References to related resources.
	Links []*Link `protobuf:"bytes,4,rep,name=Links,proto3" json:"Links,omitempty"`
	// Include All
	// Specifies if all subjects should be included.
	IncludeAll *IncludeAll `protobuf:"bytes,5,opt,name=IncludeAll,proto3,oneof" json:"IncludeAll,omitempty"`
	// Include Subjects
	// Subjects explicitly included in the assessment.
	IncludeSubjects []*SelectSubjectById `protobuf:"bytes,6,rep,name=IncludeSubjects,proto3" json:"IncludeSubjects,omitempty"`
	// Exclude Subjects
	// Subjects explicitly excluded from the assessment.
	ExcludeSubjects []*SelectSubjectById `protobuf:"bytes,7,rep,name=ExcludeSubjects,proto3" json:"ExcludeSubjects,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,8,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssessmentSubject) Reset() {
	*x = AssessmentSubject{}
	mi := &file_runner_proto_oscal_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssessmentSubject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssessmentSubject) ProtoMessage() {}

func (x *AssessmentSubject) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssessmentSubject.ProtoReflect.Descriptor instead.
func (*AssessmentSubject) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{5}
}

func (x *AssessmentSubject) GetType() SubjectType {
	if x != nil {
		return x.Type
	}
	return SubjectType_SUBJECT_TYPE_UNKNOWN
}

func (x *AssessmentSubject) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *AssessmentSubject) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *AssessmentSubject) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *AssessmentSubject) GetIncludeAll() *IncludeAll {
	if x != nil {
		return x.IncludeAll
	}
	return nil
}

func (x *AssessmentSubject) GetIncludeSubjects() []*SelectSubjectById {
	if x != nil {
		return x.IncludeSubjects
	}
	return nil
}

func (x *AssessmentSubject) GetExcludeSubjects() []*SelectSubjectById {
	if x != nil {
		return x.ExcludeSubjects
	}
	return nil
}

func (x *AssessmentSubject) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Identified Subject
// Used to detail assessment subjects that were identified by this task.
type IdentifiedSubject struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Assessment Subject Placeholder Universally Unique Identifier Reference
	// A machine-oriented identifier reference to a unique assessment subject placeholder defined by this task.
	SubjectPlaceholderUuid string `protobuf:"bytes,1,opt,name=SubjectPlaceholderUuid,proto3" json:"SubjectPlaceholderUuid,omitempty"`
	// Subjects
	// Assessment subjects identified by this task.
	Subjects      []*AssessmentSubject `protobuf:"bytes,2,rep,name=Subjects,proto3" json:"Subjects,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IdentifiedSubject) Reset() {
	*x = IdentifiedSubject{}
	mi := &file_runner_proto_oscal_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdentifiedSubject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentifiedSubject) ProtoMessage() {}

func (x *IdentifiedSubject) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentifiedSubject.ProtoReflect.Descriptor instead.
func (*IdentifiedSubject) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{6}
}

func (x *IdentifiedSubject) GetSubjectPlaceholderUuid() string {
	if x != nil {
		return x.SubjectPlaceholderUuid
	}
	return ""
}

func (x *IdentifiedSubject) GetSubjects() []*AssessmentSubject {
	if x != nil {
		return x.Subjects
	}
	return nil
}

// Responsible Party
// A reference to a set of persons and/or organizations that have responsibility for performing the referenced role in the context of the containing object.
type ResponsibleParty struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Responsible Role
	// A reference to a role performed by a party.
	RoleId string `protobuf:"bytes,1,opt,name=RoleId,proto3" json:"RoleId,omitempty"`
	// Party UUIDs
	// References to parties that perform the role.
	PartyUuids []string `protobuf:"bytes,2,rep,name=PartyUuids,proto3" json:"PartyUuids,omitempty"`
	// Properties
	// Additional attributes related to the responsible party.
	Props []*Property `protobuf:"bytes,3,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	// References to related resources.
	Links []*Link `protobuf:"bytes,4,rep,name=Links,proto3" json:"Links,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,5,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResponsibleParty) Reset() {
	*x = ResponsibleParty{}
	mi := &file_runner_proto_oscal_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponsibleParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsibleParty) ProtoMessage() {}

func (x *ResponsibleParty) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsibleParty.ProtoReflect.Descriptor instead.
func (*ResponsibleParty) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{7}
}

func (x *ResponsibleParty) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *ResponsibleParty) GetPartyUuids() []string {
	if x != nil {
		return x.PartyUuids
	}
	return nil
}

func (x *ResponsibleParty) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *ResponsibleParty) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *ResponsibleParty) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Task Reference
// Identifies an individual task for which the containing object is a consequence of.
type RelatedTask struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Task Universally Unique Identifier Reference
	// A machine-oriented identifier reference to a unique task.
	TaskUuid string `protobuf:"bytes,1,opt,name=TaskUuid,proto3" json:"TaskUuid,omitempty"`
	// Properties
	// Additional attributes related to the task.
	Props []*Property `protobuf:"bytes,2,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	// References to related resources.
	Links []*Link `protobuf:"bytes,3,rep,name=Links,proto3" json:"Links,omitempty"`
	// Responsible Parties
	// Parties responsible for this task.
	ResponsibleParties []*ResponsibleParty `protobuf:"bytes,4,rep,name=ResponsibleParties,proto3" json:"ResponsibleParties,omitempty"`
	// Subjects
	// Assessment subjects related to this task.
	Subjects []*AssessmentSubject `protobuf:"bytes,5,rep,name=Subjects,proto3" json:"Subjects,omitempty"`
	// Identified Subject
	// Used to detail assessment subjects that were identified by this task.
	IdentifiedSubject *IdentifiedSubject `protobuf:"bytes,6,opt,name=IdentifiedSubject,proto3,oneof" json:"IdentifiedSubject,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,7,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelatedTask) Reset() {
	*x = RelatedTask{}
	mi := &file_runner_proto_oscal_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelatedTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedTask) ProtoMessage() {}

func (x *RelatedTask) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedTask.ProtoReflect.Descriptor instead.
func (*RelatedTask) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{8}
}

func (x *RelatedTask) GetTaskUuid() string {
	if x != nil {
		return x.TaskUuid
	}
	return ""
}

func (x *RelatedTask) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *RelatedTask) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *RelatedTask) GetResponsibleParties() []*ResponsibleParty {
	if x != nil {
		return x.ResponsibleParties
	}
	return nil
}

func (x *RelatedTask) GetSubjects() []*AssessmentSubject {
	if x != nil {
		return x.Subjects
	}
	return nil
}

func (x *RelatedTask) GetIdentifiedSubject() *IdentifiedSubject {
	if x != nil {
		return x.IdentifiedSubject
	}
	return nil
}

func (x *RelatedTask) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Origin
// Identifies the source of the finding, such as a tool, interviewed person, or activity.
type Origin struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Actors
	// The actors that contributed to the finding.
	Actors []*OriginActor `protobuf:"bytes,1,rep,name=Actors,proto3" json:"Actors,omitempty"`
	// Related Tasks
	// Tasks related to the finding's origin.
	RelatedTasks  []*RelatedTask `protobuf:"bytes,2,rep,name=RelatedTasks,proto3" json:"RelatedTasks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Origin) Reset() {
	*x = Origin{}
	mi := &file_runner_proto_oscal_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Origin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Origin) ProtoMessage() {}

func (x *Origin) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Origin.ProtoReflect.Descriptor instead.
func (*Origin) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{9}
}

func (x *Origin) GetActors() []*OriginActor {
	if x != nil {
		return x.Actors
	}
	return nil
}

func (x *Origin) GetRelatedTasks() []*RelatedTask {
	if x != nil {
		return x.RelatedTasks
	}
	return nil
}

// Implementation Status
// Indicates the degree to which a given control is implemented.
type ImplementationStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Implementation State
	// Identifies the implementation status of the control or control objective.
	State ImplementationStatusState `protobuf:"varint,1,opt,name=State,proto3,enum=proto.ImplementationStatusState" json:"State,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,2,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImplementationStatus) Reset() {
	*x = ImplementationStatus{}
	mi := &file_runner_proto_oscal_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImplementationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplementationStatus) ProtoMessage() {}

func (x *ImplementationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplementationStatus.ProtoReflect.Descriptor instead.
func (*ImplementationStatus) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{10}
}

func (x *ImplementationStatus) GetState() ImplementationStatusState {
	if x != nil {
		return x.State
	}
	return ImplementationStatusState_IMPLEMENTATION_STATUS_STATE_UNKNOWN
}

func (x *ImplementationStatus) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Objective Status
// A determination of if the objective is satisfied or not within a given system.
type ObjectiveStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Objective Status State
	// An indication as to whether the objective is satisfied or not.
	State ObjectiveState `protobuf:"varint,1,opt,name=State,proto3,enum=proto.ObjectiveState" json:"State,omitempty"`
	// Objective Status Reason
	// The reason the objective was given its status.
	Reason *ObjectiveReason `protobuf:"varint,2,opt,name=Reason,proto3,enum=proto.ObjectiveReason,oneof" json:"Reason,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,3,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ObjectiveStatus) Reset() {
	*x = ObjectiveStatus{}
	mi := &file_runner_proto_oscal_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectiveStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectiveStatus) ProtoMessage() {}

func (x *ObjectiveStatus) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectiveStatus.ProtoReflect.Descriptor instead.
func (*ObjectiveStatus) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{11}
}

func (x *ObjectiveStatus) GetState() ObjectiveState {
	if x != nil {
		return x.State
	}
	return ObjectiveState_OBJECTIVE_STATE_UNKNOWN
}

func (x *ObjectiveStatus) GetReason() ObjectiveReason {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ObjectiveReason_OBJECTIVE_REASON_UNKNOWN
}

func (x *ObjectiveStatus) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Objective Status
// Captures an assessor's conclusions regarding the degree to which an objective is satisfied.
type FindingTarget struct {
	state protoimpl.MessageState   `protogen:"open.v1"`
	Type  FindingTarget_TargetType `protobuf:"varint,1,opt,name=Type,proto3,enum=proto.FindingTarget_TargetType" json:"Type,omitempty"`
	// Finding Target Identifier Reference
	// A machine-oriented identifier reference for a specific target qualified by the type.
	TargetId string `protobuf:"bytes,2,opt,name=TargetId,proto3" json:"TargetId,omitempty"`
	// Objective Status Title
	// The title for this objective status.
	Title *string `protobuf:"bytes,3,opt,name=Title,proto3,oneof" json:"Title,omitempty"`
	// Objective Status Description
	// A human-readable description of the assessor's conclusions regarding the degree to which an objective is satisfied.
	Description *string `protobuf:"bytes,4,opt,name=Description,proto3,oneof" json:"Description,omitempty"`
	// Properties
	// Additional attributes related to the finding target.
	Props []*Property `protobuf:"bytes,5,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	// References to related resources.
	Links []*Link `protobuf:"bytes,6,rep,name=Links,proto3" json:"Links,omitempty"`
	// Objective Status
	// A determination of if the objective is satisfied or not within a given system.
	Status *ObjectiveStatus `protobuf:"bytes,7,opt,name=Status,proto3" json:"Status,omitempty"`
	// Implementation Status
	// The implementation status of the objective.
	ImplementationStatus *ImplementationStatus `protobuf:"bytes,8,opt,name=ImplementationStatus,proto3,oneof" json:"ImplementationStatus,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,9,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindingTarget) Reset() {
	*x = FindingTarget{}
	mi := &file_runner_proto_oscal_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindingTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindingTarget) ProtoMessage() {}

func (x *FindingTarget) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindingTarget.ProtoReflect.Descriptor instead.
func (*FindingTarget) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{12}
}

func (x *FindingTarget) GetType() FindingTarget_TargetType {
	if x != nil {
		return x.Type
	}
	return FindingTarget_TARGET_TYPE_UNKNOWN
}

func (x *FindingTarget) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *FindingTarget) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *FindingTarget) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *FindingTarget) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *FindingTarget) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *FindingTarget) GetStatus() *ObjectiveStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FindingTarget) GetImplementationStatus() *ImplementationStatus {
	if x != nil {
		return x.ImplementationStatus
	}
	return nil
}

func (x *FindingTarget) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Related Observation
// Relates the finding to a set of referenced observations that were used to determine the finding.
type RelatedObservation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Observation Universally Unique Identifier Reference
	// A machine-oriented identifier reference to an observation defined in the list of observations.
	ObservationUuid string `protobuf:"bytes,1,opt,name=ObservationUuid,proto3" json:"ObservationUuid,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RelatedObservation) Reset() {
	*x = RelatedObservation{}
	mi := &file_runner_proto_oscal_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelatedObservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedObservation) ProtoMessage() {}

func (x *RelatedObservation) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedObservation.ProtoReflect.Descriptor instead.
func (*RelatedObservation) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{13}
}

func (x *RelatedObservation) GetObservationUuid() string {
	if x != nil {
		return x.ObservationUuid
	}
	return ""
}

// Associated Risk
// Relates the finding to a set of referenced risks that were used to determine the finding.
type RelatedRisk struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Risk Universally Unique Identifier Reference
	// A reference to a risk in the list of risks.
	RiskUuid      string `protobuf:"bytes,1,opt,name=RiskUuid,proto3" json:"RiskUuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelatedRisk) Reset() {
	*x = RelatedRisk{}
	mi := &file_runner_proto_oscal_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelatedRisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedRisk) ProtoMessage() {}

func (x *RelatedRisk) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedRisk.ProtoReflect.Descriptor instead.
func (*RelatedRisk) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{14}
}

func (x *RelatedRisk) GetRiskUuid() string {
	if x != nil {
		return x.RiskUuid
	}
	return ""
}

// Relevant Evidence
// Links this observation to relevant evidence.
type RelevantEvidence struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Relevant Evidence Reference
	// A resolvable URL reference to relevant evidence.
	Href *string `protobuf:"bytes,1,opt,name=Href,proto3,oneof" json:"Href,omitempty"`
	// Relevant Evidence Description
	// A human-readable description of this evidence.
	Description string `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	// Properties
	// Additional attributes related to the evidence.
	Props []*Property `protobuf:"bytes,3,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	// References to related resources.
	Links []*Link `protobuf:"bytes,4,rep,name=Links,proto3" json:"Links,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,5,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelevantEvidence) Reset() {
	*x = RelevantEvidence{}
	mi := &file_runner_proto_oscal_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelevantEvidence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelevantEvidence) ProtoMessage() {}

func (x *RelevantEvidence) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelevantEvidence.ProtoReflect.Descriptor instead.
func (*RelevantEvidence) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{15}
}

func (x *RelevantEvidence) GetHref() string {
	if x != nil && x.Href != nil {
		return *x.Href
	}
	return ""
}

func (x *RelevantEvidence) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RelevantEvidence) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *RelevantEvidence) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *RelevantEvidence) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Identifies the Subject
// A human-oriented identifier reference to a resource. Use type to indicate whether the identified resource is a component, inventory item, location, user, or something else.
type SubjectReference struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Subject Universally Unique Identifier Reference
	// A machine-oriented identifier reference to a component, inventory-item, location, party, user, or resource using its UUID.
	SubjectUuid string `protobuf:"bytes,1,opt,name=SubjectUuid,proto3" json:"SubjectUuid,omitempty"`
	// Subject Universally Unique Identifier Reference Type
	// Used to indicate the type of object pointed to by the uuid-ref within a subject.
	Type SubjectType `protobuf:"varint,2,opt,name=Type,proto3,enum=proto.SubjectType" json:"Type,omitempty"`
	// Subject Reference Title
	// The title or name for the referenced subject.
	Title *string `protobuf:"bytes,3,opt,name=Title,proto3,oneof" json:"Title,omitempty"`
	// Properties
	// Additional attributes related to the subject reference.
	Props []*Property `protobuf:"bytes,4,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	// References to related resources.
	Links []*Link `protobuf:"bytes,5,rep,name=Links,proto3" json:"Links,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,6,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubjectReference) Reset() {
	*x = SubjectReference{}
	mi := &file_runner_proto_oscal_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubjectReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectReference) ProtoMessage() {}

func (x *SubjectReference) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectReference.ProtoReflect.Descriptor instead.
func (*SubjectReference) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{16}
}

func (x *SubjectReference) GetSubjectUuid() string {
	if x != nil {
		return x.SubjectUuid
	}
	return ""
}

func (x *SubjectReference) GetType() SubjectType {
	if x != nil {
		return x.Type
	}
	return SubjectType_SUBJECT_TYPE_UNKNOWN
}

func (x *SubjectReference) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *SubjectReference) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *SubjectReference) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *SubjectReference) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Finding
// Describes an individual finding.
type Finding struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Finding Universally Unique Identifier
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this finding in this or other OSCAL instances. The locally defined UUID of the finding can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	// Finding Title
	// The title for this finding.
	Title string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	// Finding Description
	// A human-readable description of this finding.
	Description string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	// Properties
	// Additional attributes related to the finding.
	Props []*Property `protobuf:"bytes,4,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	// References to related resources.
	Links []*Link `protobuf:"bytes,5,rep,name=Links,proto3" json:"Links,omitempty"`
	// Origins
	// The sources of the finding, such as tools or activities.
	Origins []*Origin `protobuf:"bytes,6,rep,name=Origins,proto3" json:"Origins,omitempty"`
	// Target
	// The objective status and target of the finding.
	Target *FindingTarget `protobuf:"bytes,7,opt,name=Target,proto3" json:"Target,omitempty"`
	// Implementation Statement UUID
	// A reference to the implementation statement in the SSP related to this finding.
	ImplementationStatementUuid *string `protobuf:"bytes,8,opt,name=ImplementationStatementUuid,proto3,oneof" json:"ImplementationStatementUuid,omitempty"`
	// Related Observation
	// Relates the finding to a set of referenced observations that were used to determine the finding.
	RelatedObservations []*RelatedObservation `protobuf:"bytes,9,rep,name=RelatedObservations,proto3" json:"RelatedObservations,omitempty"`
	// Associated Risk
	// Relates the finding to a set of referenced risks that were used to determine the finding.
	RelatedRisks []*RelatedRisk `protobuf:"bytes,10,rep,name=RelatedRisks,proto3" json:"RelatedRisks,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,11,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Finding) Reset() {
	*x = Finding{}
	mi := &file_runner_proto_oscal_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Finding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Finding) ProtoMessage() {}

func (x *Finding) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Finding.ProtoReflect.Descriptor instead.
func (*Finding) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{17}
}

func (x *Finding) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Finding) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Finding) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Finding) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *Finding) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Finding) GetOrigins() []*Origin {
	if x != nil {
		return x.Origins
	}
	return nil
}

func (x *Finding) GetTarget() *FindingTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Finding) GetImplementationStatementUuid() string {
	if x != nil && x.ImplementationStatementUuid != nil {
		return *x.ImplementationStatementUuid
	}
	return ""
}

func (x *Finding) GetRelatedObservations() []*RelatedObservation {
	if x != nil {
		return x.RelatedObservations
	}
	return nil
}

func (x *Finding) GetRelatedRisks() []*RelatedRisk {
	if x != nil {
		return x.RelatedRisks
	}
	return nil
}

func (x *Finding) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Observation
// Describes an individual observation.
type Observation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Observation Universally Unique Identifier
	// A globally unique identifier for this observation, used for cross-instance referencing.
	Uuid string `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	// Observation Title
	// The title for this observation.
	Title *string `protobuf:"bytes,2,opt,name=Title,proto3,oneof" json:"Title,omitempty"`
	// Observation Description
	// A human-readable description of this assessment observation.
	Description string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	// Properties
	// Additional attributes related to the observation.
	Props []*Property `protobuf:"bytes,4,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	// References to related resources.
	Links []*Link `protobuf:"bytes,5,rep,name=Links,proto3" json:"Links,omitempty"`
	// Observation Method
	// Identifies how the observation was made.
	Methods []ObservationMethod `protobuf:"varint,6,rep,packed,name=Methods,proto3,enum=proto.ObservationMethod" json:"Methods,omitempty"`
	// Observation Type
	// Identifies the nature of the observation. More than one may be used to further qualify and enable filtering.
	Types []ObservationType `protobuf:"varint,7,rep,packed,name=Types,proto3,enum=proto.ObservationType" json:"Types,omitempty"`
	// Origins
	// The sources of the observation, such as tools or activities.
	Origins []*Origin `protobuf:"bytes,8,rep,name=Origins,proto3" json:"Origins,omitempty"`
	// Subjects
	// References to subjects related to this observation.
	Subjects []*SubjectReference `protobuf:"bytes,9,rep,name=Subjects,proto3" json:"Subjects,omitempty"`
	// Relevant Evidence
	// Links this observation to relevant evidence.
	RelevantEvidence []*RelevantEvidence `protobuf:"bytes,10,rep,name=RelevantEvidence,proto3" json:"RelevantEvidence,omitempty"`
	// Collected Field
	// Date/time stamp identifying when the observation information was collected.
	Collected *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=Collected,proto3" json:"Collected,omitempty"`
	// Expires Field
	// Date/time identifying when the observation information is out-of-date and no longer valid.
	Expires *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=Expires,proto3,oneof" json:"Expires,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,13,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Observation) Reset() {
	*x = Observation{}
	mi := &file_runner_proto_oscal_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Observation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Observation) ProtoMessage() {}

func (x *Observation) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Observation.ProtoReflect.Descriptor instead.
func (*Observation) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{18}
}

func (x *Observation) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Observation) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Observation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Observation) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *Observation) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Observation) GetMethods() []ObservationMethod {
	if x != nil {
		return x.Methods
	}
	return nil
}

func (x *Observation) GetTypes() []ObservationType {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *Observation) GetOrigins() []*Origin {
	if x != nil {
		return x.Origins
	}
	return nil
}

func (x *Observation) GetSubjects() []*SubjectReference {
	if x != nil {
		return x.Subjects
	}
	return nil
}

func (x *Observation) GetRelevantEvidence() []*RelevantEvidence {
	if x != nil {
		return x.RelevantEvidence
	}
	return nil
}

func (x *Observation) GetCollected() *timestamppb.Timestamp {
	if x != nil {
		return x.Collected
	}
	return nil
}

func (x *Observation) GetExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.Expires
	}
	return nil
}

func (x *Observation) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// TODO this is a partial implementation to support bidirectional implementation.
// This should be fledged more completely as soon as possible.
// Assessment Result
// Used by the assessment results and POA&M. Identifies observations, findings, risks, deviations, and dispositions.
type AssessmentResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Results Universally Unique Identifier
	// A globally unique identifier for this set of results, used for cross-instance referencing.
	Uuid string `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	// Results Title
	// The title for this set of results.
	Title string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	// Results Description
	// A human-readable description of this set of test results.
	Description string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	// Start Field
	// Date/time stamp identifying the start of the evidence collection.
	Start *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=Start,proto3" json:"Start,omitempty"`
	// End Field
	// Date/time stamp identifying the end of the evidence collection.
	End *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=End,proto3" json:"End,omitempty"`
	// Properties
	// Additional attributes related to the assessment result.
	Props []*Property `protobuf:"bytes,6,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	// References to related resources.
	Links []*Link `protobuf:"bytes,7,rep,name=Links,proto3" json:"Links,omitempty"`
	// Observations
	// The observations made during the assessment.
	Observations []*Observation `protobuf:"bytes,12,rep,name=Observations,proto3" json:"Observations,omitempty"`
	// Findings
	// The findings identified during the assessment.
	Findings []*Finding `protobuf:"bytes,14,rep,name=Findings,proto3" json:"Findings,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,15,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssessmentResult) Reset() {
	*x = AssessmentResult{}
	mi := &file_runner_proto_oscal_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssessmentResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssessmentResult) ProtoMessage() {}

func (x *AssessmentResult) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssessmentResult.ProtoReflect.Descriptor instead.
func (*AssessmentResult) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{19}
}

func (x *AssessmentResult) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *AssessmentResult) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AssessmentResult) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AssessmentResult) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *AssessmentResult) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *AssessmentResult) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *AssessmentResult) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *AssessmentResult) GetObservations() []*Observation {
	if x != nil {
		return x.Observations
	}
	return nil
}

func (x *AssessmentResult) GetFindings() []*Finding {
	if x != nil {
		return x.Findings
	}
	return nil
}

func (x *AssessmentResult) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

var File_runner_proto_oscal_proto protoreflect.FileDescriptor

var file_runner_proto_oscal_proto_rawDesc = string([]byte{
	0x0a, 0x18, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f,
	0x73, 0x63, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xe7, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x4e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x02, 0x4e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x55, 0x75, 0x69, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x4e, 0x73, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0xeb, 0x01, 0x0a,
	0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x72, 0x65, 0x66, 0x12, 0x2e, 0x0a, 0x03, 0x52, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x48,
	0x00, 0x52, 0x03, 0x52, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x10, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x54,
	0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x52, 0x65, 0x6c, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x54, 0x65, 0x78, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x0b, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x05, 0x50,
	0x72, 0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x50, 0x72, 0x6f,
	0x70, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64,
	0x22, 0xd2, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x25, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x52, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x0c, 0x0a, 0x0a, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x41, 0x6c, 0x6c, 0x22, 0xb6, 0x03, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x25, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12,
	0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6c, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x48, 0x01, 0x52, 0x0a, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0f, 0x49, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x0f, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x42,
	0x0a, 0x0f, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x0f, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01,
	0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6c, 0x6c,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x81, 0x01, 0x0a,
	0x11, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x22, 0xbf, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x50, 0x61, 0x72, 0x74, 0x79, 0x55, 0x75, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x74, 0x79, 0x55, 0x75, 0x69, 0x64, 0x73, 0x12, 0x25, 0x0a,
	0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x50,
	0x72, 0x6f, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x22, 0x80, 0x03, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25,
	0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05,
	0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x47, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x12, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x34, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x11, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x11,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x6c, 0x0a, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12,
	0x2a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x06, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x22, 0x79, 0x0a, 0x14, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0xa9,
	0x01, 0x0a, 0x0f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x33, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x9b, 0x04, 0x0a, 0x0d, 0x46,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52,
	0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x54, 0x0a, 0x14, 0x49, 0x6d, 0x70,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x48, 0x02, 0x52, 0x14, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x22, 0x49,
	0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13,
	0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x3e, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x0f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x22, 0x29, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x55,
	0x75, 0x69, 0x64, 0x22, 0xcb, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74,
	0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x48, 0x72, 0x65, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x48, 0x72, 0x65, 0x66, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1d, 0x0a,
	0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x48, 0x72, 0x65, 0x66, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x22, 0xf6, 0x01, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x05, 0x50,
	0x72, 0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x50, 0x72, 0x6f,
	0x70, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x8d, 0x04, 0x0a, 0x07, 0x46,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x27, 0x0a, 0x07,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x07, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x45, 0x0a, 0x1b, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x1b, 0x49, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x13, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x13, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x69, 0x73,
	0x6b, 0x52, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x12,
	0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x42, 0x1e,
	0x0a, 0x1c, 0x5f, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0xe3, 0x04, 0x0a, 0x0b, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x05, 0x50,
	0x72, 0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x50, 0x72, 0x6f,
	0x70, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x52, 0x07, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x05, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x07, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73,
	0x12, 0x33, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e,
	0x74, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74,
	0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61,
	0x6e, 0x74, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x01, 0x52, 0x07, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x22, 0x97, 0x03, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x45, 0x6e,
	0x64, 0x12, 0x25, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x2a, 0x52, 0x0a, 0x10, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1d,
	0x0a, 0x19, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x48, 0x49, 0x50, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1f, 0x0a,
	0x1b, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x48,
	0x49, 0x50, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x2a, 0x72,
	0x0a, 0x09, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x41,
	0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x43, 0x54, 0x4f,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59,
	0x10, 0x03, 0x2a, 0xc9, 0x01, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16,
	0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x55, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x55, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11,
	0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x06, 0x2a, 0xa0,
	0x02, 0x0a, 0x19, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x23,
	0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x49,
	0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x4e,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x2b, 0x0a, 0x27, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x04, 0x12, 0x2e, 0x0a, 0x2a, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x05, 0x2a, 0x6f, 0x0a, 0x0e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x41, 0x54, 0x49, 0x53, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x21, 0x0a, 0x1d, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x41, 0x54, 0x49, 0x53, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x02, 0x2a, 0x81, 0x01, 0x0a, 0x0f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x10, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x2a, 0x92, 0x01, 0x0a, 0x11, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1e, 0x0a, 0x1a,
	0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a,
	0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x45, 0x58, 0x41, 0x4d, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c,
	0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x49, 0x45, 0x57, 0x10, 0x02, 0x12, 0x1b,
	0x0a, 0x17, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45,
	0x54, 0x48, 0x4f, 0x44, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x03, 0x2a, 0xdf, 0x01, 0x0a, 0x0f,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x18, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a,
	0x24, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x53, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x49, 0x53, 0x53, 0x55, 0x45, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x4f, 0x42, 0x53, 0x45, 0x52,
	0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x4f, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12,
	0x1f, 0x0a, 0x1b, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03,
	0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x1d,
	0x0a, 0x19, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x43, 0x10, 0x05, 0x42, 0x09, 0x5a,
	0x07, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_runner_proto_oscal_proto_rawDescOnce sync.Once
	file_runner_proto_oscal_proto_rawDescData []byte
)

func file_runner_proto_oscal_proto_rawDescGZIP() []byte {
	file_runner_proto_oscal_proto_rawDescOnce.Do(func() {
		file_runner_proto_oscal_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_runner_proto_oscal_proto_rawDesc), len(file_runner_proto_oscal_proto_rawDesc)))
	})
	return file_runner_proto_oscal_proto_rawDescData
}

var file_runner_proto_oscal_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_runner_proto_oscal_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_runner_proto_oscal_proto_goTypes = []any{
	(LinkRelationship)(0),          // 0: proto.LinkRelationship
	(ActorType)(0),                 // 1: proto.ActorType
	(SubjectType)(0),               // 2: proto.SubjectType
	(ImplementationStatusState)(0), // 3: proto.ImplementationStatusState
	(ObjectiveState)(0),            // 4: proto.ObjectiveState
	(ObjectiveReason)(0),           // 5: proto.ObjectiveReason
	(ObservationMethod)(0),         // 6: proto.ObservationMethod
	(ObservationType)(0),           // 7: proto.ObservationType
	(FindingTarget_TargetType)(0),  // 8: proto.FindingTarget.TargetType
	(*Property)(nil),               // 9: proto.Property
	(*Link)(nil),                   // 10: proto.Link
	(*OriginActor)(nil),            // 11: proto.OriginActor
	(*SelectSubjectById)(nil),      // 12: proto.SelectSubjectById
	(*IncludeAll)(nil),             // 13: proto.IncludeAll
	(*AssessmentSubject)(nil),      // 14: proto.AssessmentSubject
	(*IdentifiedSubject)(nil),      // 15: proto.IdentifiedSubject
	(*ResponsibleParty)(nil),       // 16: proto.ResponsibleParty
	(*RelatedTask)(nil),            // 17: proto.RelatedTask
	(*Origin)(nil),                 // 18: proto.Origin
	(*ImplementationStatus)(nil),   // 19: proto.ImplementationStatus
	(*ObjectiveStatus)(nil),        // 20: proto.ObjectiveStatus
	(*FindingTarget)(nil),          // 21: proto.FindingTarget
	(*RelatedObservation)(nil),     // 22: proto.RelatedObservation
	(*RelatedRisk)(nil),            // 23: proto.RelatedRisk
	(*RelevantEvidence)(nil),       // 24: proto.RelevantEvidence
	(*SubjectReference)(nil),       // 25: proto.SubjectReference
	(*Finding)(nil),                // 26: proto.Finding
	(*Observation)(nil),            // 27: proto.Observation
	(*AssessmentResult)(nil),       // 28: proto.AssessmentResult
	(*timestamppb.Timestamp)(nil),  // 29: google.protobuf.Timestamp
}
var file_runner_proto_oscal_proto_depIdxs = []int32{
	0,  // 0: proto.Link.Rel:type_name -> proto.LinkRelationship
	1,  // 1: proto.OriginActor.Type:type_name -> proto.ActorType
	9,  // 2: proto.OriginActor.Props:type_name -> proto.Property
	10, // 3: proto.OriginActor.Links:type_name -> proto.Link
	2,  // 4: proto.SelectSubjectById.Type:type_name -> proto.SubjectType
	9,  // 5: proto.SelectSubjectById.Props:type_name -> proto.Property
	10, // 6: proto.SelectSubjectById.Links:type_name -> proto.Link
	2,  // 7: proto.AssessmentSubject.Type:type_name -> proto.SubjectType
	9,  // 8: proto.AssessmentSubject.Props:type_name -> proto.Property
	10, // 9: proto.AssessmentSubject.Links:type_name -> proto.Link
	13, // 10: proto.AssessmentSubject.IncludeAll:type_name -> proto.IncludeAll
	12, // 11: proto.AssessmentSubject.IncludeSubjects:type_name -> proto.SelectSubjectById
	12, // 12: proto.AssessmentSubject.ExcludeSubjects:type_name -> proto.SelectSubjectById
	14, // 13: proto.IdentifiedSubject.Subjects:type_name -> proto.AssessmentSubject
	9,  // 14: proto.ResponsibleParty.Props:type_name -> proto.Property
	10, // 15: proto.ResponsibleParty.Links:type_name -> proto.Link
	9,  // 16: proto.RelatedTask.Props:type_name -> proto.Property
	10, // 17: proto.RelatedTask.Links:type_name -> proto.Link
	16, // 18: proto.RelatedTask.ResponsibleParties:type_name -> proto.ResponsibleParty
	14, // 19: proto.RelatedTask.Subjects:type_name -> proto.AssessmentSubject
	15, // 20: proto.RelatedTask.IdentifiedSubject:type_name -> proto.IdentifiedSubject
	11, // 21: proto.Origin.Actors:type_name -> proto.OriginActor
	17, // 22: proto.Origin.RelatedTasks:type_name -> proto.RelatedTask
	3,  // 23: proto.ImplementationStatus.State:type_name -> proto.ImplementationStatusState
	4,  // 24: proto.ObjectiveStatus.State:type_name -> proto.ObjectiveState
	5,  // 25: proto.ObjectiveStatus.Reason:type_name -> proto.ObjectiveReason
	8,  // 26: proto.FindingTarget.Type:type_name -> proto.FindingTarget.TargetType
	9,  // 27: proto.FindingTarget.Props:type_name -> proto.Property
	10, // 28: proto.FindingTarget.Links:type_name -> proto.Link
	20, // 29: proto.FindingTarget.Status:type_name -> proto.ObjectiveStatus
	19, // 30: proto.FindingTarget.ImplementationStatus:type_name -> proto.ImplementationStatus
	9,  // 31: proto.RelevantEvidence.Props:type_name -> proto.Property
	10, // 32: proto.RelevantEvidence.Links:type_name -> proto.Link
	2,  // 33: proto.SubjectReference.Type:type_name -> proto.SubjectType
	9,  // 34: proto.SubjectReference.Props:type_name -> proto.Property
	10, // 35: proto.SubjectReference.Links:type_name -> proto.Link
	9,  // 36: proto.Finding.Props:type_name -> proto.Property
	10, // 37: proto.Finding.Links:type_name -> proto.Link
	18, // 38: proto.Finding.Origins:type_name -> proto.Origin
	21, // 39: proto.Finding.Target:type_name -> proto.FindingTarget
	22, // 40: proto.Finding.RelatedObservations:type_name -> proto.RelatedObservation
	23, // 41: proto.Finding.RelatedRisks:type_name -> proto.RelatedRisk
	9,  // 42: proto.Observation.Props:type_name -> proto.Property
	10, // 43: proto.Observation.Links:type_name -> proto.Link
	6,  // 44: proto.Observation.Methods:type_name -> proto.ObservationMethod
	7,  // 45: proto.Observation.Types:type_name -> proto.ObservationType
	18, // 46: proto.Observation.Origins:type_name -> proto.Origin
	25, // 47: proto.Observation.Subjects:type_name -> proto.SubjectReference
	24, // 48: proto.Observation.RelevantEvidence:type_name -> proto.RelevantEvidence
	29, // 49: proto.Observation.Collected:type_name -> google.protobuf.Timestamp
	29, // 50: proto.Observation.Expires:type_name -> google.protobuf.Timestamp
	29, // 51: proto.AssessmentResult.Start:type_name -> google.protobuf.Timestamp
	29, // 52: proto.AssessmentResult.End:type_name -> google.protobuf.Timestamp
	9,  // 53: proto.AssessmentResult.Props:type_name -> proto.Property
	10, // 54: proto.AssessmentResult.Links:type_name -> proto.Link
	27, // 55: proto.AssessmentResult.Observations:type_name -> proto.Observation
	26, // 56: proto.AssessmentResult.Findings:type_name -> proto.Finding
	57, // [57:57] is the sub-list for method output_type
	57, // [57:57] is the sub-list for method input_type
	57, // [57:57] is the sub-list for extension type_name
	57, // [57:57] is the sub-list for extension extendee
	0,  // [0:57] is the sub-list for field type_name
}

func init() { file_runner_proto_oscal_proto_init() }
func file_runner_proto_oscal_proto_init() {
	if File_runner_proto_oscal_proto != nil {
		return
	}
	file_runner_proto_oscal_proto_msgTypes[0].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[1].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[2].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[3].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[5].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[7].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[8].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[10].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[11].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[12].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[15].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[16].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[17].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[18].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[19].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_runner_proto_oscal_proto_rawDesc), len(file_runner_proto_oscal_proto_rawDesc)),
			NumEnums:      9,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_runner_proto_oscal_proto_goTypes,
		DependencyIndexes: file_runner_proto_oscal_proto_depIdxs,
		EnumInfos:         file_runner_proto_oscal_proto_enumTypes,
		MessageInfos:      file_runner_proto_oscal_proto_msgTypes,
	}.Build()
	File_runner_proto_oscal_proto = out.File
	file_runner_proto_oscal_proto_goTypes = nil
	file_runner_proto_oscal_proto_depIdxs = nil
}
