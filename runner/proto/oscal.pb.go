// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: runner/proto/oscal.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LinkRelationship int32

const (
	LinkRelationship_LINK_RELATIONSHIP_UNKNOWN   LinkRelationship = 0
	LinkRelationship_LINK_RELATIONSHIP_REFERENCE LinkRelationship = 1
)

// Enum value maps for LinkRelationship.
var (
	LinkRelationship_name = map[int32]string{
		0: "LINK_RELATIONSHIP_UNKNOWN",
		1: "LINK_RELATIONSHIP_REFERENCE",
	}
	LinkRelationship_value = map[string]int32{
		"LINK_RELATIONSHIP_UNKNOWN":   0,
		"LINK_RELATIONSHIP_REFERENCE": 1,
	}
)

func (x LinkRelationship) Enum() *LinkRelationship {
	p := new(LinkRelationship)
	*p = x
	return p
}

func (x LinkRelationship) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkRelationship) Descriptor() protoreflect.EnumDescriptor {
	return file_runner_proto_oscal_proto_enumTypes[0].Descriptor()
}

func (LinkRelationship) Type() protoreflect.EnumType {
	return &file_runner_proto_oscal_proto_enumTypes[0]
}

func (x LinkRelationship) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkRelationship.Descriptor instead.
func (LinkRelationship) EnumDescriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{0}
}

type ActorType int32

const (
	ActorType_ACTOR_TYPE_UNKNOWN             ActorType = 0
	ActorType_ACTOR_TYPE_TOOL                ActorType = 1
	ActorType_ACTOR_TYPE_ASSESSMENT_PLATFORM ActorType = 2
	ActorType_ACTOR_TYPE_PARTY               ActorType = 3
)

// Enum value maps for ActorType.
var (
	ActorType_name = map[int32]string{
		0: "ACTOR_TYPE_UNKNOWN",
		1: "ACTOR_TYPE_TOOL",
		2: "ACTOR_TYPE_ASSESSMENT_PLATFORM",
		3: "ACTOR_TYPE_PARTY",
	}
	ActorType_value = map[string]int32{
		"ACTOR_TYPE_UNKNOWN":             0,
		"ACTOR_TYPE_TOOL":                1,
		"ACTOR_TYPE_ASSESSMENT_PLATFORM": 2,
		"ACTOR_TYPE_PARTY":               3,
	}
)

func (x ActorType) Enum() *ActorType {
	p := new(ActorType)
	*p = x
	return p
}

func (x ActorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActorType) Descriptor() protoreflect.EnumDescriptor {
	return file_runner_proto_oscal_proto_enumTypes[1].Descriptor()
}

func (ActorType) Type() protoreflect.EnumType {
	return &file_runner_proto_oscal_proto_enumTypes[1]
}

func (x ActorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActorType.Descriptor instead.
func (ActorType) EnumDescriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{1}
}

type SubjectType int32

const (
	SubjectType_SUBJECT_TYPE_UNKNOWN        SubjectType = 0
	SubjectType_SUBJECT_TYPE_COMPONENT      SubjectType = 1
	SubjectType_SUBJECT_TYPE_INVENTORY_ITEM SubjectType = 2
	SubjectType_SUBJECT_TYPE_LOCATION       SubjectType = 3
	SubjectType_SUBJECT_TYPE_PARTY          SubjectType = 4
	SubjectType_SUBJECT_TYPE_USER           SubjectType = 5
	SubjectType_SUBJECT_TYPE_RESOURCE       SubjectType = 6
)

// Enum value maps for SubjectType.
var (
	SubjectType_name = map[int32]string{
		0: "SUBJECT_TYPE_UNKNOWN",
		1: "SUBJECT_TYPE_COMPONENT",
		2: "SUBJECT_TYPE_INVENTORY_ITEM",
		3: "SUBJECT_TYPE_LOCATION",
		4: "SUBJECT_TYPE_PARTY",
		5: "SUBJECT_TYPE_USER",
		6: "SUBJECT_TYPE_RESOURCE",
	}
	SubjectType_value = map[string]int32{
		"SUBJECT_TYPE_UNKNOWN":        0,
		"SUBJECT_TYPE_COMPONENT":      1,
		"SUBJECT_TYPE_INVENTORY_ITEM": 2,
		"SUBJECT_TYPE_LOCATION":       3,
		"SUBJECT_TYPE_PARTY":          4,
		"SUBJECT_TYPE_USER":           5,
		"SUBJECT_TYPE_RESOURCE":       6,
	}
)

func (x SubjectType) Enum() *SubjectType {
	p := new(SubjectType)
	*p = x
	return p
}

func (x SubjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_runner_proto_oscal_proto_enumTypes[2].Descriptor()
}

func (SubjectType) Type() protoreflect.EnumType {
	return &file_runner_proto_oscal_proto_enumTypes[2]
}

func (x SubjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubjectType.Descriptor instead.
func (SubjectType) EnumDescriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{2}
}

type ImplementationStatusState int32

const (
	ImplementationStatusState_IMPLEMENTATION_STATUS_STATE_UNKNOWN        ImplementationStatusState = 0
	ImplementationStatusState_IMPLEMENTATION_STATUS_STATE_IMPLEMENTED    ImplementationStatusState = 1
	ImplementationStatusState_IMPLEMENTATION_STATUS_STATE_PARTIAL        ImplementationStatusState = 2
	ImplementationStatusState_IMPLEMENTATION_STATUS_STATE_PLANNED        ImplementationStatusState = 3
	ImplementationStatusState_IMPLEMENTATION_STATUS_STATE_ALTERNATIVE    ImplementationStatusState = 4
	ImplementationStatusState_IMPLEMENTATION_STATUS_STATE_NOT_APPLICABLE ImplementationStatusState = 5
)

// Enum value maps for ImplementationStatusState.
var (
	ImplementationStatusState_name = map[int32]string{
		0: "IMPLEMENTATION_STATUS_STATE_UNKNOWN",
		1: "IMPLEMENTATION_STATUS_STATE_IMPLEMENTED",
		2: "IMPLEMENTATION_STATUS_STATE_PARTIAL",
		3: "IMPLEMENTATION_STATUS_STATE_PLANNED",
		4: "IMPLEMENTATION_STATUS_STATE_ALTERNATIVE",
		5: "IMPLEMENTATION_STATUS_STATE_NOT_APPLICABLE",
	}
	ImplementationStatusState_value = map[string]int32{
		"IMPLEMENTATION_STATUS_STATE_UNKNOWN":        0,
		"IMPLEMENTATION_STATUS_STATE_IMPLEMENTED":    1,
		"IMPLEMENTATION_STATUS_STATE_PARTIAL":        2,
		"IMPLEMENTATION_STATUS_STATE_PLANNED":        3,
		"IMPLEMENTATION_STATUS_STATE_ALTERNATIVE":    4,
		"IMPLEMENTATION_STATUS_STATE_NOT_APPLICABLE": 5,
	}
)

func (x ImplementationStatusState) Enum() *ImplementationStatusState {
	p := new(ImplementationStatusState)
	*p = x
	return p
}

func (x ImplementationStatusState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImplementationStatusState) Descriptor() protoreflect.EnumDescriptor {
	return file_runner_proto_oscal_proto_enumTypes[3].Descriptor()
}

func (ImplementationStatusState) Type() protoreflect.EnumType {
	return &file_runner_proto_oscal_proto_enumTypes[3]
}

func (x ImplementationStatusState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImplementationStatusState.Descriptor instead.
func (ImplementationStatusState) EnumDescriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{3}
}

// Observation Method
// Identifies how the observation was made.
type ObservationMethod int32

const (
	ObservationMethod_OBSERVATION_METHOD_UNKNOWN   ObservationMethod = 0
	ObservationMethod_OBSERVATION_METHOD_EXAMINE   ObservationMethod = 1
	ObservationMethod_OBSERVATION_METHOD_INTERVIEW ObservationMethod = 2
	ObservationMethod_OBSERVATION_METHOD_TEST      ObservationMethod = 3
)

// Enum value maps for ObservationMethod.
var (
	ObservationMethod_name = map[int32]string{
		0: "OBSERVATION_METHOD_UNKNOWN",
		1: "OBSERVATION_METHOD_EXAMINE",
		2: "OBSERVATION_METHOD_INTERVIEW",
		3: "OBSERVATION_METHOD_TEST",
	}
	ObservationMethod_value = map[string]int32{
		"OBSERVATION_METHOD_UNKNOWN":   0,
		"OBSERVATION_METHOD_EXAMINE":   1,
		"OBSERVATION_METHOD_INTERVIEW": 2,
		"OBSERVATION_METHOD_TEST":      3,
	}
)

func (x ObservationMethod) Enum() *ObservationMethod {
	p := new(ObservationMethod)
	*p = x
	return p
}

func (x ObservationMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObservationMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_runner_proto_oscal_proto_enumTypes[4].Descriptor()
}

func (ObservationMethod) Type() protoreflect.EnumType {
	return &file_runner_proto_oscal_proto_enumTypes[4]
}

func (x ObservationMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObservationMethod.Descriptor instead.
func (ObservationMethod) EnumDescriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{4}
}

// Observation Type
// Identifies the nature of the observation. More than one may be used to
// further qualify and enable filtering.
type ObservationType int32

const (
	ObservationType_OBSERVATION_TYPE_UNKNOWN             ObservationType = 0
	ObservationType_OBSERVATION_TYPE_SSP_STATEMENT_ISSUE ObservationType = 1
	ObservationType_OBSERVATION_TYPE_CONTROL_OBJECTIVE   ObservationType = 2
	ObservationType_OBSERVATION_TYPE_MITIGATION          ObservationType = 3
	ObservationType_OBSERVATION_TYPE_FINDING             ObservationType = 4
	ObservationType_OBSERVATION_TYPE_HISTORIC            ObservationType = 5
)

// Enum value maps for ObservationType.
var (
	ObservationType_name = map[int32]string{
		0: "OBSERVATION_TYPE_UNKNOWN",
		1: "OBSERVATION_TYPE_SSP_STATEMENT_ISSUE",
		2: "OBSERVATION_TYPE_CONTROL_OBJECTIVE",
		3: "OBSERVATION_TYPE_MITIGATION",
		4: "OBSERVATION_TYPE_FINDING",
		5: "OBSERVATION_TYPE_HISTORIC",
	}
	ObservationType_value = map[string]int32{
		"OBSERVATION_TYPE_UNKNOWN":             0,
		"OBSERVATION_TYPE_SSP_STATEMENT_ISSUE": 1,
		"OBSERVATION_TYPE_CONTROL_OBJECTIVE":   2,
		"OBSERVATION_TYPE_MITIGATION":          3,
		"OBSERVATION_TYPE_FINDING":             4,
		"OBSERVATION_TYPE_HISTORIC":            5,
	}
)

func (x ObservationType) Enum() *ObservationType {
	p := new(ObservationType)
	*p = x
	return p
}

func (x ObservationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObservationType) Descriptor() protoreflect.EnumDescriptor {
	return file_runner_proto_oscal_proto_enumTypes[5].Descriptor()
}

func (ObservationType) Type() protoreflect.EnumType {
	return &file_runner_proto_oscal_proto_enumTypes[5]
}

func (x ObservationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObservationType.Descriptor instead.
func (ObservationType) EnumDescriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{5}
}

// Risk Status
// Describes the status of the associated risk.
type RiskStatus int32

const (
	RiskStatus_RISK_STATUS_UNKNOWN             RiskStatus = 0
	RiskStatus_RISK_STATUS_OPEN                RiskStatus = 1
	RiskStatus_RISK_STATUS_INVESTIGATING       RiskStatus = 2
	RiskStatus_RISK_STATUS_REMEDIATING         RiskStatus = 3
	RiskStatus_RISK_STATUS_DEVIATION_REQUESTED RiskStatus = 4
	RiskStatus_RISK_STATUS_DEVIATION_APPROVED  RiskStatus = 5
	RiskStatus_RISK_STATUS_CLOSED              RiskStatus = 6
)

// Enum value maps for RiskStatus.
var (
	RiskStatus_name = map[int32]string{
		0: "RISK_STATUS_UNKNOWN",
		1: "RISK_STATUS_OPEN",
		2: "RISK_STATUS_INVESTIGATING",
		3: "RISK_STATUS_REMEDIATING",
		4: "RISK_STATUS_DEVIATION_REQUESTED",
		5: "RISK_STATUS_DEVIATION_APPROVED",
		6: "RISK_STATUS_CLOSED",
	}
	RiskStatus_value = map[string]int32{
		"RISK_STATUS_UNKNOWN":             0,
		"RISK_STATUS_OPEN":                1,
		"RISK_STATUS_INVESTIGATING":       2,
		"RISK_STATUS_REMEDIATING":         3,
		"RISK_STATUS_DEVIATION_REQUESTED": 4,
		"RISK_STATUS_DEVIATION_APPROVED":  5,
		"RISK_STATUS_CLOSED":              6,
	}
)

func (x RiskStatus) Enum() *RiskStatus {
	p := new(RiskStatus)
	*p = x
	return p
}

func (x RiskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RiskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_runner_proto_oscal_proto_enumTypes[6].Descriptor()
}

func (RiskStatus) Type() protoreflect.EnumType {
	return &file_runner_proto_oscal_proto_enumTypes[6]
}

func (x RiskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RiskStatus.Descriptor instead.
func (RiskStatus) EnumDescriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{6}
}

// Task Type
// The type of task.
type TaskType int32

const (
	TaskType_TASK_TYPE_UNKNOWN   TaskType = 0
	TaskType_TASK_TYPE_MILESTONE TaskType = 1
	TaskType_TASK_TYPE_ACTION    TaskType = 2
)

// Enum value maps for TaskType.
var (
	TaskType_name = map[int32]string{
		0: "TASK_TYPE_UNKNOWN",
		1: "TASK_TYPE_MILESTONE",
		2: "TASK_TYPE_ACTION",
	}
	TaskType_value = map[string]int32{
		"TASK_TYPE_UNKNOWN":   0,
		"TASK_TYPE_MILESTONE": 1,
		"TASK_TYPE_ACTION":    2,
	}
)

func (x TaskType) Enum() *TaskType {
	p := new(TaskType)
	*p = x
	return p
}

func (x TaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_runner_proto_oscal_proto_enumTypes[7].Descriptor()
}

func (TaskType) Type() protoreflect.EnumType {
	return &file_runner_proto_oscal_proto_enumTypes[7]
}

func (x TaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskType.Descriptor instead.
func (TaskType) EnumDescriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{7}
}

// Remediation Intent
// Identifies whether this is a recommendation, a planned action, or a completed
// action.
type Lifecycle int32

const (
	Lifecycle_LIFECYCLE_UNKNOWN        Lifecycle = 0
	Lifecycle_LIFECYCLE_RECOMMENDATION Lifecycle = 1
	Lifecycle_LIFECYCLE_PLANNED        Lifecycle = 2
	Lifecycle_LIFECYCLE_COMPLETED      Lifecycle = 3
)

// Enum value maps for Lifecycle.
var (
	Lifecycle_name = map[int32]string{
		0: "LIFECYCLE_UNKNOWN",
		1: "LIFECYCLE_RECOMMENDATION",
		2: "LIFECYCLE_PLANNED",
		3: "LIFECYCLE_COMPLETED",
	}
	Lifecycle_value = map[string]int32{
		"LIFECYCLE_UNKNOWN":        0,
		"LIFECYCLE_RECOMMENDATION": 1,
		"LIFECYCLE_PLANNED":        2,
		"LIFECYCLE_COMPLETED":      3,
	}
)

func (x Lifecycle) Enum() *Lifecycle {
	p := new(Lifecycle)
	*p = x
	return p
}

func (x Lifecycle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Lifecycle) Descriptor() protoreflect.EnumDescriptor {
	return file_runner_proto_oscal_proto_enumTypes[8].Descriptor()
}

func (Lifecycle) Type() protoreflect.EnumType {
	return &file_runner_proto_oscal_proto_enumTypes[8]
}

func (x Lifecycle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Lifecycle.Descriptor instead.
func (Lifecycle) EnumDescriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{8}
}

type State int32

const (
	State_STATE_UNKNOWN           State = 0
	State_STATE_UNDER_DEVELOPMENT State = 1
	State_STATE_OPERATIONAL       State = 2
	State_STATE_DISPOSITION       State = 3
	State_STATE_OTHER             State = 4
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0: "STATE_UNKNOWN",
		1: "STATE_UNDER_DEVELOPMENT",
		2: "STATE_OPERATIONAL",
		3: "STATE_DISPOSITION",
		4: "STATE_OTHER",
	}
	State_value = map[string]int32{
		"STATE_UNKNOWN":           0,
		"STATE_UNDER_DEVELOPMENT": 1,
		"STATE_OPERATIONAL":       2,
		"STATE_DISPOSITION":       3,
		"STATE_OTHER":             4,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_runner_proto_oscal_proto_enumTypes[9].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_runner_proto_oscal_proto_enumTypes[9]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{9}
}

type Transport int32

const (
	Transport_TRANSPORT_UNKNOWN Transport = 0
	Transport_TRANSPORT_TCP     Transport = 1
	Transport_TRANSPORT_UDP     Transport = 2
)

// Enum value maps for Transport.
var (
	Transport_name = map[int32]string{
		0: "TRANSPORT_UNKNOWN",
		1: "TRANSPORT_TCP",
		2: "TRANSPORT_UDP",
	}
	Transport_value = map[string]int32{
		"TRANSPORT_UNKNOWN": 0,
		"TRANSPORT_TCP":     1,
		"TRANSPORT_UDP":     2,
	}
)

func (x Transport) Enum() *Transport {
	p := new(Transport)
	*p = x
	return p
}

func (x Transport) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Transport) Descriptor() protoreflect.EnumDescriptor {
	return file_runner_proto_oscal_proto_enumTypes[10].Descriptor()
}

func (Transport) Type() protoreflect.EnumType {
	return &file_runner_proto_oscal_proto_enumTypes[10]
}

func (x Transport) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Transport.Descriptor instead.
func (Transport) EnumDescriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{10}
}

// Finding Target Type
// Identifies the type of the target.
type FindingTarget_TargetType int32

const (
	FindingTarget_TARGET_TYPE_UNKNOWN FindingTarget_TargetType = 0
	FindingTarget_STATEMENT_ID        FindingTarget_TargetType = 1
	FindingTarget_OBJECTIVE_ID        FindingTarget_TargetType = 2
)

// Enum value maps for FindingTarget_TargetType.
var (
	FindingTarget_TargetType_name = map[int32]string{
		0: "TARGET_TYPE_UNKNOWN",
		1: "STATEMENT_ID",
		2: "OBJECTIVE_ID",
	}
	FindingTarget_TargetType_value = map[string]int32{
		"TARGET_TYPE_UNKNOWN": 0,
		"STATEMENT_ID":        1,
		"OBJECTIVE_ID":        2,
	}
)

func (x FindingTarget_TargetType) Enum() *FindingTarget_TargetType {
	p := new(FindingTarget_TargetType)
	*p = x
	return p
}

func (x FindingTarget_TargetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FindingTarget_TargetType) Descriptor() protoreflect.EnumDescriptor {
	return file_runner_proto_oscal_proto_enumTypes[11].Descriptor()
}

func (FindingTarget_TargetType) Type() protoreflect.EnumType {
	return &file_runner_proto_oscal_proto_enumTypes[11]
}

func (x FindingTarget_TargetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FindingTarget_TargetType.Descriptor instead.
func (FindingTarget_TargetType) EnumDescriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{12, 0}
}

type EventTiming_Frequency_TimeUnit int32

const (
	EventTiming_Frequency_UNIT_UNKNOWN EventTiming_Frequency_TimeUnit = 0
	EventTiming_Frequency_SECONDS      EventTiming_Frequency_TimeUnit = 1
	EventTiming_Frequency_MINUTES      EventTiming_Frequency_TimeUnit = 2
	EventTiming_Frequency_HOURS        EventTiming_Frequency_TimeUnit = 3
	EventTiming_Frequency_DAYS         EventTiming_Frequency_TimeUnit = 4
	EventTiming_Frequency_MONTHS       EventTiming_Frequency_TimeUnit = 5
	EventTiming_Frequency_YEARS        EventTiming_Frequency_TimeUnit = 6
)

// Enum value maps for EventTiming_Frequency_TimeUnit.
var (
	EventTiming_Frequency_TimeUnit_name = map[int32]string{
		0: "UNIT_UNKNOWN",
		1: "SECONDS",
		2: "MINUTES",
		3: "HOURS",
		4: "DAYS",
		5: "MONTHS",
		6: "YEARS",
	}
	EventTiming_Frequency_TimeUnit_value = map[string]int32{
		"UNIT_UNKNOWN": 0,
		"SECONDS":      1,
		"MINUTES":      2,
		"HOURS":        3,
		"DAYS":         4,
		"MONTHS":       5,
		"YEARS":        6,
	}
)

func (x EventTiming_Frequency_TimeUnit) Enum() *EventTiming_Frequency_TimeUnit {
	p := new(EventTiming_Frequency_TimeUnit)
	*p = x
	return p
}

func (x EventTiming_Frequency_TimeUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventTiming_Frequency_TimeUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_runner_proto_oscal_proto_enumTypes[12].Descriptor()
}

func (EventTiming_Frequency_TimeUnit) Type() protoreflect.EnumType {
	return &file_runner_proto_oscal_proto_enumTypes[12]
}

func (x EventTiming_Frequency_TimeUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventTiming_Frequency_TimeUnit.Descriptor instead.
func (EventTiming_Frequency_TimeUnit) EnumDescriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{24, 1, 0}
}

// Part Name
// A textual label that uniquely identifies the part's semantic type.
type AssessmentPart_PartName int32

const (
	AssessmentPart_PART_NAME_UNKNOWN AssessmentPart_PartName = 0
	AssessmentPart_ASSET             AssessmentPart_PartName = 1
	AssessmentPart_METHOD            AssessmentPart_PartName = 2
	AssessmentPart_OBJECTIVE         AssessmentPart_PartName = 3
)

// Enum value maps for AssessmentPart_PartName.
var (
	AssessmentPart_PartName_name = map[int32]string{
		0: "PART_NAME_UNKNOWN",
		1: "ASSET",
		2: "METHOD",
		3: "OBJECTIVE",
	}
	AssessmentPart_PartName_value = map[string]int32{
		"PART_NAME_UNKNOWN": 0,
		"ASSET":             1,
		"METHOD":            2,
		"OBJECTIVE":         3,
	}
)

func (x AssessmentPart_PartName) Enum() *AssessmentPart_PartName {
	p := new(AssessmentPart_PartName)
	*p = x
	return p
}

func (x AssessmentPart_PartName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssessmentPart_PartName) Descriptor() protoreflect.EnumDescriptor {
	return file_runner_proto_oscal_proto_enumTypes[13].Descriptor()
}

func (AssessmentPart_PartName) Type() protoreflect.EnumType {
	return &file_runner_proto_oscal_proto_enumTypes[13]
}

func (x AssessmentPart_PartName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssessmentPart_PartName.Descriptor instead.
func (AssessmentPart_PartName) EnumDescriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{32, 0}
}

// Component Type
// A category describing the purpose of the component.
type SystemComponent_ComponentType int32

const (
	SystemComponent_COMPONENT_TYPE_UNKNOWN           SystemComponent_ComponentType = 0
	SystemComponent_COMPONENT_TYPE_THIS_SYSTEM       SystemComponent_ComponentType = 1
	SystemComponent_COMPONENT_TYPE_SYSTEM            SystemComponent_ComponentType = 2
	SystemComponent_COMPONENT_TYPE_INTERCONNECTION   SystemComponent_ComponentType = 3
	SystemComponent_COMPONENT_TYPE_SOFTWARE          SystemComponent_ComponentType = 4
	SystemComponent_COMPONENT_TYPE_HARDWARE          SystemComponent_ComponentType = 5
	SystemComponent_COMPONENT_TYPE_SERVICE           SystemComponent_ComponentType = 6
	SystemComponent_COMPONENT_TYPE_POLICY            SystemComponent_ComponentType = 7
	SystemComponent_COMPONENT_TYPE_PHYSICAL          SystemComponent_ComponentType = 8
	SystemComponent_COMPONENT_TYPE_PROCESS_PROCEDURE SystemComponent_ComponentType = 9
	SystemComponent_COMPONENT_TYPE_PLAN              SystemComponent_ComponentType = 10
	SystemComponent_COMPONENT_TYPE_GUIDANCE          SystemComponent_ComponentType = 11
	SystemComponent_COMPONENT_TYPE_STANDARD          SystemComponent_ComponentType = 12
	SystemComponent_COMPONENT_TYPE_VALIDATION        SystemComponent_ComponentType = 13
	SystemComponent_COMPONENT_TYPE_NETWORK           SystemComponent_ComponentType = 14
)

// Enum value maps for SystemComponent_ComponentType.
var (
	SystemComponent_ComponentType_name = map[int32]string{
		0:  "COMPONENT_TYPE_UNKNOWN",
		1:  "COMPONENT_TYPE_THIS_SYSTEM",
		2:  "COMPONENT_TYPE_SYSTEM",
		3:  "COMPONENT_TYPE_INTERCONNECTION",
		4:  "COMPONENT_TYPE_SOFTWARE",
		5:  "COMPONENT_TYPE_HARDWARE",
		6:  "COMPONENT_TYPE_SERVICE",
		7:  "COMPONENT_TYPE_POLICY",
		8:  "COMPONENT_TYPE_PHYSICAL",
		9:  "COMPONENT_TYPE_PROCESS_PROCEDURE",
		10: "COMPONENT_TYPE_PLAN",
		11: "COMPONENT_TYPE_GUIDANCE",
		12: "COMPONENT_TYPE_STANDARD",
		13: "COMPONENT_TYPE_VALIDATION",
		14: "COMPONENT_TYPE_NETWORK",
	}
	SystemComponent_ComponentType_value = map[string]int32{
		"COMPONENT_TYPE_UNKNOWN":           0,
		"COMPONENT_TYPE_THIS_SYSTEM":       1,
		"COMPONENT_TYPE_SYSTEM":            2,
		"COMPONENT_TYPE_INTERCONNECTION":   3,
		"COMPONENT_TYPE_SOFTWARE":          4,
		"COMPONENT_TYPE_HARDWARE":          5,
		"COMPONENT_TYPE_SERVICE":           6,
		"COMPONENT_TYPE_POLICY":            7,
		"COMPONENT_TYPE_PHYSICAL":          8,
		"COMPONENT_TYPE_PROCESS_PROCEDURE": 9,
		"COMPONENT_TYPE_PLAN":              10,
		"COMPONENT_TYPE_GUIDANCE":          11,
		"COMPONENT_TYPE_STANDARD":          12,
		"COMPONENT_TYPE_VALIDATION":        13,
		"COMPONENT_TYPE_NETWORK":           14,
	}
)

func (x SystemComponent_ComponentType) Enum() *SystemComponent_ComponentType {
	p := new(SystemComponent_ComponentType)
	*p = x
	return p
}

func (x SystemComponent_ComponentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SystemComponent_ComponentType) Descriptor() protoreflect.EnumDescriptor {
	return file_runner_proto_oscal_proto_enumTypes[14].Descriptor()
}

func (SystemComponent_ComponentType) Type() protoreflect.EnumType {
	return &file_runner_proto_oscal_proto_enumTypes[14]
}

func (x SystemComponent_ComponentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SystemComponent_ComponentType.Descriptor instead.
func (SystemComponent_ComponentType) EnumDescriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{40, 0}
}

// Property
// An attribute, characteristic, or quality of the containing object expressed
// as a namespace qualified name/value pair.
type Property struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Property Name
	// A textual label, within a namespace, that identifies a specific attribute,
	// characteristic, or quality of the property's containing object.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Property Value
	// Indicates the value of the attribute, characteristic, or quality.
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	// Property Universally Unique Identifier
	// A unique identifier for a property.
	Uuid *string `protobuf:"bytes,3,opt,name=Uuid,proto3,oneof" json:"Uuid,omitempty"`
	// Property Namespace
	// A namespace qualifying the property's name. This allows different
	// organizations to associate distinct semantics with the same name.
	Ns *string `protobuf:"bytes,4,opt,name=Ns,proto3,oneof" json:"Ns,omitempty"`
	// Property Class
	// A textual label that provides a sub-type or characterization of the
	// property's name.
	Class *string `protobuf:"bytes,5,opt,name=Class,proto3,oneof" json:"Class,omitempty"`
	// Property Group
	// An identifier for relating distinct sets of properties.
	Group *string `protobuf:"bytes,6,opt,name=Group,proto3,oneof" json:"Group,omitempty"`
	// Remarks
	// Additional explanatory notes for the property.
	Remarks       *string `protobuf:"bytes,7,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Property) Reset() {
	*x = Property{}
	mi := &file_runner_proto_oscal_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Property) ProtoMessage() {}

func (x *Property) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Property.ProtoReflect.Descriptor instead.
func (*Property) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{0}
}

func (x *Property) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Property) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Property) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

func (x *Property) GetNs() string {
	if x != nil && x.Ns != nil {
		return *x.Ns
	}
	return ""
}

func (x *Property) GetClass() string {
	if x != nil && x.Class != nil {
		return *x.Class
	}
	return ""
}

func (x *Property) GetGroup() string {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return ""
}

func (x *Property) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

type Link struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Hypertext Reference
	// A resolvable URL reference to a resource.
	Href string `protobuf:"bytes,1,opt,name=Href,proto3" json:"Href,omitempty"`
	// Link Relation Type
	// Describes the type of relationship provided by the link's hypertext
	// reference. This can be an indicator of the link's purpose.
	Rel *LinkRelationship `protobuf:"varint,2,opt,name=Rel,proto3,enum=proto.LinkRelationship,oneof" json:"Rel,omitempty"`
	// Media Type
	// A label that indicates the nature of a resource, as a data serialization or
	// format.
	MediaType *string `protobuf:"bytes,3,opt,name=MediaType,proto3,oneof" json:"MediaType,omitempty"`
	// Resource Fragment
	// In case where the href points to a back-matter/resource, this value will
	// indicate the URI fragment to append to any rlink associated with the
	// resource. This value MUST be URI encoded.
	ResourceFragment *string `protobuf:"bytes,4,opt,name=ResourceFragment,proto3,oneof" json:"ResourceFragment,omitempty"`
	// Link Text
	// A textual label to associate with the link, which may be used for
	// presentation in a tool.
	Text          *string `protobuf:"bytes,5,opt,name=Text,proto3,oneof" json:"Text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Link) Reset() {
	*x = Link{}
	mi := &file_runner_proto_oscal_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{1}
}

func (x *Link) GetHref() string {
	if x != nil {
		return x.Href
	}
	return ""
}

func (x *Link) GetRel() LinkRelationship {
	if x != nil && x.Rel != nil {
		return *x.Rel
	}
	return LinkRelationship_LINK_RELATIONSHIP_UNKNOWN
}

func (x *Link) GetMediaType() string {
	if x != nil && x.MediaType != nil {
		return *x.MediaType
	}
	return ""
}

func (x *Link) GetResourceFragment() string {
	if x != nil && x.ResourceFragment != nil {
		return *x.ResourceFragment
	}
	return ""
}

func (x *Link) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

// Originating Actor
// The actor that produces an observation, a finding, or a risk. One or more
// actor types can be used to specify a person that is using a tool.
type OriginActor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Actor Type
	// The kind of actor.
	Type ActorType `protobuf:"varint,1,opt,name=Type,proto3,enum=proto.ActorType" json:"Type,omitempty"`
	// Actor Universally Unique Identifier Reference
	// A machine-oriented identifier reference to the tool or person based on the
	// associated type.
	ActorUuid string `protobuf:"bytes,2,opt,name=ActorUuid,proto3" json:"ActorUuid,omitempty"`
	// Actor Role
	// For a party, this can optionally be used to specify the role the actor was
	// performing.
	RoleId *string `protobuf:"bytes,3,opt,name=RoleId,proto3,oneof" json:"RoleId,omitempty"`
	// Properties
	// Additional attributes related to the actor.
	Props []*Property `protobuf:"bytes,4,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	// References to related resources.
	Links         []*Link `protobuf:"bytes,5,rep,name=Links,proto3" json:"Links,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OriginActor) Reset() {
	*x = OriginActor{}
	mi := &file_runner_proto_oscal_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OriginActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OriginActor) ProtoMessage() {}

func (x *OriginActor) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OriginActor.ProtoReflect.Descriptor instead.
func (*OriginActor) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{2}
}

func (x *OriginActor) GetType() ActorType {
	if x != nil {
		return x.Type
	}
	return ActorType_ACTOR_TYPE_UNKNOWN
}

func (x *OriginActor) GetActorUuid() string {
	if x != nil {
		return x.ActorUuid
	}
	return ""
}

func (x *OriginActor) GetRoleId() string {
	if x != nil && x.RoleId != nil {
		return *x.RoleId
	}
	return ""
}

func (x *OriginActor) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *OriginActor) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

// Select Assessment Subject
// Identifies a set of assessment subjects to include/exclude by UUID.
type SelectSubjectById struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Subject Universally Unique Identifier Reference
	// A machine-oriented identifier reference to a component, inventory-item,
	// location, party, user, or resource using it's UUID.
	SubjectUuid string `protobuf:"bytes,1,opt,name=SubjectUuid,proto3" json:"SubjectUuid,omitempty"`
	// Subject Universally Unique Identifier Reference Type
	// Used to indicate the type of object pointed to by the uuid-ref within a
	// subject.
	Type SubjectType `protobuf:"varint,2,opt,name=Type,proto3,enum=proto.SubjectType" json:"Type,omitempty"`
	// Properties
	// Additional attributes related to the subject.
	Props []*Property `protobuf:"bytes,3,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	// References to related resources.
	Links []*Link `protobuf:"bytes,4,rep,name=Links,proto3" json:"Links,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,5,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SelectSubjectById) Reset() {
	*x = SelectSubjectById{}
	mi := &file_runner_proto_oscal_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SelectSubjectById) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectSubjectById) ProtoMessage() {}

func (x *SelectSubjectById) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectSubjectById.ProtoReflect.Descriptor instead.
func (*SelectSubjectById) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{3}
}

func (x *SelectSubjectById) GetSubjectUuid() string {
	if x != nil {
		return x.SubjectUuid
	}
	return ""
}

func (x *SelectSubjectById) GetType() SubjectType {
	if x != nil {
		return x.Type
	}
	return SubjectType_SUBJECT_TYPE_UNKNOWN
}

func (x *SelectSubjectById) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *SelectSubjectById) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *SelectSubjectById) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

type IncludeAll struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IncludeAll) Reset() {
	*x = IncludeAll{}
	mi := &file_runner_proto_oscal_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncludeAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncludeAll) ProtoMessage() {}

func (x *IncludeAll) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncludeAll.ProtoReflect.Descriptor instead.
func (*IncludeAll) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{4}
}

// Subject of Assessment
// Identifies system elements being assessed, such as components, inventory
// items, and locations. In the assessment plan, this identifies a planned
// assessment subject. In the assessment results this is an actual assessment
// subject, and reflects any changes from the plan. exactly what will be the
// focus of this assessment. Any subjects not identified in this way are
// out-of-scope.
type AssessmentSubject struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Subject Type
	// Indicates the type of assessment subject, such as a component, inventory,
	// item, location, or party represented by this selection statement.
	Type SubjectType `protobuf:"varint,1,opt,name=Type,proto3,enum=proto.SubjectType" json:"Type,omitempty"`
	// Include Subjects Description
	// A human-readable description of the collection of subjects being included
	// in this assessment.
	Description *string `protobuf:"bytes,2,opt,name=Description,proto3,oneof" json:"Description,omitempty"`
	// Properties
	// Additional attributes related to the assessment subject.
	Props []*Property `protobuf:"bytes,3,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	// References to related resources.
	Links []*Link `protobuf:"bytes,4,rep,name=Links,proto3" json:"Links,omitempty"`
	// Include All
	// Specifies if all subjects should be included.
	IncludeAll *IncludeAll `protobuf:"bytes,5,opt,name=IncludeAll,proto3,oneof" json:"IncludeAll,omitempty"`
	// Include Subjects
	// Subjects explicitly included in the assessment.
	IncludeSubjects []*SelectSubjectById `protobuf:"bytes,6,rep,name=IncludeSubjects,proto3" json:"IncludeSubjects,omitempty"`
	// Exclude Subjects
	// Subjects explicitly excluded from the assessment.
	ExcludeSubjects []*SelectSubjectById `protobuf:"bytes,7,rep,name=ExcludeSubjects,proto3" json:"ExcludeSubjects,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,8,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssessmentSubject) Reset() {
	*x = AssessmentSubject{}
	mi := &file_runner_proto_oscal_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssessmentSubject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssessmentSubject) ProtoMessage() {}

func (x *AssessmentSubject) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssessmentSubject.ProtoReflect.Descriptor instead.
func (*AssessmentSubject) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{5}
}

func (x *AssessmentSubject) GetType() SubjectType {
	if x != nil {
		return x.Type
	}
	return SubjectType_SUBJECT_TYPE_UNKNOWN
}

func (x *AssessmentSubject) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *AssessmentSubject) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *AssessmentSubject) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *AssessmentSubject) GetIncludeAll() *IncludeAll {
	if x != nil {
		return x.IncludeAll
	}
	return nil
}

func (x *AssessmentSubject) GetIncludeSubjects() []*SelectSubjectById {
	if x != nil {
		return x.IncludeSubjects
	}
	return nil
}

func (x *AssessmentSubject) GetExcludeSubjects() []*SelectSubjectById {
	if x != nil {
		return x.ExcludeSubjects
	}
	return nil
}

func (x *AssessmentSubject) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Identified Subject
// Used to detail assessment subjects that were identified by this task.
type IdentifiedSubject struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Assessment Subject Placeholder Universally Unique Identifier Reference
	// A machine-oriented identifier reference to a unique assessment subject
	// placeholder defined by this task.
	SubjectPlaceholderUuid string `protobuf:"bytes,1,opt,name=SubjectPlaceholderUuid,proto3" json:"SubjectPlaceholderUuid,omitempty"`
	// Subjects
	// Assessment subjects identified by this task.
	Subjects      []*AssessmentSubject `protobuf:"bytes,2,rep,name=Subjects,proto3" json:"Subjects,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IdentifiedSubject) Reset() {
	*x = IdentifiedSubject{}
	mi := &file_runner_proto_oscal_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdentifiedSubject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentifiedSubject) ProtoMessage() {}

func (x *IdentifiedSubject) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentifiedSubject.ProtoReflect.Descriptor instead.
func (*IdentifiedSubject) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{6}
}

func (x *IdentifiedSubject) GetSubjectPlaceholderUuid() string {
	if x != nil {
		return x.SubjectPlaceholderUuid
	}
	return ""
}

func (x *IdentifiedSubject) GetSubjects() []*AssessmentSubject {
	if x != nil {
		return x.Subjects
	}
	return nil
}

// Responsible Party
// A reference to a set of persons and/or organizations that have responsibility
// for performing the referenced role in the context of the containing object.
type ResponsibleParty struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Responsible Role
	// A reference to a role performed by a party.
	RoleId string `protobuf:"bytes,1,opt,name=RoleId,proto3" json:"RoleId,omitempty"`
	// Party UUIDs
	// References to parties that perform the role.
	PartyUuids []string `protobuf:"bytes,2,rep,name=PartyUuids,proto3" json:"PartyUuids,omitempty"`
	// Properties
	// Additional attributes related to the responsible party.
	Props []*Property `protobuf:"bytes,3,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	// References to related resources.
	Links []*Link `protobuf:"bytes,4,rep,name=Links,proto3" json:"Links,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,5,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResponsibleParty) Reset() {
	*x = ResponsibleParty{}
	mi := &file_runner_proto_oscal_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponsibleParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsibleParty) ProtoMessage() {}

func (x *ResponsibleParty) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsibleParty.ProtoReflect.Descriptor instead.
func (*ResponsibleParty) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{7}
}

func (x *ResponsibleParty) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *ResponsibleParty) GetPartyUuids() []string {
	if x != nil {
		return x.PartyUuids
	}
	return nil
}

func (x *ResponsibleParty) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *ResponsibleParty) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *ResponsibleParty) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Task Reference
// Identifies an individual task for which the containing object is a
// consequence of.
type RelatedTask struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Task Universally Unique Identifier Reference
	// A machine-oriented identifier reference to a unique task.
	TaskUuid string `protobuf:"bytes,1,opt,name=TaskUuid,proto3" json:"TaskUuid,omitempty"`
	// Properties
	// Additional attributes related to the task.
	Props []*Property `protobuf:"bytes,2,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	// References to related resources.
	Links []*Link `protobuf:"bytes,3,rep,name=Links,proto3" json:"Links,omitempty"`
	// Responsible Parties
	// Parties responsible for this task.
	ResponsibleParties []*ResponsibleParty `protobuf:"bytes,4,rep,name=ResponsibleParties,proto3" json:"ResponsibleParties,omitempty"`
	// Subjects
	// Assessment subjects related to this task.
	Subjects []*AssessmentSubject `protobuf:"bytes,5,rep,name=Subjects,proto3" json:"Subjects,omitempty"`
	// Identified Subject
	// Used to detail assessment subjects that were identified by this task.
	IdentifiedSubject *IdentifiedSubject `protobuf:"bytes,6,opt,name=IdentifiedSubject,proto3,oneof" json:"IdentifiedSubject,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,7,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelatedTask) Reset() {
	*x = RelatedTask{}
	mi := &file_runner_proto_oscal_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelatedTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedTask) ProtoMessage() {}

func (x *RelatedTask) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedTask.ProtoReflect.Descriptor instead.
func (*RelatedTask) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{8}
}

func (x *RelatedTask) GetTaskUuid() string {
	if x != nil {
		return x.TaskUuid
	}
	return ""
}

func (x *RelatedTask) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *RelatedTask) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *RelatedTask) GetResponsibleParties() []*ResponsibleParty {
	if x != nil {
		return x.ResponsibleParties
	}
	return nil
}

func (x *RelatedTask) GetSubjects() []*AssessmentSubject {
	if x != nil {
		return x.Subjects
	}
	return nil
}

func (x *RelatedTask) GetIdentifiedSubject() *IdentifiedSubject {
	if x != nil {
		return x.IdentifiedSubject
	}
	return nil
}

func (x *RelatedTask) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Origin
// Identifies the source of the finding, such as a tool, interviewed person, or
// activity.
type Origin struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Actors
	// The actors that contributed to the finding.
	Actors []*OriginActor `protobuf:"bytes,1,rep,name=Actors,proto3" json:"Actors,omitempty"`
	// Related Tasks
	// Tasks related to the finding's origin.
	RelatedTasks  []*RelatedTask `protobuf:"bytes,2,rep,name=RelatedTasks,proto3" json:"RelatedTasks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Origin) Reset() {
	*x = Origin{}
	mi := &file_runner_proto_oscal_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Origin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Origin) ProtoMessage() {}

func (x *Origin) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Origin.ProtoReflect.Descriptor instead.
func (*Origin) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{9}
}

func (x *Origin) GetActors() []*OriginActor {
	if x != nil {
		return x.Actors
	}
	return nil
}

func (x *Origin) GetRelatedTasks() []*RelatedTask {
	if x != nil {
		return x.RelatedTasks
	}
	return nil
}

// Implementation Status
// Indicates the degree to which a given control is implemented.
type ImplementationStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Implementation State
	// Identifies the implementation status of the control or control objective.
	State ImplementationStatusState `protobuf:"varint,1,opt,name=State,proto3,enum=proto.ImplementationStatusState" json:"State,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,2,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImplementationStatus) Reset() {
	*x = ImplementationStatus{}
	mi := &file_runner_proto_oscal_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImplementationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplementationStatus) ProtoMessage() {}

func (x *ImplementationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplementationStatus.ProtoReflect.Descriptor instead.
func (*ImplementationStatus) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{10}
}

func (x *ImplementationStatus) GetState() ImplementationStatusState {
	if x != nil {
		return x.State
	}
	return ImplementationStatusState_IMPLEMENTATION_STATUS_STATE_UNKNOWN
}

func (x *ImplementationStatus) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Objective Status
// A determination of if the objective is satisfied or not within a given
// system.
type ObjectiveStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Objective Status State
	// An indication as to whether the objective is satisfied or not.
	State string `protobuf:"bytes,1,opt,name=State,proto3" json:"State,omitempty"`
	// Objective Status Reason
	// The reason the objective was given its status.
	Reason *string `protobuf:"bytes,2,opt,name=Reason,proto3,oneof" json:"Reason,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,3,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ObjectiveStatus) Reset() {
	*x = ObjectiveStatus{}
	mi := &file_runner_proto_oscal_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectiveStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectiveStatus) ProtoMessage() {}

func (x *ObjectiveStatus) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectiveStatus.ProtoReflect.Descriptor instead.
func (*ObjectiveStatus) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{11}
}

func (x *ObjectiveStatus) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ObjectiveStatus) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *ObjectiveStatus) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Objective Status
// Captures an assessor's conclusions regarding the degree to which an objective
// is satisfied.
type FindingTarget struct {
	state protoimpl.MessageState   `protogen:"open.v1"`
	Type  FindingTarget_TargetType `protobuf:"varint,1,opt,name=Type,proto3,enum=proto.FindingTarget_TargetType" json:"Type,omitempty"`
	// Finding Target Identifier Reference
	// A machine-oriented identifier reference for a specific target qualified by
	// the type.
	TargetId string `protobuf:"bytes,2,opt,name=TargetId,proto3" json:"TargetId,omitempty"`
	// Objective Status Title
	// The title for this objective status.
	Title *string `protobuf:"bytes,3,opt,name=Title,proto3,oneof" json:"Title,omitempty"`
	// Objective Status Description
	// A human-readable description of the assessor's conclusions regarding the
	// degree to which an objective is satisfied.
	Description *string `protobuf:"bytes,4,opt,name=Description,proto3,oneof" json:"Description,omitempty"`
	// Properties
	// Additional attributes related to the finding target.
	Props []*Property `protobuf:"bytes,5,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	// References to related resources.
	Links []*Link `protobuf:"bytes,6,rep,name=Links,proto3" json:"Links,omitempty"`
	// Objective Status
	// A determination of if the objective is satisfied or not within a given
	// system.
	Status *ObjectiveStatus `protobuf:"bytes,7,opt,name=Status,proto3" json:"Status,omitempty"`
	// Implementation Status
	// The implementation status of the objective.
	ImplementationStatus *ImplementationStatus `protobuf:"bytes,8,opt,name=ImplementationStatus,proto3,oneof" json:"ImplementationStatus,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,9,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindingTarget) Reset() {
	*x = FindingTarget{}
	mi := &file_runner_proto_oscal_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindingTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindingTarget) ProtoMessage() {}

func (x *FindingTarget) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindingTarget.ProtoReflect.Descriptor instead.
func (*FindingTarget) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{12}
}

func (x *FindingTarget) GetType() FindingTarget_TargetType {
	if x != nil {
		return x.Type
	}
	return FindingTarget_TARGET_TYPE_UNKNOWN
}

func (x *FindingTarget) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *FindingTarget) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *FindingTarget) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *FindingTarget) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *FindingTarget) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *FindingTarget) GetStatus() *ObjectiveStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FindingTarget) GetImplementationStatus() *ImplementationStatus {
	if x != nil {
		return x.ImplementationStatus
	}
	return nil
}

func (x *FindingTarget) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Related Observation
// Relates the finding to a set of referenced observations that were used to
// determine the finding.
type RelatedObservation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Observation Universally Unique Identifier Reference
	// A machine-oriented identifier reference to an observation defined in the
	// list of observations.
	ObservationUuid string `protobuf:"bytes,1,opt,name=ObservationUuid,proto3" json:"ObservationUuid,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RelatedObservation) Reset() {
	*x = RelatedObservation{}
	mi := &file_runner_proto_oscal_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelatedObservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedObservation) ProtoMessage() {}

func (x *RelatedObservation) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedObservation.ProtoReflect.Descriptor instead.
func (*RelatedObservation) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{13}
}

func (x *RelatedObservation) GetObservationUuid() string {
	if x != nil {
		return x.ObservationUuid
	}
	return ""
}

// Associated Risk
// Relates the finding to a set of referenced risks that were used to determine
// the finding.
type RelatedRisk struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Risk Universally Unique Identifier Reference
	// A reference to a risk in the list of risks.
	RiskUuid      string `protobuf:"bytes,1,opt,name=RiskUuid,proto3" json:"RiskUuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelatedRisk) Reset() {
	*x = RelatedRisk{}
	mi := &file_runner_proto_oscal_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelatedRisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedRisk) ProtoMessage() {}

func (x *RelatedRisk) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedRisk.ProtoReflect.Descriptor instead.
func (*RelatedRisk) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{14}
}

func (x *RelatedRisk) GetRiskUuid() string {
	if x != nil {
		return x.RiskUuid
	}
	return ""
}

// Relevant Evidence
// Links this observation to relevant evidence.
type RelevantEvidence struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Relevant Evidence Reference
	// A resolvable URL reference to relevant evidence.
	Href *string `protobuf:"bytes,1,opt,name=Href,proto3,oneof" json:"Href,omitempty"`
	// Relevant Evidence Description
	// A human-readable description of this evidence.
	Description string `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	// Properties
	// Additional attributes related to the evidence.
	Props []*Property `protobuf:"bytes,3,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	// References to related resources.
	Links []*Link `protobuf:"bytes,4,rep,name=Links,proto3" json:"Links,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,5,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelevantEvidence) Reset() {
	*x = RelevantEvidence{}
	mi := &file_runner_proto_oscal_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelevantEvidence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelevantEvidence) ProtoMessage() {}

func (x *RelevantEvidence) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelevantEvidence.ProtoReflect.Descriptor instead.
func (*RelevantEvidence) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{15}
}

func (x *RelevantEvidence) GetHref() string {
	if x != nil && x.Href != nil {
		return *x.Href
	}
	return ""
}

func (x *RelevantEvidence) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RelevantEvidence) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *RelevantEvidence) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *RelevantEvidence) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Identifies the Subject
// A human-oriented identifier reference to a resource. Use type to indicate
// whether the identified resource is a component, inventory item, location,
// user, or something else.
type SubjectReference struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Subject Universally Unique Identifier Reference
	// A machine-oriented identifier reference to a component, inventory-item,
	// location, party, user, or resource using its UUID.
	SubjectUuid string `protobuf:"bytes,1,opt,name=SubjectUuid,proto3" json:"SubjectUuid,omitempty"`
	// Subject Universally Unique Identifier Reference Type
	// Used to indicate the type of object pointed to by the uuid-ref within a
	// subject.
	Type SubjectType `protobuf:"varint,2,opt,name=Type,proto3,enum=proto.SubjectType" json:"Type,omitempty"`
	// Subject Reference Title
	// The title or name for the referenced subject.
	Title *string `protobuf:"bytes,3,opt,name=Title,proto3,oneof" json:"Title,omitempty"`
	// Properties
	// Additional attributes related to the subject reference.
	Props []*Property `protobuf:"bytes,4,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	// References to related resources.
	Links []*Link `protobuf:"bytes,5,rep,name=Links,proto3" json:"Links,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,6,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubjectReference) Reset() {
	*x = SubjectReference{}
	mi := &file_runner_proto_oscal_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubjectReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectReference) ProtoMessage() {}

func (x *SubjectReference) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectReference.ProtoReflect.Descriptor instead.
func (*SubjectReference) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{16}
}

func (x *SubjectReference) GetSubjectUuid() string {
	if x != nil {
		return x.SubjectUuid
	}
	return ""
}

func (x *SubjectReference) GetType() SubjectType {
	if x != nil {
		return x.Type
	}
	return SubjectType_SUBJECT_TYPE_UNKNOWN
}

func (x *SubjectReference) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *SubjectReference) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *SubjectReference) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *SubjectReference) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Finding
// Describes an individual finding.
type Finding struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Finding Universally Unique Identifier
	// A machine-oriented, globally unique identifier with cross-instance scope
	// that can be used to reference this finding in this or other OSCAL
	// instances. The locally defined UUID of the finding can be used to reference
	// the data item locally or globally (e.g., in an imported OSCAL instance).
	// This UUID should be assigned per-subject, which means it should be
	// consistently used to identify the same subject across revisions of the
	// document.
	Uuid string `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	// Finding Title
	// The title for this finding.
	Title string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	// Finding Description
	// A human-readable description of this finding.
	Description string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	// Properties
	// Additional attributes related to the finding.
	Props []*Property `protobuf:"bytes,4,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	// References to related resources.
	Links []*Link `protobuf:"bytes,5,rep,name=Links,proto3" json:"Links,omitempty"`
	// Origins
	// The sources of the finding, such as tools or activities.
	Origins []*Origin `protobuf:"bytes,6,rep,name=Origins,proto3" json:"Origins,omitempty"`
	// Target
	// The objective status and target of the finding.
	Target *FindingTarget `protobuf:"bytes,7,opt,name=Target,proto3" json:"Target,omitempty"`
	// Implementation Statement UUID
	// A reference to the implementation statement in the SSP related to this
	// finding.
	ImplementationStatementUuid *string `protobuf:"bytes,8,opt,name=ImplementationStatementUuid,proto3,oneof" json:"ImplementationStatementUuid,omitempty"`
	// Related Observation
	// Relates the finding to a set of referenced observations that were used to
	// determine the finding.
	RelatedObservations []*RelatedObservation `protobuf:"bytes,9,rep,name=RelatedObservations,proto3" json:"RelatedObservations,omitempty"`
	// Associated Risk
	// Relates the finding to a set of referenced risks that were used to
	// determine the finding.
	RelatedRisks []*RelatedRisk `protobuf:"bytes,10,rep,name=RelatedRisks,proto3" json:"RelatedRisks,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,11,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Finding) Reset() {
	*x = Finding{}
	mi := &file_runner_proto_oscal_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Finding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Finding) ProtoMessage() {}

func (x *Finding) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Finding.ProtoReflect.Descriptor instead.
func (*Finding) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{17}
}

func (x *Finding) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Finding) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Finding) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Finding) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *Finding) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Finding) GetOrigins() []*Origin {
	if x != nil {
		return x.Origins
	}
	return nil
}

func (x *Finding) GetTarget() *FindingTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Finding) GetImplementationStatementUuid() string {
	if x != nil && x.ImplementationStatementUuid != nil {
		return *x.ImplementationStatementUuid
	}
	return ""
}

func (x *Finding) GetRelatedObservations() []*RelatedObservation {
	if x != nil {
		return x.RelatedObservations
	}
	return nil
}

func (x *Finding) GetRelatedRisks() []*RelatedRisk {
	if x != nil {
		return x.RelatedRisks
	}
	return nil
}

func (x *Finding) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Observation
// Describes an individual observation.
type Observation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Observation Universally Unique Identifier
	// A globally unique identifier for this observation, used for cross-instance
	// referencing.
	Uuid string `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	// Observation Title
	// The title for this observation.
	Title *string `protobuf:"bytes,2,opt,name=Title,proto3,oneof" json:"Title,omitempty"`
	// Observation Description
	// A human-readable description of this assessment observation.
	Description string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	// Properties
	// Additional attributes related to the observation.
	Props []*Property `protobuf:"bytes,4,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	// References to related resources.
	Links []*Link `protobuf:"bytes,5,rep,name=Links,proto3" json:"Links,omitempty"`
	// Observation Method
	// Identifies how the observation was made.
	Methods []ObservationMethod `protobuf:"varint,6,rep,packed,name=Methods,proto3,enum=proto.ObservationMethod" json:"Methods,omitempty"`
	// Observation Type
	// Identifies the nature of the observation. More than one may be used to
	// further qualify and enable filtering.
	Types []ObservationType `protobuf:"varint,7,rep,packed,name=Types,proto3,enum=proto.ObservationType" json:"Types,omitempty"`
	// Origins
	// The sources of the observation, such as tools or activities.
	Origins []*Origin `protobuf:"bytes,8,rep,name=Origins,proto3" json:"Origins,omitempty"`
	// Subjects
	// References to subjects related to this observation.
	Subjects []*SubjectReference `protobuf:"bytes,9,rep,name=Subjects,proto3" json:"Subjects,omitempty"`
	// Relevant Evidence
	// Links this observation to relevant evidence.
	RelevantEvidence []*RelevantEvidence `protobuf:"bytes,10,rep,name=RelevantEvidence,proto3" json:"RelevantEvidence,omitempty"`
	// Collected Field
	// Date/time stamp identifying when the observation information was collected.
	Collected *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=Collected,proto3" json:"Collected,omitempty"`
	// Expires Field
	// Date/time identifying when the observation information is out-of-date and
	// no longer valid.
	Expires *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=Expires,proto3,oneof" json:"Expires,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,13,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Observation) Reset() {
	*x = Observation{}
	mi := &file_runner_proto_oscal_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Observation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Observation) ProtoMessage() {}

func (x *Observation) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Observation.ProtoReflect.Descriptor instead.
func (*Observation) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{18}
}

func (x *Observation) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Observation) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Observation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Observation) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *Observation) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Observation) GetMethods() []ObservationMethod {
	if x != nil {
		return x.Methods
	}
	return nil
}

func (x *Observation) GetTypes() []ObservationType {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *Observation) GetOrigins() []*Origin {
	if x != nil {
		return x.Origins
	}
	return nil
}

func (x *Observation) GetSubjects() []*SubjectReference {
	if x != nil {
		return x.Subjects
	}
	return nil
}

func (x *Observation) GetRelevantEvidence() []*RelevantEvidence {
	if x != nil {
		return x.RelevantEvidence
	}
	return nil
}

func (x *Observation) GetCollected() *timestamppb.Timestamp {
	if x != nil {
		return x.Collected
	}
	return nil
}

func (x *Observation) GetExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.Expires
	}
	return nil
}

func (x *Observation) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Threat ID
// A pointer, by ID, to an externally-defined threat.
type ThreatId struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Threat Type Identification System
	// Specifies the source of the threat information.
	System string `protobuf:"bytes,1,opt,name=System,proto3" json:"System,omitempty"`
	// Threat Information Resource Reference
	// An optional location for the threat data, from which this ID originates.
	Href *string `protobuf:"bytes,2,opt,name=Href,proto3,oneof" json:"Href,omitempty"`
	// Threat Identifier
	// A unique identifier for the threat.
	Id            string `protobuf:"bytes,3,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ThreatId) Reset() {
	*x = ThreatId{}
	mi := &file_runner_proto_oscal_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThreatId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreatId) ProtoMessage() {}

func (x *ThreatId) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreatId.ProtoReflect.Descriptor instead.
func (*ThreatId) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{19}
}

func (x *ThreatId) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

func (x *ThreatId) GetHref() string {
	if x != nil && x.Href != nil {
		return *x.Href
	}
	return ""
}

func (x *ThreatId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Facet
// An individual characteristic that is part of a larger set produced by the
// same actor.
type Facet struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Facet Name
	// The name of the risk metric within the specified system.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Naming System
	// Specifies the naming system under which this risk metric is organized,
	// which allows for the same names to be used in different systems controlled
	// by different parties. This avoids the potential of a name clash.
	System string `protobuf:"bytes,2,opt,name=System,proto3" json:"System,omitempty"`
	// Facet Value
	// Indicates the value of the facet.
	Value string `protobuf:"bytes,3,opt,name=Value,proto3" json:"Value,omitempty"`
	// Properties
	// Additional attributes related to the facet.
	Props []*Property `protobuf:"bytes,4,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	// References to related resources.
	Links []*Link `protobuf:"bytes,5,rep,name=Links,proto3" json:"Links,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,6,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Facet) Reset() {
	*x = Facet{}
	mi := &file_runner_proto_oscal_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Facet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Facet) ProtoMessage() {}

func (x *Facet) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Facet.ProtoReflect.Descriptor instead.
func (*Facet) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{20}
}

func (x *Facet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Facet) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

func (x *Facet) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Facet) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *Facet) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Facet) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Characterization
// A collection of descriptive data about the containing object from a specific
// origin.
type Characterization struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Properties
	// Additional attributes related to the characterization.
	Props []*Property `protobuf:"bytes,1,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	// References to related resources.
	Links []*Link `protobuf:"bytes,2,rep,name=Links,proto3" json:"Links,omitempty"`
	// Origin
	// The source of the characterization data.
	Origin        *Origin  `protobuf:"bytes,3,opt,name=Origin,proto3" json:"Origin,omitempty"`
	Facets        []*Facet `protobuf:"bytes,4,rep,name=Facets,proto3" json:"Facets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Characterization) Reset() {
	*x = Characterization{}
	mi := &file_runner_proto_oscal_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Characterization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Characterization) ProtoMessage() {}

func (x *Characterization) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Characterization.ProtoReflect.Descriptor instead.
func (*Characterization) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{21}
}

func (x *Characterization) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *Characterization) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Characterization) GetOrigin() *Origin {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *Characterization) GetFacets() []*Facet {
	if x != nil {
		return x.Facets
	}
	return nil
}

// Mitigating Factors
// Describes an existing mitigating factor that may affect the overall
// determination of the risk, with an optional link to an implementation
// statement in the SSP.
type MitigatingFactor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Mitigating Factor Universally Unique Identifier
	// A machine-oriented, globally unique identifier with cross-instance scope
	// that can be used to reference this mitigating factor elsewhere in this or
	// other OSCAL instances. The locally defined UUID of the mitigating factor
	// can be used to reference the data item locally or globally (e.g., in an
	// imported OSCAL instance). This UUID should be assigned per-subject, which
	// means it should be consistently used to identify the same subject across
	// revisions of the document.
	Uuid string `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	// Implementation UUID
	// A machine-oriented, globally unique identifier with cross-instance scope
	// that can be used to reference this implementation statement elsewhere in
	// this or other OSCAL instancess. The locally defined UUID of the
	// implementation statement can be used to reference the data item locally or
	// globally (e.g., in an imported OSCAL instance). This UUID should be
	// assigned per-subject, which means it should be consistently used to
	// identify the same subject across revisions of the document.
	ImplementationUuid *string `protobuf:"bytes,2,opt,name=ImplementationUuid,proto3,oneof" json:"ImplementationUuid,omitempty"`
	// Mitigating Factor Description
	// A human-readable description of this mitigating factor.
	Description string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	// Properties
	Props []*Property `protobuf:"bytes,4,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	Links []*Link `protobuf:"bytes,5,rep,name=Links,proto3" json:"Links,omitempty"`
	// Subjects
	Subjects      []*SubjectReference `protobuf:"bytes,6,rep,name=Subjects,proto3" json:"Subjects,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MitigatingFactor) Reset() {
	*x = MitigatingFactor{}
	mi := &file_runner_proto_oscal_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MitigatingFactor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MitigatingFactor) ProtoMessage() {}

func (x *MitigatingFactor) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MitigatingFactor.ProtoReflect.Descriptor instead.
func (*MitigatingFactor) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{22}
}

func (x *MitigatingFactor) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *MitigatingFactor) GetImplementationUuid() string {
	if x != nil && x.ImplementationUuid != nil {
		return *x.ImplementationUuid
	}
	return ""
}

func (x *MitigatingFactor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MitigatingFactor) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *MitigatingFactor) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *MitigatingFactor) GetSubjects() []*SubjectReference {
	if x != nil {
		return x.Subjects
	}
	return nil
}

// Required Asset
// Identifies an asset required to achieve remediation.
type RequiredAsset struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required Universally Unique Identifier
	// A machine-oriented, globally unique identifier with cross-instance scope
	// that can be used to reference this required asset elsewhere in this or
	// other OSCAL instances. The locally defined UUID of the asset can be used to
	// reference the data item locally or globally (e.g., in an imported OSCAL
	// instance). This UUID should be assigned per-subject, which means it should
	// be consistently used to identify the same subject across revisions of the
	// document.
	Uuid string `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	// Subjects
	Subjects []*SubjectReference `protobuf:"bytes,2,rep,name=Subjects,proto3" json:"Subjects,omitempty"`
	// Title for Required Asset
	Title *string `protobuf:"bytes,3,opt,name=Title,proto3,oneof" json:"Title,omitempty"`
	// Description of Required Asset
	Description string `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	// Properties
	Props []*Property `protobuf:"bytes,5,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	Links []*Link `protobuf:"bytes,6,rep,name=Links,proto3" json:"Links,omitempty"`
	// Remarks
	Remarks       *string `protobuf:"bytes,7,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequiredAsset) Reset() {
	*x = RequiredAsset{}
	mi := &file_runner_proto_oscal_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequiredAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequiredAsset) ProtoMessage() {}

func (x *RequiredAsset) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequiredAsset.ProtoReflect.Descriptor instead.
func (*RequiredAsset) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{23}
}

func (x *RequiredAsset) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RequiredAsset) GetSubjects() []*SubjectReference {
	if x != nil {
		return x.Subjects
	}
	return nil
}

func (x *RequiredAsset) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *RequiredAsset) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RequiredAsset) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *RequiredAsset) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *RequiredAsset) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Event Timing
// The timing under which the task is intended to occur.
type EventTiming struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// On Date Condition
	// The task must occur on the specified date.
	OnDate          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=OnDate,proto3,oneof" json:"OnDate,omitempty"`
	WithinDateRange *EventTiming_DateRange `protobuf:"bytes,2,opt,name=WithinDateRange,proto3,oneof" json:"WithinDateRange,omitempty"`
	AtFrequency     *EventTiming_Frequency `protobuf:"bytes,3,opt,name=AtFrequency,proto3,oneof" json:"AtFrequency,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EventTiming) Reset() {
	*x = EventTiming{}
	mi := &file_runner_proto_oscal_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventTiming) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTiming) ProtoMessage() {}

func (x *EventTiming) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTiming.ProtoReflect.Descriptor instead.
func (*EventTiming) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{24}
}

func (x *EventTiming) GetOnDate() *timestamppb.Timestamp {
	if x != nil {
		return x.OnDate
	}
	return nil
}

func (x *EventTiming) GetWithinDateRange() *EventTiming_DateRange {
	if x != nil {
		return x.WithinDateRange
	}
	return nil
}

func (x *EventTiming) GetAtFrequency() *EventTiming_Frequency {
	if x != nil {
		return x.AtFrequency
	}
	return nil
}

// Responsible Role
// A reference to a role with responsibility for performing a function relative
// to the containing object, optionally associated with a set of persons and/or
// organizations that perform that role.
type ResponsibleRole struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Responsible Role ID
	// A human-oriented identifier reference to a role performed.
	RoleId string `protobuf:"bytes,1,opt,name=RoleId,proto3" json:"RoleId,omitempty"`
	// Properties
	// Additional attributes related to the responsible role.
	Props []*Property `protobuf:"bytes,2,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	// References to related resources.
	Links []*Link `protobuf:"bytes,3,rep,name=Links,proto3" json:"Links,omitempty"`
	// Party UUIDs
	// Identifiers for the persons or organizations that perform this role.
	PartyUuids []string `protobuf:"bytes,4,rep,name=PartyUuids,proto3" json:"PartyUuids,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,5,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResponsibleRole) Reset() {
	*x = ResponsibleRole{}
	mi := &file_runner_proto_oscal_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponsibleRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsibleRole) ProtoMessage() {}

func (x *ResponsibleRole) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsibleRole.ProtoReflect.Descriptor instead.
func (*ResponsibleRole) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{25}
}

func (x *ResponsibleRole) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *ResponsibleRole) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *ResponsibleRole) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *ResponsibleRole) GetPartyUuids() []string {
	if x != nil {
		return x.PartyUuids
	}
	return nil
}

func (x *ResponsibleRole) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Task
// Represents a scheduled event or milestone, which may be associated with a
// series of assessment actions.
type Task struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Task Universally Unique Identifier
	// A globally unique identifier for this task.
	Uuid string   `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	Type TaskType `protobuf:"varint,2,opt,name=Type,proto3,enum=proto.TaskType" json:"Type,omitempty"`
	// Task Title
	// The title for this task.
	Title string `protobuf:"bytes,3,opt,name=Title,proto3" json:"Title,omitempty"`
	// Task Description
	// A human-readable description of this task.
	Description *string `protobuf:"bytes,4,opt,name=Description,proto3,oneof" json:"Description,omitempty"`
	// Properties
	// Additional attributes related to the task.
	Props []*Property `protobuf:"bytes,5,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	// References to related resources.
	Links []*Link `protobuf:"bytes,6,rep,name=Links,proto3" json:"Links,omitempty"`
	// Event Timing
	// The timing under which the task is intended to occur.
	Timing       *EventTiming           `protobuf:"bytes,7,opt,name=Timing,proto3,oneof" json:"Timing,omitempty"`
	Dependencies []*Task_TaskDependency `protobuf:"bytes,8,rep,name=Dependencies,proto3" json:"Dependencies,omitempty"`
	// Sub-Tasks
	// Nested tasks within this task.
	Tasks                []*Task                    `protobuf:"bytes,9,rep,name=Tasks,proto3" json:"Tasks,omitempty"`
	AssociatedActivities []*Task_AssociatedActivity `protobuf:"bytes,10,rep,name=AssociatedActivities,proto3" json:"AssociatedActivities,omitempty"`
	// Subjects
	// Subjects related to this task.
	Subjects []*AssessmentSubject `protobuf:"bytes,11,rep,name=Subjects,proto3" json:"Subjects,omitempty"`
	// Responsible Roles
	// Roles responsible for executing this task.
	ResponsibleRoles []*ResponsibleRole `protobuf:"bytes,12,rep,name=ResponsibleRoles,proto3" json:"ResponsibleRoles,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,13,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_runner_proto_oscal_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{26}
}

func (x *Task) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Task) GetType() TaskType {
	if x != nil {
		return x.Type
	}
	return TaskType_TASK_TYPE_UNKNOWN
}

func (x *Task) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Task) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Task) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *Task) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Task) GetTiming() *EventTiming {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (x *Task) GetDependencies() []*Task_TaskDependency {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *Task) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *Task) GetAssociatedActivities() []*Task_AssociatedActivity {
	if x != nil {
		return x.AssociatedActivities
	}
	return nil
}

func (x *Task) GetSubjects() []*AssessmentSubject {
	if x != nil {
		return x.Subjects
	}
	return nil
}

func (x *Task) GetResponsibleRoles() []*ResponsibleRole {
	if x != nil {
		return x.ResponsibleRoles
	}
	return nil
}

func (x *Task) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Risk Response
// Describes either a recommended or an actual plan for addressing the risk.
type Response struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Remediation Universally Unique Identifier
	// A machine-oriented, globally unique identifier with cross-instance scope
	// that can be used to reference this remediation elsewhere in this or other
	// OSCAL instances. The locally defined UUID of the risk response can be used
	// to reference the data item locally or globally (e.g., in an imported OSCAL
	// instance). This UUID should be assigned per-subject, which means it should
	// be consistently used to identify the same subject across revisions of the
	// document.
	Uuid string `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	// Remediation Intent
	// Identifies whether this is a recommendation, such as from an assessor or
	// tool, or an actual plan accepted by the system owner.
	Lifecycle Lifecycle `protobuf:"varint,2,opt,name=Lifecycle,proto3,enum=proto.Lifecycle" json:"Lifecycle,omitempty"`
	// Response Title
	// The title for this response activity.
	Title string `protobuf:"bytes,3,opt,name=Title,proto3" json:"Title,omitempty"`
	// Response Description
	// A human-readable description of this response plan.
	Description string `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	// Properties
	// Additional attributes related to the response.
	Props []*Property `protobuf:"bytes,5,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	// References to related resources.
	Links []*Link `protobuf:"bytes,6,rep,name=Links,proto3" json:"Links,omitempty"`
	// Origins
	// The sources that provided or influenced this response.
	Origins        []*Origin        `protobuf:"bytes,7,rep,name=Origins,proto3" json:"Origins,omitempty"`
	RequiredAssets []*RequiredAsset `protobuf:"bytes,8,rep,name=RequiredAssets,proto3" json:"RequiredAssets,omitempty"`
	// Tasks
	// The tasks associated with executing this response.
	Tasks []*Task `protobuf:"bytes,9,rep,name=Tasks,proto3" json:"Tasks,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,10,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Response) Reset() {
	*x = Response{}
	mi := &file_runner_proto_oscal_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{27}
}

func (x *Response) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Response) GetLifecycle() Lifecycle {
	if x != nil {
		return x.Lifecycle
	}
	return Lifecycle_LIFECYCLE_UNKNOWN
}

func (x *Response) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Response) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Response) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *Response) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Response) GetOrigins() []*Origin {
	if x != nil {
		return x.Origins
	}
	return nil
}

func (x *Response) GetRequiredAssets() []*RequiredAsset {
	if x != nil {
		return x.RequiredAssets
	}
	return nil
}

func (x *Response) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *Response) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Risk Log
// A log of all risk-related tasks.
type RiskLog struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entries       []*RiskLog_Entry       `protobuf:"bytes,1,rep,name=Entries,proto3" json:"Entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RiskLog) Reset() {
	*x = RiskLog{}
	mi := &file_runner_proto_oscal_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RiskLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskLog) ProtoMessage() {}

func (x *RiskLog) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskLog.ProtoReflect.Descriptor instead.
func (*RiskLog) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{28}
}

func (x *RiskLog) GetEntries() []*RiskLog_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

// Logged By
// Used to indicate who created a log entry and in what role.
type LoggedBy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Party UUID Reference
	// A globally unique identifier for the party making the log entry.
	PartyUuid string `protobuf:"bytes,1,opt,name=PartyUuid,proto3" json:"PartyUuid,omitempty"`
	// Actor Role
	// A reference to the role in which the party is making the log entry.
	RoleId        *string `protobuf:"bytes,2,opt,name=RoleId,proto3,oneof" json:"RoleId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoggedBy) Reset() {
	*x = LoggedBy{}
	mi := &file_runner_proto_oscal_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoggedBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggedBy) ProtoMessage() {}

func (x *LoggedBy) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggedBy.ProtoReflect.Descriptor instead.
func (*LoggedBy) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{29}
}

func (x *LoggedBy) GetPartyUuid() string {
	if x != nil {
		return x.PartyUuid
	}
	return ""
}

func (x *LoggedBy) GetRoleId() string {
	if x != nil && x.RoleId != nil {
		return *x.RoleId
	}
	return ""
}

// Identified Risk
// An identified risk.
type Risk struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Risk Universally Unique Identifier
	// A machine-oriented, globally unique identifier with cross-instance scope
	// that can be used to reference this risk elsewhere in this or other OSCAL
	// instances. The locally defined UUID of the risk can be used to reference
	// the data item locally or globally (e.g., in an imported OSCAL instance).
	// This UUID should be assigned per-subject, which means it should be
	// consistently used to identify the same subject across revisions of the
	// document.
	Uuid string `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	// Risk Title
	// The title for this risk.
	Title string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	// Risk Description
	// A human-readable summary of the identified risk, to include a statement of
	// how the risk impacts the system.
	Description string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	// Risk Statement
	// An summary of impact for how the risk affects the system.
	Statement string `protobuf:"bytes,4,opt,name=Statement,proto3" json:"Statement,omitempty"`
	// Properties
	// Additional attributes related to the risk.
	Props []*Property `protobuf:"bytes,5,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	// References to related resources.
	Links []*Link `protobuf:"bytes,6,rep,name=Links,proto3" json:"Links,omitempty"`
	// Risk Status
	// The current status of the risk.
	Status RiskStatus `protobuf:"varint,7,opt,name=Status,proto3,enum=proto.RiskStatus" json:"Status,omitempty"`
	// Origins
	// The sources that identified the risk.
	Origins []*Origin `protobuf:"bytes,8,rep,name=Origins,proto3" json:"Origins,omitempty"`
	// Threat Identifiers
	// Identifies threats associated with the risk.
	ThreatIds []*ThreatId `protobuf:"bytes,9,rep,name=ThreatIds,proto3" json:"ThreatIds,omitempty"`
	// Characterizations
	// A collection of descriptive data about the containing object from a
	// specific origin.
	Characterizations []*Characterization `protobuf:"bytes,10,rep,name=Characterizations,proto3" json:"Characterizations,omitempty"`
	// Mitigating Factors
	// Describes an existing mitigating factor that may affect the overall
	// determination of the risk, with an optional link to an implementation
	// statement in the SSP.
	MitigatingFactors []*MitigatingFactor `protobuf:"bytes,11,rep,name=MitigatingFactors,proto3" json:"MitigatingFactors,omitempty"`
	// Risk Resolution Deadline
	// The date/time by which the risk must be resolved.
	Deadline *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=Deadline,proto3,oneof" json:"Deadline,omitempty"`
	// Remediations
	// Describes either recommended or an actual plan for addressing the risk.
	Remediations        []*Response           `protobuf:"bytes,13,rep,name=Remediations,proto3" json:"Remediations,omitempty"`
	RiskLog             *RiskLog              `protobuf:"bytes,14,opt,name=RiskLog,proto3,oneof" json:"RiskLog,omitempty"`
	RelatedObservations []*RelatedObservation `protobuf:"bytes,15,rep,name=RelatedObservations,proto3" json:"RelatedObservations,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Risk) Reset() {
	*x = Risk{}
	mi := &file_runner_proto_oscal_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Risk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Risk) ProtoMessage() {}

func (x *Risk) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Risk.ProtoReflect.Descriptor instead.
func (*Risk) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{30}
}

func (x *Risk) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Risk) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Risk) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Risk) GetStatement() string {
	if x != nil {
		return x.Statement
	}
	return ""
}

func (x *Risk) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *Risk) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Risk) GetStatus() RiskStatus {
	if x != nil {
		return x.Status
	}
	return RiskStatus_RISK_STATUS_UNKNOWN
}

func (x *Risk) GetOrigins() []*Origin {
	if x != nil {
		return x.Origins
	}
	return nil
}

func (x *Risk) GetThreatIds() []*ThreatId {
	if x != nil {
		return x.ThreatIds
	}
	return nil
}

func (x *Risk) GetCharacterizations() []*Characterization {
	if x != nil {
		return x.Characterizations
	}
	return nil
}

func (x *Risk) GetMitigatingFactors() []*MitigatingFactor {
	if x != nil {
		return x.MitigatingFactors
	}
	return nil
}

func (x *Risk) GetDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.Deadline
	}
	return nil
}

func (x *Risk) GetRemediations() []*Response {
	if x != nil {
		return x.Remediations
	}
	return nil
}

func (x *Risk) GetRiskLog() *RiskLog {
	if x != nil {
		return x.RiskLog
	}
	return nil
}

func (x *Risk) GetRelatedObservations() []*RelatedObservation {
	if x != nil {
		return x.RelatedObservations
	}
	return nil
}

// Assessment Log
// A log of all assessment-related actions taken.
type AssessmentLog struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entries       []*AssessmentLog_Entry `protobuf:"bytes,1,rep,name=Entries,proto3" json:"Entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssessmentLog) Reset() {
	*x = AssessmentLog{}
	mi := &file_runner_proto_oscal_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssessmentLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssessmentLog) ProtoMessage() {}

func (x *AssessmentLog) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssessmentLog.ProtoReflect.Descriptor instead.
func (*AssessmentLog) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{31}
}

func (x *AssessmentLog) GetEntries() []*AssessmentLog_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

// Assessment Part
// A partition of an assessment plan or results, or a child of another part.
type AssessmentPart struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Part Identifier
	// A globally unique identifier for this part.
	Uuid *string                 `protobuf:"bytes,1,opt,name=Uuid,proto3,oneof" json:"Uuid,omitempty"`
	Name AssessmentPart_PartName `protobuf:"varint,2,opt,name=Name,proto3,enum=proto.AssessmentPart_PartName" json:"Name,omitempty"`
	// Part Namespace
	// A namespace qualifying the part's name.
	Ns *string `protobuf:"bytes,3,opt,name=Ns,proto3,oneof" json:"Ns,omitempty"`
	// Part Class
	// A sub-type or characterization of the part's name.
	Class *string `protobuf:"bytes,4,opt,name=Class,proto3,oneof" json:"Class,omitempty"`
	// Part Title
	// A name given to the part for display and navigation.
	Title *string `protobuf:"bytes,5,opt,name=Title,proto3,oneof" json:"Title,omitempty"`
	// Properties
	// Additional attributes related to the assessment part.
	Props []*Property `protobuf:"bytes,6,rep,name=Props,proto3" json:"Props,omitempty"`
	// Part Text
	// Permits multiple paragraphs, lists, tables, etc.
	Prose *string `protobuf:"bytes,7,opt,name=Prose,proto3,oneof" json:"Prose,omitempty"`
	// Nested Parts
	// Child parts of this assessment part.
	Parts []*AssessmentPart `protobuf:"bytes,8,rep,name=Parts,proto3" json:"Parts,omitempty"`
	// Links
	// References to related resources.
	Links         []*Link `protobuf:"bytes,9,rep,name=Links,proto3" json:"Links,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssessmentPart) Reset() {
	*x = AssessmentPart{}
	mi := &file_runner_proto_oscal_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssessmentPart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssessmentPart) ProtoMessage() {}

func (x *AssessmentPart) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssessmentPart.ProtoReflect.Descriptor instead.
func (*AssessmentPart) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{32}
}

func (x *AssessmentPart) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

func (x *AssessmentPart) GetName() AssessmentPart_PartName {
	if x != nil {
		return x.Name
	}
	return AssessmentPart_PART_NAME_UNKNOWN
}

func (x *AssessmentPart) GetNs() string {
	if x != nil && x.Ns != nil {
		return *x.Ns
	}
	return ""
}

func (x *AssessmentPart) GetClass() string {
	if x != nil && x.Class != nil {
		return *x.Class
	}
	return ""
}

func (x *AssessmentPart) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *AssessmentPart) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *AssessmentPart) GetProse() string {
	if x != nil && x.Prose != nil {
		return *x.Prose
	}
	return ""
}

func (x *AssessmentPart) GetParts() []*AssessmentPart {
	if x != nil {
		return x.Parts
	}
	return nil
}

func (x *AssessmentPart) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

// Attestations
// A set of textual statements, typically written by the assessor.
type Attestation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Responsible Parties
	ResponsibleParties []*ResponsibleParty `protobuf:"bytes,1,rep,name=ResponsibleParties,proto3" json:"ResponsibleParties,omitempty"`
	// Parts
	Parts         []*AssessmentPart `protobuf:"bytes,2,rep,name=Parts,proto3" json:"Parts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Attestation) Reset() {
	*x = Attestation{}
	mi := &file_runner_proto_oscal_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Attestation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attestation) ProtoMessage() {}

func (x *Attestation) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attestation.ProtoReflect.Descriptor instead.
func (*Attestation) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{33}
}

func (x *Attestation) GetResponsibleParties() []*ResponsibleParty {
	if x != nil {
		return x.ResponsibleParties
	}
	return nil
}

func (x *Attestation) GetParts() []*AssessmentPart {
	if x != nil {
		return x.Parts
	}
	return nil
}

// Select Control
// Used to select a control for inclusion/exclusion based on one or more control
// identifiers.
type SelectControlById struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Control Identifier Reference
	// A reference to a control with a corresponding id value.
	ControlId string `protobuf:"bytes,1,opt,name=ControlId,proto3" json:"ControlId,omitempty"`
	// Include Specific Statements
	// Used to constrain the selection to only specifically identified statements.
	StatementIds  []string `protobuf:"bytes,2,rep,name=StatementIds,proto3" json:"StatementIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SelectControlById) Reset() {
	*x = SelectControlById{}
	mi := &file_runner_proto_oscal_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SelectControlById) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectControlById) ProtoMessage() {}

func (x *SelectControlById) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectControlById.ProtoReflect.Descriptor instead.
func (*SelectControlById) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{34}
}

func (x *SelectControlById) GetControlId() string {
	if x != nil {
		return x.ControlId
	}
	return ""
}

func (x *SelectControlById) GetStatementIds() []string {
	if x != nil {
		return x.StatementIds
	}
	return nil
}

// Select Objective
// Used to select a control objective for inclusion/exclusion based on its
// identifier.
type SelectObjectiveById struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Objective ID
	// Points to an assessment objective.
	ObjectiveId   string `protobuf:"bytes,1,opt,name=ObjectiveId,proto3" json:"ObjectiveId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SelectObjectiveById) Reset() {
	*x = SelectObjectiveById{}
	mi := &file_runner_proto_oscal_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SelectObjectiveById) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectObjectiveById) ProtoMessage() {}

func (x *SelectObjectiveById) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectObjectiveById.ProtoReflect.Descriptor instead.
func (*SelectObjectiveById) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{35}
}

func (x *SelectObjectiveById) GetObjectiveId() string {
	if x != nil {
		return x.ObjectiveId
	}
	return ""
}

// Reviewed Controls and Control Objectives
// Identifies the controls being assessed and their control objectives.
type ReviewedControls struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Control Objective Description
	// A human-readable description of control objectives.
	Description *string `protobuf:"bytes,1,opt,name=Description,proto3,oneof" json:"Description,omitempty"`
	// Properties
	// Additional attributes related to the reviewed controls.
	Props []*Property `protobuf:"bytes,2,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	// References to related resources.
	Links                      []*Link                                       `protobuf:"bytes,3,rep,name=Links,proto3" json:"Links,omitempty"`
	ControlSelections          []*ReviewedControls_ControlSelection          `protobuf:"bytes,4,rep,name=ControlSelections,proto3" json:"ControlSelections,omitempty"`
	ControlObjectiveSelections []*ReviewedControls_ControlObjectiveSelection `protobuf:"bytes,5,rep,name=ControlObjectiveSelections,proto3" json:"ControlObjectiveSelections,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,6,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReviewedControls) Reset() {
	*x = ReviewedControls{}
	mi := &file_runner_proto_oscal_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReviewedControls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewedControls) ProtoMessage() {}

func (x *ReviewedControls) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewedControls.ProtoReflect.Descriptor instead.
func (*ReviewedControls) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{36}
}

func (x *ReviewedControls) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ReviewedControls) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *ReviewedControls) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *ReviewedControls) GetControlSelections() []*ReviewedControls_ControlSelection {
	if x != nil {
		return x.ControlSelections
	}
	return nil
}

func (x *ReviewedControls) GetControlObjectiveSelections() []*ReviewedControls_ControlObjectiveSelection {
	if x != nil {
		return x.ControlObjectiveSelections
	}
	return nil
}

func (x *ReviewedControls) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Status
// Describes the operational status of the system component.
type Status struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// State
	// The operational status.
	State State `protobuf:"varint,1,opt,name=State,proto3,enum=proto.State" json:"State,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,2,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Status) Reset() {
	*x = Status{}
	mi := &file_runner_proto_oscal_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{37}
}

func (x *Status) GetState() State {
	if x != nil {
		return x.State
	}
	return State_STATE_UNKNOWN
}

func (x *Status) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Port Range
// Defines the transport layer protocol port range for an IPv4-based or
// IPv6-based service.
type PortRange struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Start
	// Indicates the starting port number in a port range for a transport layer
	// protocol.
	Start uint32 `protobuf:"varint,1,opt,name=Start,proto3" json:"Start,omitempty"`
	// End
	// Indicates the ending port number in a port range for a transport layer
	// protocol.
	End uint32 `protobuf:"varint,2,opt,name=End,proto3" json:"End,omitempty"`
	// Transport
	// Indicates the transport type.
	Transport     Transport `protobuf:"varint,3,opt,name=Transport,proto3,enum=proto.Transport" json:"Transport,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PortRange) Reset() {
	*x = PortRange{}
	mi := &file_runner_proto_oscal_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortRange) ProtoMessage() {}

func (x *PortRange) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortRange.ProtoReflect.Descriptor instead.
func (*PortRange) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{38}
}

func (x *PortRange) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *PortRange) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *PortRange) GetTransport() Transport {
	if x != nil {
		return x.Transport
	}
	return Transport_TRANSPORT_UNKNOWN
}

// Service Protocol Information
// Information about the protocol used to provide a service.
type Protocol struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Service Protocol Information Universally Unique Identifier
	// A globally unique identifier for this protocol instance.
	Uuid *string `protobuf:"bytes,1,opt,name=Uuid,proto3,oneof" json:"Uuid,omitempty"`
	// Protocol Name
	// The common name of the protocol, typically from the IANA Service Name and
	// Transport Protocol Port Number Registry.
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	// Protocol Title
	// A human-readable name for the protocol (e.g., Transport Layer Security).
	Title *string `protobuf:"bytes,3,opt,name=Title,proto3,oneof" json:"Title,omitempty"`
	// Port Ranges
	// The port ranges associated with this protocol.
	PortRanges    []*PortRange `protobuf:"bytes,4,rep,name=PortRanges,proto3" json:"PortRanges,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Protocol) Reset() {
	*x = Protocol{}
	mi := &file_runner_proto_oscal_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Protocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Protocol) ProtoMessage() {}

func (x *Protocol) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Protocol.ProtoReflect.Descriptor instead.
func (*Protocol) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{39}
}

func (x *Protocol) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

func (x *Protocol) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Protocol) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Protocol) GetPortRanges() []*PortRange {
	if x != nil {
		return x.PortRanges
	}
	return nil
}

// Component
// A defined component that can be part of an implemented system.
type SystemComponent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Component Identifier
	// A globally unique identifier for this component.
	Uuid string                        `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	Type SystemComponent_ComponentType `protobuf:"varint,2,opt,name=Type,proto3,enum=proto.SystemComponent_ComponentType" json:"Type,omitempty"`
	// Component Title
	// A human-readable name for the system component.
	Title string `protobuf:"bytes,3,opt,name=Title,proto3" json:"Title,omitempty"`
	// Component Description
	// A description of the component, including its function.
	Description string `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	// Purpose
	// A summary of the technological or business purpose of the component.
	Purpose *string `protobuf:"bytes,5,opt,name=Purpose,proto3,oneof" json:"Purpose,omitempty"`
	// Properties
	// Additional attributes related to the component.
	Props []*Property `protobuf:"bytes,6,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	// References to related resources.
	Links  []*Link `protobuf:"bytes,7,rep,name=Links,proto3" json:"Links,omitempty"`
	Status *Status `protobuf:"bytes,8,opt,name=Status,proto3" json:"Status,omitempty"`
	// Responsible Roles
	// Roles responsible for managing or implementing this component.
	ResponsibleRoles []*ResponsibleRole `protobuf:"bytes,9,rep,name=ResponsibleRoles,proto3" json:"ResponsibleRoles,omitempty"`
	// Protocols
	// Protocols used by this component.
	Protocols []*Protocol `protobuf:"bytes,10,rep,name=Protocols,proto3" json:"Protocols,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,11,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SystemComponent) Reset() {
	*x = SystemComponent{}
	mi := &file_runner_proto_oscal_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemComponent) ProtoMessage() {}

func (x *SystemComponent) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemComponent.ProtoReflect.Descriptor instead.
func (*SystemComponent) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{40}
}

func (x *SystemComponent) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SystemComponent) GetType() SystemComponent_ComponentType {
	if x != nil {
		return x.Type
	}
	return SystemComponent_COMPONENT_TYPE_UNKNOWN
}

func (x *SystemComponent) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SystemComponent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SystemComponent) GetPurpose() string {
	if x != nil && x.Purpose != nil {
		return *x.Purpose
	}
	return ""
}

func (x *SystemComponent) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *SystemComponent) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *SystemComponent) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SystemComponent) GetResponsibleRoles() []*ResponsibleRole {
	if x != nil {
		return x.ResponsibleRoles
	}
	return nil
}

func (x *SystemComponent) GetProtocols() []*Protocol {
	if x != nil {
		return x.Protocols
	}
	return nil
}

func (x *SystemComponent) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Inventory Item
// A single managed inventory item within the system.
type InventoryItem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Inventory Item Universally Unique Identifier
	// A globally unique identifier for this inventory item.
	Uuid string `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	// Inventory Item Description
	// A summary of the inventory item stating its purpose within the system.
	Description string `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	// Properties
	// Additional attributes related to the inventory item.
	Props []*Property `protobuf:"bytes,3,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	// References to related resources.
	Links []*Link `protobuf:"bytes,4,rep,name=Links,proto3" json:"Links,omitempty"`
	// Responsible Parties
	// Parties responsible for this inventory item.
	ResponsibleParties    []*ResponsibleParty                   `protobuf:"bytes,5,rep,name=ResponsibleParties,proto3" json:"ResponsibleParties,omitempty"`
	ImplementedComponents []*InventoryItem_ImplementedComponent `protobuf:"bytes,6,rep,name=ImplementedComponents,proto3" json:"ImplementedComponents,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,7,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InventoryItem) Reset() {
	*x = InventoryItem{}
	mi := &file_runner_proto_oscal_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InventoryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryItem) ProtoMessage() {}

func (x *InventoryItem) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryItem.ProtoReflect.Descriptor instead.
func (*InventoryItem) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{41}
}

func (x *InventoryItem) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *InventoryItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InventoryItem) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *InventoryItem) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *InventoryItem) GetResponsibleParties() []*ResponsibleParty {
	if x != nil {
		return x.ResponsibleParties
	}
	return nil
}

func (x *InventoryItem) GetImplementedComponents() []*InventoryItem_ImplementedComponent {
	if x != nil {
		return x.ImplementedComponents
	}
	return nil
}

func (x *InventoryItem) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Functions Performed
// Describes a function performed for a given authorized privilege by this user
// class.
type FunctionPerformed struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Function Name
	// A string representing the function performed.
	Name          string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FunctionPerformed) Reset() {
	*x = FunctionPerformed{}
	mi := &file_runner_proto_oscal_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionPerformed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionPerformed) ProtoMessage() {}

func (x *FunctionPerformed) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionPerformed.ProtoReflect.Descriptor instead.
func (*FunctionPerformed) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{42}
}

func (x *FunctionPerformed) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Privilege
// Identifies a specific system privilege held by the user, with an associated
// description and/or rationale.
type AuthorizedPrivilege struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Privilege Title
	// A human-readable name for the privilege.
	Title string `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	// Privilege Description
	// A summary of the privilege's purpose within the system.
	Description *string `protobuf:"bytes,2,opt,name=Description,proto3,oneof" json:"Description,omitempty"`
	// Functions Performed
	// The functions performed under this privilege.
	FunctionsPerformed []*FunctionPerformed `protobuf:"bytes,3,rep,name=FunctionsPerformed,proto3" json:"FunctionsPerformed,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AuthorizedPrivilege) Reset() {
	*x = AuthorizedPrivilege{}
	mi := &file_runner_proto_oscal_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthorizedPrivilege) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizedPrivilege) ProtoMessage() {}

func (x *AuthorizedPrivilege) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizedPrivilege.ProtoReflect.Descriptor instead.
func (*AuthorizedPrivilege) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{43}
}

func (x *AuthorizedPrivilege) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AuthorizedPrivilege) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *AuthorizedPrivilege) GetFunctionsPerformed() []*FunctionPerformed {
	if x != nil {
		return x.FunctionsPerformed
	}
	return nil
}

// System User
// A type of user that interacts with the system based on an associated role.
type SystemUser struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// User Universally Unique Identifier
	// A globally unique identifier for this user class.
	Uuid string `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	// User Title
	// A name given to the user, used for display and navigation.
	Title *string `protobuf:"bytes,2,opt,name=Title,proto3,oneof" json:"Title,omitempty"`
	// User Short Name
	// A short common name, abbreviation, or acronym for the user.
	ShortName *string `protobuf:"bytes,3,opt,name=ShortName,proto3,oneof" json:"ShortName,omitempty"`
	// User Description
	// A summary of the user's purpose within the system.
	Description *string `protobuf:"bytes,4,opt,name=Description,proto3,oneof" json:"Description,omitempty"`
	// Properties
	// Additional attributes related to the user.
	Props []*Property `protobuf:"bytes,5,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	// References to related resources.
	Links []*Link `protobuf:"bytes,6,rep,name=Links,proto3" json:"Links,omitempty"`
	// Role Identifiers
	// Identifiers of roles associated with the user.
	RoleIds []string `protobuf:"bytes,7,rep,name=RoleIds,proto3" json:"RoleIds,omitempty"`
	// Authorized Privileges
	// Privileges that the user is authorized to perform.
	AuthorizedPrivileges []*AuthorizedPrivilege `protobuf:"bytes,8,rep,name=AuthorizedPrivileges,proto3" json:"AuthorizedPrivileges,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,9,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SystemUser) Reset() {
	*x = SystemUser{}
	mi := &file_runner_proto_oscal_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemUser) ProtoMessage() {}

func (x *SystemUser) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemUser.ProtoReflect.Descriptor instead.
func (*SystemUser) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{44}
}

func (x *SystemUser) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SystemUser) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *SystemUser) GetShortName() string {
	if x != nil && x.ShortName != nil {
		return *x.ShortName
	}
	return ""
}

func (x *SystemUser) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *SystemUser) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *SystemUser) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *SystemUser) GetRoleIds() []string {
	if x != nil {
		return x.RoleIds
	}
	return nil
}

func (x *SystemUser) GetAuthorizedPrivileges() []*AuthorizedPrivilege {
	if x != nil {
		return x.AuthorizedPrivileges
	}
	return nil
}

func (x *SystemUser) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Assessment Assets
// Identifies the assets used to perform this assessment, such as the assessment
// team, scanning tools, and assumptions.
type AssessmentAssets struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Components
	// System components involved in the assessment.
	Components          []*SystemComponent                     `protobuf:"bytes,1,rep,name=Components,proto3" json:"Components,omitempty"`
	AssessmentPlatforms []*AssessmentAssets_AssessmentPlatform `protobuf:"bytes,2,rep,name=AssessmentPlatforms,proto3" json:"AssessmentPlatforms,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *AssessmentAssets) Reset() {
	*x = AssessmentAssets{}
	mi := &file_runner_proto_oscal_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssessmentAssets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssessmentAssets) ProtoMessage() {}

func (x *AssessmentAssets) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssessmentAssets.ProtoReflect.Descriptor instead.
func (*AssessmentAssets) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{45}
}

func (x *AssessmentAssets) GetComponents() []*SystemComponent {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *AssessmentAssets) GetAssessmentPlatforms() []*AssessmentAssets_AssessmentPlatform {
	if x != nil {
		return x.AssessmentPlatforms
	}
	return nil
}

// Local Definitions
// Used to define data objects used in the assessment plan but not appearing in
// the referenced SSP.
type LocalDefinitions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Components
	Components []*SystemComponent `protobuf:"bytes,1,rep,name=Components,proto3" json:"Components,omitempty"`
	// Inventory Items
	InventoryItems []*InventoryItem `protobuf:"bytes,2,rep,name=InventoryItems,proto3" json:"InventoryItems,omitempty"`
	// Users
	Users []*SystemUser `protobuf:"bytes,3,rep,name=Users,proto3" json:"Users,omitempty"`
	// Assessment Assets
	AssessmentAssets *AssessmentAssets `protobuf:"bytes,4,opt,name=AssessmentAssets,proto3,oneof" json:"AssessmentAssets,omitempty"`
	// Tasks
	Tasks         []*Task `protobuf:"bytes,5,rep,name=Tasks,proto3" json:"Tasks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocalDefinitions) Reset() {
	*x = LocalDefinitions{}
	mi := &file_runner_proto_oscal_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalDefinitions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalDefinitions) ProtoMessage() {}

func (x *LocalDefinitions) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalDefinitions.ProtoReflect.Descriptor instead.
func (*LocalDefinitions) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{46}
}

func (x *LocalDefinitions) GetComponents() []*SystemComponent {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *LocalDefinitions) GetInventoryItems() []*InventoryItem {
	if x != nil {
		return x.InventoryItems
	}
	return nil
}

func (x *LocalDefinitions) GetUsers() []*SystemUser {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *LocalDefinitions) GetAssessmentAssets() *AssessmentAssets {
	if x != nil {
		return x.AssessmentAssets
	}
	return nil
}

func (x *LocalDefinitions) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

// Assessment Result
// Used by the assessment results and POA&M. In the assessment results, this
// identifies all of the assessment observations and findings, initial and
// residual risks, deviations, and disposition. In the POA&M, this identifies
// initial and residual risks, deviations, and disposition.
type AssessmentResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Results Universally Unique Identifier
	// A machine-oriented, globally unique identifier with cross-instance scope
	// that can be used to reference this set of results in this or other OSCAL
	// instances. The locally defined UUID of the assessment result can be used to
	// reference the data item locally or globally (e.g., in an imported OSCAL
	// instance). This UUID should be assigned per-subject, which means it should
	// be consistently used to identify the same subject across revisions of the
	// document.
	Uuid string `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	// Results Title
	// The title for this set of results.
	Title string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	// Results Description
	// A human-readable description of this set of test results.
	Description string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	// Start Field
	// Date/time stamp identifying the start of the evidence collection reflected
	// in these results.
	Start *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=Start,proto3" json:"Start,omitempty"`
	// End Field
	// Date/time stamp identifying the end of the evidence collection reflected in
	// these results. In a continuous motoring scenario, this may contain the same
	// value as start if appropriate.
	End *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=End,proto3,oneof" json:"End,omitempty"`
	// Properties
	// An attribute, characteristic, or quality of the containing object expressed
	// as a namespace qualified name/value pair.
	Props []*Property `protobuf:"bytes,6,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	// A reference to a local or remote resource, that has a specific relation to
	// the containing object.
	Links            []*Link           `protobuf:"bytes,7,rep,name=Links,proto3" json:"Links,omitempty"`
	LocalDefinitions *LocalDefinitions `protobuf:"bytes,8,opt,name=LocalDefinitions,proto3,oneof" json:"LocalDefinitions,omitempty"`
	// Reviewed Controls
	// Identifies the controls reviewed in the assessment.
	ReviewedControls *ReviewedControls `protobuf:"bytes,9,opt,name=ReviewedControls,proto3" json:"ReviewedControls,omitempty"`
	Attestations     []*Attestation    `protobuf:"bytes,10,rep,name=Attestations,proto3" json:"Attestations,omitempty"`
	AssessmentLog    *AssessmentLog    `protobuf:"bytes,11,opt,name=AssessmentLog,proto3,oneof" json:"AssessmentLog,omitempty"`
	// Observations
	// The observations made during the assessment.
	Observations []*Observation `protobuf:"bytes,12,rep,name=Observations,proto3" json:"Observations,omitempty"`
	// Risks
	// The risks identified during the assessment.
	Risks []*Risk `protobuf:"bytes,13,rep,name=Risks,proto3" json:"Risks,omitempty"`
	// Findings
	// The findings identified during the assessment.
	Findings []*Finding `protobuf:"bytes,14,rep,name=Findings,proto3" json:"Findings,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,15,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssessmentResult) Reset() {
	*x = AssessmentResult{}
	mi := &file_runner_proto_oscal_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssessmentResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssessmentResult) ProtoMessage() {}

func (x *AssessmentResult) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssessmentResult.ProtoReflect.Descriptor instead.
func (*AssessmentResult) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{47}
}

func (x *AssessmentResult) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *AssessmentResult) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AssessmentResult) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AssessmentResult) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *AssessmentResult) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *AssessmentResult) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *AssessmentResult) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *AssessmentResult) GetLocalDefinitions() *LocalDefinitions {
	if x != nil {
		return x.LocalDefinitions
	}
	return nil
}

func (x *AssessmentResult) GetReviewedControls() *ReviewedControls {
	if x != nil {
		return x.ReviewedControls
	}
	return nil
}

func (x *AssessmentResult) GetAttestations() []*Attestation {
	if x != nil {
		return x.Attestations
	}
	return nil
}

func (x *AssessmentResult) GetAssessmentLog() *AssessmentLog {
	if x != nil {
		return x.AssessmentLog
	}
	return nil
}

func (x *AssessmentResult) GetObservations() []*Observation {
	if x != nil {
		return x.Observations
	}
	return nil
}

func (x *AssessmentResult) GetRisks() []*Risk {
	if x != nil {
		return x.Risks
	}
	return nil
}

func (x *AssessmentResult) GetFindings() []*Finding {
	if x != nil {
		return x.Findings
	}
	return nil
}

func (x *AssessmentResult) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// On Date Range Condition
// The task must occur within the specified date range.
type EventTiming_DateRange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=Start,proto3" json:"Start,omitempty"`
	End           *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=End,proto3" json:"End,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventTiming_DateRange) Reset() {
	*x = EventTiming_DateRange{}
	mi := &file_runner_proto_oscal_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventTiming_DateRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTiming_DateRange) ProtoMessage() {}

func (x *EventTiming_DateRange) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTiming_DateRange.ProtoReflect.Descriptor instead.
func (*EventTiming_DateRange) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{24, 0}
}

func (x *EventTiming_DateRange) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *EventTiming_DateRange) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

// Frequency Condition
// The task is intended to occur at the specified frequency.
type EventTiming_Frequency struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Period        int32                          `protobuf:"varint,1,opt,name=Period,proto3" json:"Period,omitempty"`
	Unit          EventTiming_Frequency_TimeUnit `protobuf:"varint,2,opt,name=Unit,proto3,enum=proto.EventTiming_Frequency_TimeUnit" json:"Unit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventTiming_Frequency) Reset() {
	*x = EventTiming_Frequency{}
	mi := &file_runner_proto_oscal_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventTiming_Frequency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTiming_Frequency) ProtoMessage() {}

func (x *EventTiming_Frequency) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTiming_Frequency.ProtoReflect.Descriptor instead.
func (*EventTiming_Frequency) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{24, 1}
}

func (x *EventTiming_Frequency) GetPeriod() int32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *EventTiming_Frequency) GetUnit() EventTiming_Frequency_TimeUnit {
	if x != nil {
		return x.Unit
	}
	return EventTiming_Frequency_UNIT_UNKNOWN
}

// Task Dependency
// Used to indicate that a task is dependent on another task.
type Task_TaskDependency struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskUuid      string                 `protobuf:"bytes,1,opt,name=TaskUuid,proto3" json:"TaskUuid,omitempty"`
	Remarks       *string                `protobuf:"bytes,2,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Task_TaskDependency) Reset() {
	*x = Task_TaskDependency{}
	mi := &file_runner_proto_oscal_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task_TaskDependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_TaskDependency) ProtoMessage() {}

func (x *Task_TaskDependency) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_TaskDependency.ProtoReflect.Descriptor instead.
func (*Task_TaskDependency) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{26, 0}
}

func (x *Task_TaskDependency) GetTaskUuid() string {
	if x != nil {
		return x.TaskUuid
	}
	return ""
}

func (x *Task_TaskDependency) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Associated Activity
// Identifies an individual activity to be performed as part of a task.
type Task_AssociatedActivity struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Activity Universally Unique Identifier Reference
	ActivityUuid string `protobuf:"bytes,1,opt,name=ActivityUuid,proto3" json:"ActivityUuid,omitempty"`
	// Properties
	Props []*Property `protobuf:"bytes,2,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	Links []*Link `protobuf:"bytes,3,rep,name=Links,proto3" json:"Links,omitempty"`
	// Responsible Roles
	ResponsibleRoles []*ResponsibleRole `protobuf:"bytes,4,rep,name=ResponsibleRoles,proto3" json:"ResponsibleRoles,omitempty"`
	// Subjects
	Subjects []*AssessmentSubject `protobuf:"bytes,5,rep,name=Subjects,proto3" json:"Subjects,omitempty"`
	// Remarks
	Remarks       *string `protobuf:"bytes,6,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Task_AssociatedActivity) Reset() {
	*x = Task_AssociatedActivity{}
	mi := &file_runner_proto_oscal_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task_AssociatedActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_AssociatedActivity) ProtoMessage() {}

func (x *Task_AssociatedActivity) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_AssociatedActivity.ProtoReflect.Descriptor instead.
func (*Task_AssociatedActivity) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{26, 1}
}

func (x *Task_AssociatedActivity) GetActivityUuid() string {
	if x != nil {
		return x.ActivityUuid
	}
	return ""
}

func (x *Task_AssociatedActivity) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *Task_AssociatedActivity) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Task_AssociatedActivity) GetResponsibleRoles() []*ResponsibleRole {
	if x != nil {
		return x.ResponsibleRoles
	}
	return nil
}

func (x *Task_AssociatedActivity) GetSubjects() []*AssessmentSubject {
	if x != nil {
		return x.Subjects
	}
	return nil
}

func (x *Task_AssociatedActivity) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Risk Log Entry
// Identifies an individual risk response.
type RiskLog_Entry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Risk Log Entry Universally Unique Identifier
	Uuid string `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	// Title
	Title *string `protobuf:"bytes,2,opt,name=Title,proto3,oneof" json:"Title,omitempty"`
	// Risk Task Description
	Description *string `protobuf:"bytes,3,opt,name=Description,proto3,oneof" json:"Description,omitempty"`
	// Start
	Start *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=Start,proto3" json:"Start,omitempty"`
	// End
	End *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=End,proto3,oneof" json:"End,omitempty"`
	// Properties
	Props []*Property `protobuf:"bytes,6,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	Links []*Link `protobuf:"bytes,7,rep,name=Links,proto3" json:"Links,omitempty"`
	// Logged By
	LoggedBy []*LoggedBy `protobuf:"bytes,8,rep,name=LoggedBy,proto3" json:"LoggedBy,omitempty"`
	// Status Change
	StatusChange     *RiskStatus                      `protobuf:"varint,9,opt,name=StatusChange,proto3,enum=proto.RiskStatus,oneof" json:"StatusChange,omitempty"`
	RelatedResponses []*RiskLog_Entry_RelatedResponse `protobuf:"bytes,10,rep,name=RelatedResponses,proto3" json:"RelatedResponses,omitempty"`
	// Remarks
	Remarks       *string `protobuf:"bytes,11,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RiskLog_Entry) Reset() {
	*x = RiskLog_Entry{}
	mi := &file_runner_proto_oscal_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RiskLog_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskLog_Entry) ProtoMessage() {}

func (x *RiskLog_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskLog_Entry.ProtoReflect.Descriptor instead.
func (*RiskLog_Entry) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{28, 0}
}

func (x *RiskLog_Entry) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RiskLog_Entry) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *RiskLog_Entry) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *RiskLog_Entry) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *RiskLog_Entry) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *RiskLog_Entry) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *RiskLog_Entry) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *RiskLog_Entry) GetLoggedBy() []*LoggedBy {
	if x != nil {
		return x.LoggedBy
	}
	return nil
}

func (x *RiskLog_Entry) GetStatusChange() RiskStatus {
	if x != nil && x.StatusChange != nil {
		return *x.StatusChange
	}
	return RiskStatus_RISK_STATUS_UNKNOWN
}

func (x *RiskLog_Entry) GetRelatedResponses() []*RiskLog_Entry_RelatedResponse {
	if x != nil {
		return x.RelatedResponses
	}
	return nil
}

func (x *RiskLog_Entry) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Related Responses
type RiskLog_Entry_RelatedResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Response Universally Unique Identifier Reference
	ResponseUuid string `protobuf:"bytes,1,opt,name=ResponseUuid,proto3" json:"ResponseUuid,omitempty"`
	// Properties
	Props []*Property `protobuf:"bytes,2,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	Links []*Link `protobuf:"bytes,3,rep,name=Links,proto3" json:"Links,omitempty"`
	// Related Tasks
	RelatedTasks []*RelatedTask `protobuf:"bytes,4,rep,name=RelatedTasks,proto3" json:"RelatedTasks,omitempty"`
	// Remarks
	Remarks       *string `protobuf:"bytes,5,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RiskLog_Entry_RelatedResponse) Reset() {
	*x = RiskLog_Entry_RelatedResponse{}
	mi := &file_runner_proto_oscal_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RiskLog_Entry_RelatedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskLog_Entry_RelatedResponse) ProtoMessage() {}

func (x *RiskLog_Entry_RelatedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskLog_Entry_RelatedResponse.ProtoReflect.Descriptor instead.
func (*RiskLog_Entry_RelatedResponse) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{28, 0, 0}
}

func (x *RiskLog_Entry_RelatedResponse) GetResponseUuid() string {
	if x != nil {
		return x.ResponseUuid
	}
	return ""
}

func (x *RiskLog_Entry_RelatedResponse) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *RiskLog_Entry_RelatedResponse) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *RiskLog_Entry_RelatedResponse) GetRelatedTasks() []*RelatedTask {
	if x != nil {
		return x.RelatedTasks
	}
	return nil
}

func (x *RiskLog_Entry_RelatedResponse) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Assessment Log Entry
// Identifies the result of an action/task during the assessment.
type AssessmentLog_Entry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Universally Unique Identifier
	Uuid string `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	// Action Title
	Title *string `protobuf:"bytes,2,opt,name=Title,proto3,oneof" json:"Title,omitempty"`
	// Action Description
	Description *string `protobuf:"bytes,3,opt,name=Description,proto3,oneof" json:"Description,omitempty"`
	// Start
	Start *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=Start,proto3" json:"Start,omitempty"`
	// End
	End *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=End,proto3,oneof" json:"End,omitempty"`
	// Properties
	Props []*Property `protobuf:"bytes,6,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	Links []*Link `protobuf:"bytes,7,rep,name=Links,proto3" json:"Links,omitempty"`
	// Logged By
	LoggedBy []*LoggedBy `protobuf:"bytes,8,rep,name=LoggedBy,proto3" json:"LoggedBy,omitempty"`
	// Related Tasks
	RelatedTasks []*RelatedTask `protobuf:"bytes,9,rep,name=RelatedTasks,proto3" json:"RelatedTasks,omitempty"`
	// Remarks
	Remarks       *string `protobuf:"bytes,10,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssessmentLog_Entry) Reset() {
	*x = AssessmentLog_Entry{}
	mi := &file_runner_proto_oscal_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssessmentLog_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssessmentLog_Entry) ProtoMessage() {}

func (x *AssessmentLog_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssessmentLog_Entry.ProtoReflect.Descriptor instead.
func (*AssessmentLog_Entry) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{31, 0}
}

func (x *AssessmentLog_Entry) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *AssessmentLog_Entry) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *AssessmentLog_Entry) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *AssessmentLog_Entry) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *AssessmentLog_Entry) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *AssessmentLog_Entry) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *AssessmentLog_Entry) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *AssessmentLog_Entry) GetLoggedBy() []*LoggedBy {
	if x != nil {
		return x.LoggedBy
	}
	return nil
}

func (x *AssessmentLog_Entry) GetRelatedTasks() []*RelatedTask {
	if x != nil {
		return x.RelatedTasks
	}
	return nil
}

func (x *AssessmentLog_Entry) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Assessed Controls
// Identifies the controls being assessed.
type ReviewedControls_ControlSelection struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Assessed Controls Description
	// A human-readable description of in-scope controls specified for
	// assessment.
	Description *string `protobuf:"bytes,1,opt,name=Description,proto3,oneof" json:"Description,omitempty"`
	// Properties
	Props []*Property `protobuf:"bytes,2,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	Links []*Link `protobuf:"bytes,3,rep,name=Links,proto3" json:"Links,omitempty"`
	// Include All
	// Specifies if all controls should be included.
	IncludeAll *IncludeAll `protobuf:"bytes,4,opt,name=IncludeAll,proto3,oneof" json:"IncludeAll,omitempty"`
	// Include Controls
	// Explicitly included controls.
	IncludeControls []*SelectControlById `protobuf:"bytes,5,rep,name=IncludeControls,proto3" json:"IncludeControls,omitempty"`
	// Exclude Controls
	// Explicitly excluded controls.
	ExcludeControls []*SelectControlById `protobuf:"bytes,6,rep,name=ExcludeControls,proto3" json:"ExcludeControls,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,7,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReviewedControls_ControlSelection) Reset() {
	*x = ReviewedControls_ControlSelection{}
	mi := &file_runner_proto_oscal_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReviewedControls_ControlSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewedControls_ControlSelection) ProtoMessage() {}

func (x *ReviewedControls_ControlSelection) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewedControls_ControlSelection.ProtoReflect.Descriptor instead.
func (*ReviewedControls_ControlSelection) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{36, 0}
}

func (x *ReviewedControls_ControlSelection) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ReviewedControls_ControlSelection) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *ReviewedControls_ControlSelection) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *ReviewedControls_ControlSelection) GetIncludeAll() *IncludeAll {
	if x != nil {
		return x.IncludeAll
	}
	return nil
}

func (x *ReviewedControls_ControlSelection) GetIncludeControls() []*SelectControlById {
	if x != nil {
		return x.IncludeControls
	}
	return nil
}

func (x *ReviewedControls_ControlSelection) GetExcludeControls() []*SelectControlById {
	if x != nil {
		return x.ExcludeControls
	}
	return nil
}

func (x *ReviewedControls_ControlSelection) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Referenced Control Objectives
// Identifies the control objectives of the assessment.
type ReviewedControls_ControlObjectiveSelection struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Control Objectives Description
	// A human-readable description of this collection of control objectives.
	Description *string `protobuf:"bytes,1,opt,name=Description,proto3,oneof" json:"Description,omitempty"`
	// Properties
	Props []*Property `protobuf:"bytes,2,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	Links []*Link `protobuf:"bytes,3,rep,name=Links,proto3" json:"Links,omitempty"`
	// Include All
	// Specifies if all objectives should be included.
	IncludeAll *IncludeAll `protobuf:"bytes,4,opt,name=IncludeAll,proto3,oneof" json:"IncludeAll,omitempty"`
	// Include Objectives
	// Explicitly included objectives.
	IncludeObjectives []*SelectObjectiveById `protobuf:"bytes,5,rep,name=IncludeObjectives,proto3" json:"IncludeObjectives,omitempty"`
	// Exclude Objectives
	// Explicitly excluded objectives.
	ExcludeObjectives []*SelectObjectiveById `protobuf:"bytes,6,rep,name=ExcludeObjectives,proto3" json:"ExcludeObjectives,omitempty"`
	// Remarks
	// Additional explanatory notes.
	Remarks       *string `protobuf:"bytes,7,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReviewedControls_ControlObjectiveSelection) Reset() {
	*x = ReviewedControls_ControlObjectiveSelection{}
	mi := &file_runner_proto_oscal_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReviewedControls_ControlObjectiveSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewedControls_ControlObjectiveSelection) ProtoMessage() {}

func (x *ReviewedControls_ControlObjectiveSelection) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewedControls_ControlObjectiveSelection.ProtoReflect.Descriptor instead.
func (*ReviewedControls_ControlObjectiveSelection) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{36, 1}
}

func (x *ReviewedControls_ControlObjectiveSelection) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ReviewedControls_ControlObjectiveSelection) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *ReviewedControls_ControlObjectiveSelection) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *ReviewedControls_ControlObjectiveSelection) GetIncludeAll() *IncludeAll {
	if x != nil {
		return x.IncludeAll
	}
	return nil
}

func (x *ReviewedControls_ControlObjectiveSelection) GetIncludeObjectives() []*SelectObjectiveById {
	if x != nil {
		return x.IncludeObjectives
	}
	return nil
}

func (x *ReviewedControls_ControlObjectiveSelection) GetExcludeObjectives() []*SelectObjectiveById {
	if x != nil {
		return x.ExcludeObjectives
	}
	return nil
}

func (x *ReviewedControls_ControlObjectiveSelection) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Implemented Component
// The set of components that are implemented in a given system inventory
// item.
type InventoryItem_ImplementedComponent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Component Universally Unique Identifier Reference
	ComponentUuid string `protobuf:"bytes,1,opt,name=ComponentUuid,proto3" json:"ComponentUuid,omitempty"`
	// Properties
	Props []*Property `protobuf:"bytes,2,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	Links []*Link `protobuf:"bytes,3,rep,name=Links,proto3" json:"Links,omitempty"`
	// Responsible Parties
	ResponsibleParties []*ResponsibleParty `protobuf:"bytes,4,rep,name=ResponsibleParties,proto3" json:"ResponsibleParties,omitempty"`
	// Remarks
	Remarks       *string `protobuf:"bytes,5,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InventoryItem_ImplementedComponent) Reset() {
	*x = InventoryItem_ImplementedComponent{}
	mi := &file_runner_proto_oscal_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InventoryItem_ImplementedComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryItem_ImplementedComponent) ProtoMessage() {}

func (x *InventoryItem_ImplementedComponent) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryItem_ImplementedComponent.ProtoReflect.Descriptor instead.
func (*InventoryItem_ImplementedComponent) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{41, 0}
}

func (x *InventoryItem_ImplementedComponent) GetComponentUuid() string {
	if x != nil {
		return x.ComponentUuid
	}
	return ""
}

func (x *InventoryItem_ImplementedComponent) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *InventoryItem_ImplementedComponent) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *InventoryItem_ImplementedComponent) GetResponsibleParties() []*ResponsibleParty {
	if x != nil {
		return x.ResponsibleParties
	}
	return nil
}

func (x *InventoryItem_ImplementedComponent) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Assessment Platform
// Represents the toolset used to perform aspects of the assessment.
type AssessmentAssets_AssessmentPlatform struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Assessment Platform Universally Unique Identifier
	Uuid string `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	// Assessment Platform Title
	Title *string `protobuf:"bytes,2,opt,name=Title,proto3,oneof" json:"Title,omitempty"`
	// Properties
	Props []*Property `protobuf:"bytes,3,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	Links          []*Link                                              `protobuf:"bytes,4,rep,name=Links,proto3" json:"Links,omitempty"`
	UsesComponents []*AssessmentAssets_AssessmentPlatform_UsesComponent `protobuf:"bytes,5,rep,name=UsesComponents,proto3" json:"UsesComponents,omitempty"`
	// Remarks
	Remarks       *string `protobuf:"bytes,6,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssessmentAssets_AssessmentPlatform) Reset() {
	*x = AssessmentAssets_AssessmentPlatform{}
	mi := &file_runner_proto_oscal_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssessmentAssets_AssessmentPlatform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssessmentAssets_AssessmentPlatform) ProtoMessage() {}

func (x *AssessmentAssets_AssessmentPlatform) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssessmentAssets_AssessmentPlatform.ProtoReflect.Descriptor instead.
func (*AssessmentAssets_AssessmentPlatform) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{45, 0}
}

func (x *AssessmentAssets_AssessmentPlatform) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *AssessmentAssets_AssessmentPlatform) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *AssessmentAssets_AssessmentPlatform) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *AssessmentAssets_AssessmentPlatform) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *AssessmentAssets_AssessmentPlatform) GetUsesComponents() []*AssessmentAssets_AssessmentPlatform_UsesComponent {
	if x != nil {
		return x.UsesComponents
	}
	return nil
}

func (x *AssessmentAssets_AssessmentPlatform) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

// Uses Component
// The set of components that are used by the assessment platform.
type AssessmentAssets_AssessmentPlatform_UsesComponent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Component Universally Unique Identifier Reference
	ComponentUuid string `protobuf:"bytes,1,opt,name=ComponentUuid,proto3" json:"ComponentUuid,omitempty"`
	// Properties
	Props []*Property `protobuf:"bytes,2,rep,name=Props,proto3" json:"Props,omitempty"`
	// Links
	Links []*Link `protobuf:"bytes,3,rep,name=Links,proto3" json:"Links,omitempty"`
	// Responsible Parties
	ResponsibleParties []*ResponsibleParty `protobuf:"bytes,4,rep,name=ResponsibleParties,proto3" json:"ResponsibleParties,omitempty"`
	// Remarks
	Remarks       *string `protobuf:"bytes,5,opt,name=Remarks,proto3,oneof" json:"Remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssessmentAssets_AssessmentPlatform_UsesComponent) Reset() {
	*x = AssessmentAssets_AssessmentPlatform_UsesComponent{}
	mi := &file_runner_proto_oscal_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssessmentAssets_AssessmentPlatform_UsesComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssessmentAssets_AssessmentPlatform_UsesComponent) ProtoMessage() {}

func (x *AssessmentAssets_AssessmentPlatform_UsesComponent) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_oscal_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssessmentAssets_AssessmentPlatform_UsesComponent.ProtoReflect.Descriptor instead.
func (*AssessmentAssets_AssessmentPlatform_UsesComponent) Descriptor() ([]byte, []int) {
	return file_runner_proto_oscal_proto_rawDescGZIP(), []int{45, 0, 0}
}

func (x *AssessmentAssets_AssessmentPlatform_UsesComponent) GetComponentUuid() string {
	if x != nil {
		return x.ComponentUuid
	}
	return ""
}

func (x *AssessmentAssets_AssessmentPlatform_UsesComponent) GetProps() []*Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *AssessmentAssets_AssessmentPlatform_UsesComponent) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *AssessmentAssets_AssessmentPlatform_UsesComponent) GetResponsibleParties() []*ResponsibleParty {
	if x != nil {
		return x.ResponsibleParties
	}
	return nil
}

func (x *AssessmentAssets_AssessmentPlatform_UsesComponent) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

var File_runner_proto_oscal_proto protoreflect.FileDescriptor

var file_runner_proto_oscal_proto_rawDesc = string([]byte{
	0x0a, 0x18, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f,
	0x73, 0x63, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xe7, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x4e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x02, 0x4e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x55, 0x75, 0x69, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x4e, 0x73, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0xeb, 0x01, 0x0a,
	0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x72, 0x65, 0x66, 0x12, 0x2e, 0x0a, 0x03, 0x52, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x48,
	0x00, 0x52, 0x03, 0x52, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x10, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x54,
	0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x52, 0x65, 0x6c, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x54, 0x65, 0x78, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x0b, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x05, 0x50,
	0x72, 0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x50, 0x72, 0x6f,
	0x70, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64,
	0x22, 0xd2, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x25, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x52, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x0c, 0x0a, 0x0a, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x41, 0x6c, 0x6c, 0x22, 0xb6, 0x03, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x25, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12,
	0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6c, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x48, 0x01, 0x52, 0x0a, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0f, 0x49, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x0f, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x42,
	0x0a, 0x0f, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x0f, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01,
	0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6c, 0x6c,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x81, 0x01, 0x0a,
	0x11, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x22, 0xbf, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x50, 0x61, 0x72, 0x74, 0x79, 0x55, 0x75, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x74, 0x79, 0x55, 0x75, 0x69, 0x64, 0x73, 0x12, 0x25, 0x0a,
	0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x50,
	0x72, 0x6f, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x22, 0x80, 0x03, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25,
	0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05,
	0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x47, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x12, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x34, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x11, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x11,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x6c, 0x0a, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12,
	0x2a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x06, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x22, 0x79, 0x0a, 0x14, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x7a,
	0x0a, 0x0f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x9b, 0x04, 0x0a, 0x0d, 0x46,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52,
	0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x54, 0x0a, 0x14, 0x49, 0x6d, 0x70,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x48, 0x02, 0x52, 0x14, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x22, 0x49,
	0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13,
	0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x3e, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x0f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x22, 0x29, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x55,
	0x75, 0x69, 0x64, 0x22, 0xcb, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74,
	0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x48, 0x72, 0x65, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x48, 0x72, 0x65, 0x66, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1d, 0x0a,
	0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x48, 0x72, 0x65, 0x66, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x22, 0xf6, 0x01, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x05, 0x50,
	0x72, 0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x50, 0x72, 0x6f,
	0x70, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x8d, 0x04, 0x0a, 0x07, 0x46,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x27, 0x0a, 0x07,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x07, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x45, 0x0a, 0x1b, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x1b, 0x49, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x13, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x13, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x69, 0x73,
	0x6b, 0x52, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x12,
	0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x42, 0x1e,
	0x0a, 0x1c, 0x5f, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0xe3, 0x04, 0x0a, 0x0b, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x05, 0x50,
	0x72, 0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x50, 0x72, 0x6f,
	0x70, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x52, 0x07, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x05, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x07, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73,
	0x12, 0x33, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e,
	0x74, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74,
	0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61,
	0x6e, 0x74, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x01, 0x52, 0x07, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x22, 0x54, 0x0a, 0x08, 0x54, 0x68, 0x72, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x04, 0x48, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x48, 0x72, 0x65, 0x66, 0x88, 0x01, 0x01, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x48, 0x72, 0x65, 0x66, 0x22, 0xbe, 0x01, 0x0a, 0x05, 0x46, 0x61, 0x63, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x07,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x05,
	0x50, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x50, 0x72,
	0x6f, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52,
	0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x24, 0x0a,
	0x06, 0x46, 0x61, 0x63, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x74, 0x52, 0x06, 0x46, 0x61, 0x63,
	0x65, 0x74, 0x73, 0x22, 0x93, 0x02, 0x0a, 0x10, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x12,
	0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x12, 0x49, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x33, 0x0a,
	0x08, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x22, 0x94, 0x02, 0x0a, 0x0d, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x33, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x25, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x22, 0xb9, 0x04, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x12, 0x37, 0x0a, 0x06, 0x4f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x06,
	0x4f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0f, 0x57, 0x69, 0x74,
	0x68, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x48, 0x01, 0x52, 0x0f, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0b, 0x41, 0x74, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x02, 0x52, 0x0b, 0x41, 0x74, 0x46,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x1a, 0x6b, 0x0a, 0x09, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x45, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x03, 0x45, 0x6e, 0x64, 0x1a, 0xc2, 0x01, 0x0a, 0x09, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x39,
	0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x22, 0x62, 0x0a, 0x08, 0x54, 0x69, 0x6d,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x43, 0x4f, 0x4e,
	0x44, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x53, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x4f, 0x55, 0x52, 0x53, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04,
	0x44, 0x41, 0x59, 0x53, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x53,
	0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x59, 0x45, 0x41, 0x52, 0x53, 0x10, 0x06, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x4f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x57, 0x69, 0x74,
	0x68, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x41, 0x74, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xbe, 0x01, 0x0a,
	0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12,
	0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x74, 0x79, 0x55, 0x75, 0x69, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x74, 0x79, 0x55, 0x75, 0x69,
	0x64, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01,
	0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0xf1, 0x07,
	0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x05,
	0x50, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x50, 0x72,
	0x6f, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52,
	0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48, 0x01, 0x52, 0x06, 0x54, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0c, 0x44, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x44, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x52, 0x0a, 0x14, 0x41, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x14, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x34,
	0x0a, 0x08, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x57, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73,
	0x6b, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73,
	0x6b, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x1a, 0xa7, 0x02, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x50,
	0x72, 0x6f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x50, 0x72, 0x6f,
	0x70, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12,
	0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x54,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x22, 0x85, 0x03, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69,
	0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x09, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x05, 0x50, 0x72,
	0x6f, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x70,
	0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x4c,
	0x69, 0x6e, 0x6b, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x52, 0x07, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x3c, 0x0a,
	0x0e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x0e, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1d,
	0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0xc6, 0x06, 0x0a, 0x07, 0x52, 0x69,
	0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x12, 0x2e, 0x0a, 0x07, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x69, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x8a, 0x06, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x02, 0x52, 0x03, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x05, 0x50, 0x72,
	0x6f, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x70,
	0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x4c,
	0x69, 0x6e, 0x6b, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x42, 0x79,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x6f, 0x67, 0x67, 0x65, 0x64, 0x42, 0x79, 0x52, 0x08, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x3a, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x03, 0x52, 0x0c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a,
	0x10, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x69, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x10, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12,
	0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x1a, 0xe2,
	0x01, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x21, 0x0a,
	0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73,
	0x12, 0x36, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0c, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x45, 0x6e, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x22, 0x50, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x50, 0x61, 0x72, 0x74, 0x79, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x50, 0x61, 0x72, 0x74, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x06,
	0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06,
	0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x52, 0x6f,
	0x6c, 0x65, 0x49, 0x64, 0x22, 0xd2, 0x05, 0x0a, 0x04, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x12, 0x0a,
	0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x21,
	0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b,
	0x73, 0x12, 0x29, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x07,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x07, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x54, 0x68, 0x72, 0x65, 0x61, 0x74, 0x49,
	0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x74, 0x49, 0x64, 0x52, 0x09, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x74, 0x49, 0x64, 0x73, 0x12, 0x45, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x11, 0x4d,
	0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x11, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x00, 0x52, 0x08, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x69,
	0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x48, 0x01, 0x52, 0x07, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x6f, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x22, 0x86, 0x04, 0x0a, 0x0d, 0x41, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x34, 0x0a, 0x07, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x1a, 0xbe, 0x03, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x19, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x03,
	0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x21, 0x0a,
	0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73,
	0x12, 0x2b, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x42, 0x79, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65,
	0x64, 0x42, 0x79, 0x52, 0x08, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x42, 0x79, 0x12, 0x36, 0x0a,
	0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x45, 0x6e, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x22, 0xb1, 0x03, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x32,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x4e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x02, 0x4e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x50,
	0x72, 0x6f, 0x70, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x73, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x52, 0x05, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x05,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x22,
	0x47, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x50,
	0x41, 0x52, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x53, 0x53, 0x45, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x55, 0x75, 0x69,
	0x64, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x4e, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x50, 0x72, 0x6f, 0x73, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x0b, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x12, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x2b, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x52, 0x05, 0x50, 0x61, 0x72, 0x74, 0x73, 0x22, 0x55, 0x0a, 0x11,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x79, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x22, 0x37, 0x0a, 0x13, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x64, 0x22, 0xbe, 0x09, 0x0a,
	0x10, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x73, 0x12, 0x25, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12,
	0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x12, 0x56, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x71, 0x0a, 0x1a, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x1a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a,
	0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x8d, 0x03, 0x0a,
	0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x25, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12,
	0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6c, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x48, 0x01, 0x52, 0x0a, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0f, 0x49, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x52, 0x0f, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12, 0x42,
	0x0a, 0x0f, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x0f, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01,
	0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6c, 0x6c,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x1a, 0xa2, 0x03, 0x0a,
	0x19, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41,
	0x6c, 0x6c, 0x48, 0x01, 0x52, 0x0a, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6c, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x11, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x11, 0x49, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x48, 0x0a,
	0x11, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x11, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x49, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x41, 0x6c, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x57, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x63, 0x0a, 0x09, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x45, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x97, 0x01, 0x0a, 0x08,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x17, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x30, 0x0a, 0x0a, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x55, 0x75, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xa0, 0x07, 0x0a, 0x0f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12, 0x38, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x07, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05,
	0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x42, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f,
	0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f,
	0x6c, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01,
	0x01, 0x22, 0xcc, 0x03, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x48, 0x49, 0x53, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f,
	0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x1b,
	0x0a, 0x17, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x43,
	0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41,
	0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x07, 0x12,
	0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x08, 0x12, 0x24, 0x0a, 0x20,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x44, 0x55, 0x52, 0x45,
	0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x43,
	0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x55,
	0x49, 0x44, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44,
	0x41, 0x52, 0x44, 0x10, 0x0c, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x0e,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0xe1, 0x04, 0x0a, 0x0d, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x52, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x47, 0x0a, 0x12, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52,
	0x12, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x15, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x15, 0x49,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x88, 0x01, 0x01, 0x1a, 0xfa, 0x01, 0x0a, 0x14, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x47, 0x0a, 0x12,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x52, 0x12, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x27, 0x0a, 0x11,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x12, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64,
	0x52, 0x12, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8c, 0x03, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x05,
	0x50, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x50, 0x72,
	0x6f, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52,
	0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73,
	0x12, 0x4e, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72,
	0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x52, 0x14, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x22, 0xc5, 0x05, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x5c, 0x0a, 0x13, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x13, 0x41, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x1a, 0x9a,
	0x04, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c,
	0x69, 0x6e, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x60,
	0x0a, 0x0e, 0x55, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x52, 0x0e, 0x55, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x1a,
	0xf3, 0x01, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x21,
	0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b,
	0x73, 0x12, 0x47, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x12, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0xb3, 0x02, 0x0a, 0x10,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x36, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12,
	0x48, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x48, 0x00, 0x52, 0x10, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x05, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x22, 0xf6, 0x05, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52,
	0x03, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x21,
	0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b,
	0x73, 0x12, 0x48, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01, 0x52, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x10, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x52, 0x10,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73,
	0x12, 0x36, 0x0a, 0x0c, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x41, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x48, 0x02, 0x52, 0x0d, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0c, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x21, 0x0a, 0x05, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x05, 0x52,
	0x69, 0x73, 0x6b, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x45, 0x6e, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x2a, 0x52, 0x0a, 0x10, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1d,
	0x0a, 0x19, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x48, 0x49, 0x50, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1f, 0x0a,
	0x1b, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x48,
	0x49, 0x50, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x2a, 0x72,
	0x0a, 0x09, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x41,
	0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x43, 0x54, 0x4f,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59,
	0x10, 0x03, 0x2a, 0xc9, 0x01, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16,
	0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x55, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x55, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11,
	0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x06, 0x2a, 0xa0,
	0x02, 0x0a, 0x19, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x23,
	0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x49,
	0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x4e,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x2b, 0x0a, 0x27, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x04, 0x12, 0x2e, 0x0a, 0x2a, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x05, 0x2a, 0x92, 0x01, 0x0a, 0x11, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x42, 0x53, 0x45, 0x52,
	0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x42, 0x53, 0x45, 0x52,
	0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x45, 0x58,
	0x41, 0x4d, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x42, 0x53, 0x45, 0x52,
	0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x56, 0x49, 0x45, 0x57, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x42, 0x53,
	0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f,
	0x54, 0x45, 0x53, 0x54, 0x10, 0x03, 0x2a, 0xdf, 0x01, 0x0a, 0x0f, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x42,
	0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x4f, 0x42, 0x53, 0x45,
	0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x53, 0x50,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45,
	0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x4f,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x42,
	0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x4f,
	0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x42, 0x53,
	0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x49,
	0x53, 0x54, 0x4f, 0x52, 0x49, 0x43, 0x10, 0x05, 0x2a, 0xd8, 0x01, 0x0a, 0x0a, 0x52, 0x69, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x49, 0x53, 0x4b, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x49, 0x47, 0x41, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x49, 0x53, 0x4b, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x52,
	0x49, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x44, 0x10, 0x06, 0x2a, 0x50, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x15, 0x0a, 0x11, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4c, 0x45, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x02, 0x2a, 0x70, 0x0a, 0x09, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x49, 0x46,
	0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x49, 0x46, 0x45, 0x43,
	0x59, 0x43, 0x4c, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x17,
	0x0a, 0x13, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x76, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x44,
	0x45, 0x52, 0x5f, 0x44, 0x45, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x04, 0x2a,
	0x48, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x15, 0x0a, 0x11,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x54, 0x43, 0x50, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x55, 0x44, 0x50, 0x10, 0x02, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_runner_proto_oscal_proto_rawDescOnce sync.Once
	file_runner_proto_oscal_proto_rawDescData []byte
)

func file_runner_proto_oscal_proto_rawDescGZIP() []byte {
	file_runner_proto_oscal_proto_rawDescOnce.Do(func() {
		file_runner_proto_oscal_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_runner_proto_oscal_proto_rawDesc), len(file_runner_proto_oscal_proto_rawDesc)))
	})
	return file_runner_proto_oscal_proto_rawDescData
}

var file_runner_proto_oscal_proto_enumTypes = make([]protoimpl.EnumInfo, 15)
var file_runner_proto_oscal_proto_msgTypes = make([]protoimpl.MessageInfo, 60)
var file_runner_proto_oscal_proto_goTypes = []any{
	(LinkRelationship)(0),                              // 0: proto.LinkRelationship
	(ActorType)(0),                                     // 1: proto.ActorType
	(SubjectType)(0),                                   // 2: proto.SubjectType
	(ImplementationStatusState)(0),                     // 3: proto.ImplementationStatusState
	(ObservationMethod)(0),                             // 4: proto.ObservationMethod
	(ObservationType)(0),                               // 5: proto.ObservationType
	(RiskStatus)(0),                                    // 6: proto.RiskStatus
	(TaskType)(0),                                      // 7: proto.TaskType
	(Lifecycle)(0),                                     // 8: proto.Lifecycle
	(State)(0),                                         // 9: proto.State
	(Transport)(0),                                     // 10: proto.Transport
	(FindingTarget_TargetType)(0),                      // 11: proto.FindingTarget.TargetType
	(EventTiming_Frequency_TimeUnit)(0),                // 12: proto.EventTiming.Frequency.TimeUnit
	(AssessmentPart_PartName)(0),                       // 13: proto.AssessmentPart.PartName
	(SystemComponent_ComponentType)(0),                 // 14: proto.SystemComponent.ComponentType
	(*Property)(nil),                                   // 15: proto.Property
	(*Link)(nil),                                       // 16: proto.Link
	(*OriginActor)(nil),                                // 17: proto.OriginActor
	(*SelectSubjectById)(nil),                          // 18: proto.SelectSubjectById
	(*IncludeAll)(nil),                                 // 19: proto.IncludeAll
	(*AssessmentSubject)(nil),                          // 20: proto.AssessmentSubject
	(*IdentifiedSubject)(nil),                          // 21: proto.IdentifiedSubject
	(*ResponsibleParty)(nil),                           // 22: proto.ResponsibleParty
	(*RelatedTask)(nil),                                // 23: proto.RelatedTask
	(*Origin)(nil),                                     // 24: proto.Origin
	(*ImplementationStatus)(nil),                       // 25: proto.ImplementationStatus
	(*ObjectiveStatus)(nil),                            // 26: proto.ObjectiveStatus
	(*FindingTarget)(nil),                              // 27: proto.FindingTarget
	(*RelatedObservation)(nil),                         // 28: proto.RelatedObservation
	(*RelatedRisk)(nil),                                // 29: proto.RelatedRisk
	(*RelevantEvidence)(nil),                           // 30: proto.RelevantEvidence
	(*SubjectReference)(nil),                           // 31: proto.SubjectReference
	(*Finding)(nil),                                    // 32: proto.Finding
	(*Observation)(nil),                                // 33: proto.Observation
	(*ThreatId)(nil),                                   // 34: proto.ThreatId
	(*Facet)(nil),                                      // 35: proto.Facet
	(*Characterization)(nil),                           // 36: proto.Characterization
	(*MitigatingFactor)(nil),                           // 37: proto.MitigatingFactor
	(*RequiredAsset)(nil),                              // 38: proto.RequiredAsset
	(*EventTiming)(nil),                                // 39: proto.EventTiming
	(*ResponsibleRole)(nil),                            // 40: proto.ResponsibleRole
	(*Task)(nil),                                       // 41: proto.Task
	(*Response)(nil),                                   // 42: proto.Response
	(*RiskLog)(nil),                                    // 43: proto.RiskLog
	(*LoggedBy)(nil),                                   // 44: proto.LoggedBy
	(*Risk)(nil),                                       // 45: proto.Risk
	(*AssessmentLog)(nil),                              // 46: proto.AssessmentLog
	(*AssessmentPart)(nil),                             // 47: proto.AssessmentPart
	(*Attestation)(nil),                                // 48: proto.Attestation
	(*SelectControlById)(nil),                          // 49: proto.SelectControlById
	(*SelectObjectiveById)(nil),                        // 50: proto.SelectObjectiveById
	(*ReviewedControls)(nil),                           // 51: proto.ReviewedControls
	(*Status)(nil),                                     // 52: proto.Status
	(*PortRange)(nil),                                  // 53: proto.PortRange
	(*Protocol)(nil),                                   // 54: proto.Protocol
	(*SystemComponent)(nil),                            // 55: proto.SystemComponent
	(*InventoryItem)(nil),                              // 56: proto.InventoryItem
	(*FunctionPerformed)(nil),                          // 57: proto.FunctionPerformed
	(*AuthorizedPrivilege)(nil),                        // 58: proto.AuthorizedPrivilege
	(*SystemUser)(nil),                                 // 59: proto.SystemUser
	(*AssessmentAssets)(nil),                           // 60: proto.AssessmentAssets
	(*LocalDefinitions)(nil),                           // 61: proto.LocalDefinitions
	(*AssessmentResult)(nil),                           // 62: proto.AssessmentResult
	(*EventTiming_DateRange)(nil),                      // 63: proto.EventTiming.DateRange
	(*EventTiming_Frequency)(nil),                      // 64: proto.EventTiming.Frequency
	(*Task_TaskDependency)(nil),                        // 65: proto.Task.TaskDependency
	(*Task_AssociatedActivity)(nil),                    // 66: proto.Task.AssociatedActivity
	(*RiskLog_Entry)(nil),                              // 67: proto.RiskLog.Entry
	(*RiskLog_Entry_RelatedResponse)(nil),              // 68: proto.RiskLog.Entry.RelatedResponse
	(*AssessmentLog_Entry)(nil),                        // 69: proto.AssessmentLog.Entry
	(*ReviewedControls_ControlSelection)(nil),          // 70: proto.ReviewedControls.ControlSelection
	(*ReviewedControls_ControlObjectiveSelection)(nil), // 71: proto.ReviewedControls.ControlObjectiveSelection
	(*InventoryItem_ImplementedComponent)(nil),         // 72: proto.InventoryItem.ImplementedComponent
	(*AssessmentAssets_AssessmentPlatform)(nil),        // 73: proto.AssessmentAssets.AssessmentPlatform
	(*AssessmentAssets_AssessmentPlatform_UsesComponent)(nil), // 74: proto.AssessmentAssets.AssessmentPlatform.UsesComponent
	(*timestamppb.Timestamp)(nil),                             // 75: google.protobuf.Timestamp
}
var file_runner_proto_oscal_proto_depIdxs = []int32{
	0,   // 0: proto.Link.Rel:type_name -> proto.LinkRelationship
	1,   // 1: proto.OriginActor.Type:type_name -> proto.ActorType
	15,  // 2: proto.OriginActor.Props:type_name -> proto.Property
	16,  // 3: proto.OriginActor.Links:type_name -> proto.Link
	2,   // 4: proto.SelectSubjectById.Type:type_name -> proto.SubjectType
	15,  // 5: proto.SelectSubjectById.Props:type_name -> proto.Property
	16,  // 6: proto.SelectSubjectById.Links:type_name -> proto.Link
	2,   // 7: proto.AssessmentSubject.Type:type_name -> proto.SubjectType
	15,  // 8: proto.AssessmentSubject.Props:type_name -> proto.Property
	16,  // 9: proto.AssessmentSubject.Links:type_name -> proto.Link
	19,  // 10: proto.AssessmentSubject.IncludeAll:type_name -> proto.IncludeAll
	18,  // 11: proto.AssessmentSubject.IncludeSubjects:type_name -> proto.SelectSubjectById
	18,  // 12: proto.AssessmentSubject.ExcludeSubjects:type_name -> proto.SelectSubjectById
	20,  // 13: proto.IdentifiedSubject.Subjects:type_name -> proto.AssessmentSubject
	15,  // 14: proto.ResponsibleParty.Props:type_name -> proto.Property
	16,  // 15: proto.ResponsibleParty.Links:type_name -> proto.Link
	15,  // 16: proto.RelatedTask.Props:type_name -> proto.Property
	16,  // 17: proto.RelatedTask.Links:type_name -> proto.Link
	22,  // 18: proto.RelatedTask.ResponsibleParties:type_name -> proto.ResponsibleParty
	20,  // 19: proto.RelatedTask.Subjects:type_name -> proto.AssessmentSubject
	21,  // 20: proto.RelatedTask.IdentifiedSubject:type_name -> proto.IdentifiedSubject
	17,  // 21: proto.Origin.Actors:type_name -> proto.OriginActor
	23,  // 22: proto.Origin.RelatedTasks:type_name -> proto.RelatedTask
	3,   // 23: proto.ImplementationStatus.State:type_name -> proto.ImplementationStatusState
	11,  // 24: proto.FindingTarget.Type:type_name -> proto.FindingTarget.TargetType
	15,  // 25: proto.FindingTarget.Props:type_name -> proto.Property
	16,  // 26: proto.FindingTarget.Links:type_name -> proto.Link
	26,  // 27: proto.FindingTarget.Status:type_name -> proto.ObjectiveStatus
	25,  // 28: proto.FindingTarget.ImplementationStatus:type_name -> proto.ImplementationStatus
	15,  // 29: proto.RelevantEvidence.Props:type_name -> proto.Property
	16,  // 30: proto.RelevantEvidence.Links:type_name -> proto.Link
	2,   // 31: proto.SubjectReference.Type:type_name -> proto.SubjectType
	15,  // 32: proto.SubjectReference.Props:type_name -> proto.Property
	16,  // 33: proto.SubjectReference.Links:type_name -> proto.Link
	15,  // 34: proto.Finding.Props:type_name -> proto.Property
	16,  // 35: proto.Finding.Links:type_name -> proto.Link
	24,  // 36: proto.Finding.Origins:type_name -> proto.Origin
	27,  // 37: proto.Finding.Target:type_name -> proto.FindingTarget
	28,  // 38: proto.Finding.RelatedObservations:type_name -> proto.RelatedObservation
	29,  // 39: proto.Finding.RelatedRisks:type_name -> proto.RelatedRisk
	15,  // 40: proto.Observation.Props:type_name -> proto.Property
	16,  // 41: proto.Observation.Links:type_name -> proto.Link
	4,   // 42: proto.Observation.Methods:type_name -> proto.ObservationMethod
	5,   // 43: proto.Observation.Types:type_name -> proto.ObservationType
	24,  // 44: proto.Observation.Origins:type_name -> proto.Origin
	31,  // 45: proto.Observation.Subjects:type_name -> proto.SubjectReference
	30,  // 46: proto.Observation.RelevantEvidence:type_name -> proto.RelevantEvidence
	75,  // 47: proto.Observation.Collected:type_name -> google.protobuf.Timestamp
	75,  // 48: proto.Observation.Expires:type_name -> google.protobuf.Timestamp
	15,  // 49: proto.Facet.Props:type_name -> proto.Property
	16,  // 50: proto.Facet.Links:type_name -> proto.Link
	15,  // 51: proto.Characterization.Props:type_name -> proto.Property
	16,  // 52: proto.Characterization.Links:type_name -> proto.Link
	24,  // 53: proto.Characterization.Origin:type_name -> proto.Origin
	35,  // 54: proto.Characterization.Facets:type_name -> proto.Facet
	15,  // 55: proto.MitigatingFactor.Props:type_name -> proto.Property
	16,  // 56: proto.MitigatingFactor.Links:type_name -> proto.Link
	31,  // 57: proto.MitigatingFactor.Subjects:type_name -> proto.SubjectReference
	31,  // 58: proto.RequiredAsset.Subjects:type_name -> proto.SubjectReference
	15,  // 59: proto.RequiredAsset.Props:type_name -> proto.Property
	16,  // 60: proto.RequiredAsset.Links:type_name -> proto.Link
	75,  // 61: proto.EventTiming.OnDate:type_name -> google.protobuf.Timestamp
	63,  // 62: proto.EventTiming.WithinDateRange:type_name -> proto.EventTiming.DateRange
	64,  // 63: proto.EventTiming.AtFrequency:type_name -> proto.EventTiming.Frequency
	15,  // 64: proto.ResponsibleRole.Props:type_name -> proto.Property
	16,  // 65: proto.ResponsibleRole.Links:type_name -> proto.Link
	7,   // 66: proto.Task.Type:type_name -> proto.TaskType
	15,  // 67: proto.Task.Props:type_name -> proto.Property
	16,  // 68: proto.Task.Links:type_name -> proto.Link
	39,  // 69: proto.Task.Timing:type_name -> proto.EventTiming
	65,  // 70: proto.Task.Dependencies:type_name -> proto.Task.TaskDependency
	41,  // 71: proto.Task.Tasks:type_name -> proto.Task
	66,  // 72: proto.Task.AssociatedActivities:type_name -> proto.Task.AssociatedActivity
	20,  // 73: proto.Task.Subjects:type_name -> proto.AssessmentSubject
	40,  // 74: proto.Task.ResponsibleRoles:type_name -> proto.ResponsibleRole
	8,   // 75: proto.Response.Lifecycle:type_name -> proto.Lifecycle
	15,  // 76: proto.Response.Props:type_name -> proto.Property
	16,  // 77: proto.Response.Links:type_name -> proto.Link
	24,  // 78: proto.Response.Origins:type_name -> proto.Origin
	38,  // 79: proto.Response.RequiredAssets:type_name -> proto.RequiredAsset
	41,  // 80: proto.Response.Tasks:type_name -> proto.Task
	67,  // 81: proto.RiskLog.Entries:type_name -> proto.RiskLog.Entry
	15,  // 82: proto.Risk.Props:type_name -> proto.Property
	16,  // 83: proto.Risk.Links:type_name -> proto.Link
	6,   // 84: proto.Risk.Status:type_name -> proto.RiskStatus
	24,  // 85: proto.Risk.Origins:type_name -> proto.Origin
	34,  // 86: proto.Risk.ThreatIds:type_name -> proto.ThreatId
	36,  // 87: proto.Risk.Characterizations:type_name -> proto.Characterization
	37,  // 88: proto.Risk.MitigatingFactors:type_name -> proto.MitigatingFactor
	75,  // 89: proto.Risk.Deadline:type_name -> google.protobuf.Timestamp
	42,  // 90: proto.Risk.Remediations:type_name -> proto.Response
	43,  // 91: proto.Risk.RiskLog:type_name -> proto.RiskLog
	28,  // 92: proto.Risk.RelatedObservations:type_name -> proto.RelatedObservation
	69,  // 93: proto.AssessmentLog.Entries:type_name -> proto.AssessmentLog.Entry
	13,  // 94: proto.AssessmentPart.Name:type_name -> proto.AssessmentPart.PartName
	15,  // 95: proto.AssessmentPart.Props:type_name -> proto.Property
	47,  // 96: proto.AssessmentPart.Parts:type_name -> proto.AssessmentPart
	16,  // 97: proto.AssessmentPart.Links:type_name -> proto.Link
	22,  // 98: proto.Attestation.ResponsibleParties:type_name -> proto.ResponsibleParty
	47,  // 99: proto.Attestation.Parts:type_name -> proto.AssessmentPart
	15,  // 100: proto.ReviewedControls.Props:type_name -> proto.Property
	16,  // 101: proto.ReviewedControls.Links:type_name -> proto.Link
	70,  // 102: proto.ReviewedControls.ControlSelections:type_name -> proto.ReviewedControls.ControlSelection
	71,  // 103: proto.ReviewedControls.ControlObjectiveSelections:type_name -> proto.ReviewedControls.ControlObjectiveSelection
	9,   // 104: proto.Status.State:type_name -> proto.State
	10,  // 105: proto.PortRange.Transport:type_name -> proto.Transport
	53,  // 106: proto.Protocol.PortRanges:type_name -> proto.PortRange
	14,  // 107: proto.SystemComponent.Type:type_name -> proto.SystemComponent.ComponentType
	15,  // 108: proto.SystemComponent.Props:type_name -> proto.Property
	16,  // 109: proto.SystemComponent.Links:type_name -> proto.Link
	52,  // 110: proto.SystemComponent.Status:type_name -> proto.Status
	40,  // 111: proto.SystemComponent.ResponsibleRoles:type_name -> proto.ResponsibleRole
	54,  // 112: proto.SystemComponent.Protocols:type_name -> proto.Protocol
	15,  // 113: proto.InventoryItem.Props:type_name -> proto.Property
	16,  // 114: proto.InventoryItem.Links:type_name -> proto.Link
	22,  // 115: proto.InventoryItem.ResponsibleParties:type_name -> proto.ResponsibleParty
	72,  // 116: proto.InventoryItem.ImplementedComponents:type_name -> proto.InventoryItem.ImplementedComponent
	57,  // 117: proto.AuthorizedPrivilege.FunctionsPerformed:type_name -> proto.FunctionPerformed
	15,  // 118: proto.SystemUser.Props:type_name -> proto.Property
	16,  // 119: proto.SystemUser.Links:type_name -> proto.Link
	58,  // 120: proto.SystemUser.AuthorizedPrivileges:type_name -> proto.AuthorizedPrivilege
	55,  // 121: proto.AssessmentAssets.Components:type_name -> proto.SystemComponent
	73,  // 122: proto.AssessmentAssets.AssessmentPlatforms:type_name -> proto.AssessmentAssets.AssessmentPlatform
	55,  // 123: proto.LocalDefinitions.Components:type_name -> proto.SystemComponent
	56,  // 124: proto.LocalDefinitions.InventoryItems:type_name -> proto.InventoryItem
	59,  // 125: proto.LocalDefinitions.Users:type_name -> proto.SystemUser
	60,  // 126: proto.LocalDefinitions.AssessmentAssets:type_name -> proto.AssessmentAssets
	41,  // 127: proto.LocalDefinitions.Tasks:type_name -> proto.Task
	75,  // 128: proto.AssessmentResult.Start:type_name -> google.protobuf.Timestamp
	75,  // 129: proto.AssessmentResult.End:type_name -> google.protobuf.Timestamp
	15,  // 130: proto.AssessmentResult.Props:type_name -> proto.Property
	16,  // 131: proto.AssessmentResult.Links:type_name -> proto.Link
	61,  // 132: proto.AssessmentResult.LocalDefinitions:type_name -> proto.LocalDefinitions
	51,  // 133: proto.AssessmentResult.ReviewedControls:type_name -> proto.ReviewedControls
	48,  // 134: proto.AssessmentResult.Attestations:type_name -> proto.Attestation
	46,  // 135: proto.AssessmentResult.AssessmentLog:type_name -> proto.AssessmentLog
	33,  // 136: proto.AssessmentResult.Observations:type_name -> proto.Observation
	45,  // 137: proto.AssessmentResult.Risks:type_name -> proto.Risk
	32,  // 138: proto.AssessmentResult.Findings:type_name -> proto.Finding
	75,  // 139: proto.EventTiming.DateRange.Start:type_name -> google.protobuf.Timestamp
	75,  // 140: proto.EventTiming.DateRange.End:type_name -> google.protobuf.Timestamp
	12,  // 141: proto.EventTiming.Frequency.Unit:type_name -> proto.EventTiming.Frequency.TimeUnit
	15,  // 142: proto.Task.AssociatedActivity.Props:type_name -> proto.Property
	16,  // 143: proto.Task.AssociatedActivity.Links:type_name -> proto.Link
	40,  // 144: proto.Task.AssociatedActivity.ResponsibleRoles:type_name -> proto.ResponsibleRole
	20,  // 145: proto.Task.AssociatedActivity.Subjects:type_name -> proto.AssessmentSubject
	75,  // 146: proto.RiskLog.Entry.Start:type_name -> google.protobuf.Timestamp
	75,  // 147: proto.RiskLog.Entry.End:type_name -> google.protobuf.Timestamp
	15,  // 148: proto.RiskLog.Entry.Props:type_name -> proto.Property
	16,  // 149: proto.RiskLog.Entry.Links:type_name -> proto.Link
	44,  // 150: proto.RiskLog.Entry.LoggedBy:type_name -> proto.LoggedBy
	6,   // 151: proto.RiskLog.Entry.StatusChange:type_name -> proto.RiskStatus
	68,  // 152: proto.RiskLog.Entry.RelatedResponses:type_name -> proto.RiskLog.Entry.RelatedResponse
	15,  // 153: proto.RiskLog.Entry.RelatedResponse.Props:type_name -> proto.Property
	16,  // 154: proto.RiskLog.Entry.RelatedResponse.Links:type_name -> proto.Link
	23,  // 155: proto.RiskLog.Entry.RelatedResponse.RelatedTasks:type_name -> proto.RelatedTask
	75,  // 156: proto.AssessmentLog.Entry.Start:type_name -> google.protobuf.Timestamp
	75,  // 157: proto.AssessmentLog.Entry.End:type_name -> google.protobuf.Timestamp
	15,  // 158: proto.AssessmentLog.Entry.Props:type_name -> proto.Property
	16,  // 159: proto.AssessmentLog.Entry.Links:type_name -> proto.Link
	44,  // 160: proto.AssessmentLog.Entry.LoggedBy:type_name -> proto.LoggedBy
	23,  // 161: proto.AssessmentLog.Entry.RelatedTasks:type_name -> proto.RelatedTask
	15,  // 162: proto.ReviewedControls.ControlSelection.Props:type_name -> proto.Property
	16,  // 163: proto.ReviewedControls.ControlSelection.Links:type_name -> proto.Link
	19,  // 164: proto.ReviewedControls.ControlSelection.IncludeAll:type_name -> proto.IncludeAll
	49,  // 165: proto.ReviewedControls.ControlSelection.IncludeControls:type_name -> proto.SelectControlById
	49,  // 166: proto.ReviewedControls.ControlSelection.ExcludeControls:type_name -> proto.SelectControlById
	15,  // 167: proto.ReviewedControls.ControlObjectiveSelection.Props:type_name -> proto.Property
	16,  // 168: proto.ReviewedControls.ControlObjectiveSelection.Links:type_name -> proto.Link
	19,  // 169: proto.ReviewedControls.ControlObjectiveSelection.IncludeAll:type_name -> proto.IncludeAll
	50,  // 170: proto.ReviewedControls.ControlObjectiveSelection.IncludeObjectives:type_name -> proto.SelectObjectiveById
	50,  // 171: proto.ReviewedControls.ControlObjectiveSelection.ExcludeObjectives:type_name -> proto.SelectObjectiveById
	15,  // 172: proto.InventoryItem.ImplementedComponent.Props:type_name -> proto.Property
	16,  // 173: proto.InventoryItem.ImplementedComponent.Links:type_name -> proto.Link
	22,  // 174: proto.InventoryItem.ImplementedComponent.ResponsibleParties:type_name -> proto.ResponsibleParty
	15,  // 175: proto.AssessmentAssets.AssessmentPlatform.Props:type_name -> proto.Property
	16,  // 176: proto.AssessmentAssets.AssessmentPlatform.Links:type_name -> proto.Link
	74,  // 177: proto.AssessmentAssets.AssessmentPlatform.UsesComponents:type_name -> proto.AssessmentAssets.AssessmentPlatform.UsesComponent
	15,  // 178: proto.AssessmentAssets.AssessmentPlatform.UsesComponent.Props:type_name -> proto.Property
	16,  // 179: proto.AssessmentAssets.AssessmentPlatform.UsesComponent.Links:type_name -> proto.Link
	22,  // 180: proto.AssessmentAssets.AssessmentPlatform.UsesComponent.ResponsibleParties:type_name -> proto.ResponsibleParty
	181, // [181:181] is the sub-list for method output_type
	181, // [181:181] is the sub-list for method input_type
	181, // [181:181] is the sub-list for extension type_name
	181, // [181:181] is the sub-list for extension extendee
	0,   // [0:181] is the sub-list for field type_name
}

func init() { file_runner_proto_oscal_proto_init() }
func file_runner_proto_oscal_proto_init() {
	if File_runner_proto_oscal_proto != nil {
		return
	}
	file_runner_proto_oscal_proto_msgTypes[0].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[1].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[2].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[3].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[5].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[7].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[8].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[10].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[11].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[12].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[15].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[16].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[17].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[18].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[19].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[20].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[22].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[23].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[24].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[25].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[26].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[27].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[29].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[30].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[32].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[36].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[37].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[39].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[40].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[41].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[43].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[44].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[46].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[47].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[50].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[51].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[52].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[53].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[54].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[55].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[56].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[57].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[58].OneofWrappers = []any{}
	file_runner_proto_oscal_proto_msgTypes[59].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_runner_proto_oscal_proto_rawDesc), len(file_runner_proto_oscal_proto_rawDesc)),
			NumEnums:      15,
			NumMessages:   60,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_runner_proto_oscal_proto_goTypes,
		DependencyIndexes: file_runner_proto_oscal_proto_depIdxs,
		EnumInfos:         file_runner_proto_oscal_proto_enumTypes,
		MessageInfos:      file_runner_proto_oscal_proto_msgTypes,
	}.Build()
	File_runner_proto_oscal_proto = out.File
	file_runner_proto_oscal_proto_goTypes = nil
	file_runner_proto_oscal_proto_depIdxs = nil
}
