syntax = "proto3";
package proto;
option go_package = "./proto";

import "google/protobuf/timestamp.proto";

// Property
// An attribute, characteristic, or quality of the containing object expressed as a namespace qualified name/value pair.
message Property {
  // Property Name
  // A textual label, within a namespace, that identifies a specific attribute, characteristic, or quality of the property's containing object.
  string Name = 1;

  // Property Value
  // Indicates the value of the attribute, characteristic, or quality.
  string Value = 2;

  // Property Universally Unique Identifier
  // A unique identifier for a property.
  optional string Uuid = 3;

  // Property Namespace
  // A namespace qualifying the property's name. This allows different organizations to associate distinct semantics with the same name.
  optional string Ns = 4;

  // Property Class
  // A textual label that provides a sub-type or characterization of the property's name.
  optional string Class = 5;

  // Property Group
  // An identifier for relating distinct sets of properties.
  optional string Group = 6;

  // Remarks
  // Additional explanatory notes for the property.
  optional string Remarks = 7;
}

enum LinkRelationship {
  LINK_RELATIONSHIP_UNKNOWN = 0;
  LINK_RELATIONSHIP_REFERENCE = 1;
}

message Link {
  // Hypertext Reference
  // A resolvable URL reference to a resource.
  string Href = 1;

  // Link Relation Type
  // Describes the type of relationship provided by the link's hypertext reference. This can be an indicator of the link's purpose.
  optional LinkRelationship Rel = 2;

  // Media Type
  // A label that indicates the nature of a resource, as a data serialization or format.
  optional string MediaType = 3;

  // Resource Fragment
  // In case where the href points to a back-matter/resource, this value will indicate the URI fragment to append to any rlink associated with the resource. This value MUST be URI encoded.
  optional string ResourceFragment = 4;

  // Link Text
  // A textual label to associate with the link, which may be used for presentation in a tool.
  optional string Text = 5;
}

enum ActorType {
  ACTOR_TYPE_UNKNOWN = 0;
  ACTOR_TYPE_TOOL = 1;
  ACTOR_TYPE_ASSESSMENT_PLATFORM = 2;
  ACTOR_TYPE_PARTY = 3;
}

// Originating Actor
// The actor that produces an observation, a finding, or a risk. One or more actor types can be used to specify a person that is using a tool.
message OriginActor {
  // Actor Type
  // The kind of actor.
  ActorType Type = 1;

  // Actor Universally Unique Identifier Reference
  // A machine-oriented identifier reference to the tool or person based on the associated type.
  string ActorUuid = 2;

  // Actor Role
  // For a party, this can optionally be used to specify the role the actor was performing.
  optional string RoleId = 3;

  // Properties
  // Additional attributes related to the actor.
  repeated Property Props = 4;

  // Links
  // References to related resources.
  repeated Link Links = 5;
}
// For automation, SelectSubjectByID doesn't work for a few reasons:
// - In disconnected environments, we will not be able to collect the subjects ID from th API
// - Even if we were in a connected environment, we'd need some way of knowing what to even look for in the API.

// We could much better represent a "subject" from a plugin perspective by stating it's properties or identifying characteristics.
// That would help us to have unique "subjects" that have been identified by the plugin and agent testing for controls.

// A few examples:
// A Linux Machine:
// types: ["machine". "server", "host"]
// ips: [192.168.1.1, 192.168.100.234, fe80::67b:4334:9779:9dcc]
// macs: [3a:ff:84:2e:3b:54, 36:09:ef:45:3c:80]
// name: "kube-worker-1"
//
// A VCS repository
// types: ["source code", "software repository"]
// host: github.com
// organisation: containersol
// repository: compliance-framework-api
//
// An RDS Instance
// type: ["database", "mysql", "rds", "aws rds"]
// Account: XXX
// Region: XXX
// Name: XXX
//
// An AWS EC2 Instance
// types: ["virtual machine", "vm", "AWS EC2"]
// Account: XXX
// Region: XXX
// Name: XXX
// Distro: XXX
//
//
// That should give us a reasonable view of what we are testing against, and easy enough to fill from the plugin, because
// the plugin knows what it is trying to test and has the best chance of identifying the "uniqueness" of what it is testing against.
enum SubjectType {
  SUBJECT_TYPE_UNKNOWN = 0;
  SUBJECT_TYPE_COMPONENT = 1;
  SUBJECT_TYPE_INVENTORY_ITEM = 2;
  SUBJECT_TYPE_LOCATION = 3;
  SUBJECT_TYPE_PARTY = 4;
  SUBJECT_TYPE_USER = 5;
  SUBJECT_TYPE_RESOURCE = 6;
}

message Subject {
  // An enum to represent what type of subject the plugin is testing.
  SubjectType type = 1; // Software / Service / User

  // A human-readable title and description of the subject being included in this assessment.
  string title = 2;
  optional string description = 3;

  // The properties which identify this subject clearly
  map<string, string> properties = 4;

  // Properties
  // Additional attributes related to the assessment subject.
  repeated Property Props = 5;

  // Links
  // References to related resources.
  repeated Link Links = 6;
}


// Responsible Party
// A reference to a set of persons and/or organizations that have responsibility for performing the referenced role in the context of the containing object.
message ResponsibleParty {
  // Responsible Role
  // A reference to a role performed by a party.
  string RoleId = 1;

  // Party UUIDs
  // References to parties that perform the role.
  repeated string PartyUuids = 2;

  // Properties
  // Additional attributes related to the responsible party.
  repeated Property Props = 3;

  // Links
  // References to related resources.
  repeated Link Links = 4;

  // Remarks
  // Additional explanatory notes.
  optional string Remarks = 5;
}


// Task Reference
// Identifies an individual task for which the containing object is a consequence of.
message RelatedTask {
  // Task Universally Unique Identifier Reference
  // A machine-oriented identifier reference to a unique task.
  string TaskUuid = 1;

  // Properties
  // Additional attributes related to the task.
  repeated Property Props = 2;

  // Links
  // References to related resources.
  repeated Link Links = 3;

  // Responsible Parties
  // Parties responsible for this task.
  repeated ResponsibleParty ResponsibleParties = 4;

  // Subjects
  // Assessment subjects related to this task.
  repeated AssessmentSubject Subjects = 5;

  // Identified Subject
  // Used to detail assessment subjects that were identified by this task.
  optional IdentifiedSubject IdentifiedSubject = 6;

  // Remarks
  // Additional explanatory notes.
  optional string Remarks = 7;
}

// Origin
// Identifies the source of the finding, such as a tool, interviewed person, or activity.
message Origin {
  // Actors
  // The actors that contributed to the finding.
  repeated OriginActor Actors = 1;

  // Related Tasks
  // Tasks related to the finding's origin.
  repeated RelatedTask RelatedTasks = 2;
}

enum ImplementationStatusState {
  IMPLEMENTATION_STATUS_STATE_UNKNOWN = 0;
  IMPLEMENTATION_STATUS_STATE_IMPLEMENTED = 1;
  IMPLEMENTATION_STATUS_STATE_PARTIAL = 2;
  IMPLEMENTATION_STATUS_STATE_PLANNED = 3;
  IMPLEMENTATION_STATUS_STATE_ALTERNATIVE = 4;
  IMPLEMENTATION_STATUS_STATE_NOT_APPLICABLE = 5;
}

// Implementation Status
// Indicates the degree to which a given control is implemented.
message ImplementationStatus {
  // Implementation State
  // Identifies the implementation status of the control or control objective.
  ImplementationStatusState State = 1;

  // Remarks
  // Additional explanatory notes.
  optional string Remarks = 2;
}

// Objective Status
// A determination of if the objective is satisfied or not within a given system.
message ObjectiveStatus {
  // Objective Status State
  // An indication as to whether the objective is satisfied or not.
  string State = 1;

  // Objective Status Reason
  // The reason the objective was given its status.
  optional string Reason = 2;

  // Remarks
  // Additional explanatory notes.
  optional string Remarks = 3;
}

// Objective Status
// Captures an assessor's conclusions regarding the degree to which an objective is satisfied.
message FindingTarget {
  // Finding Target Type
  // Identifies the type of the target.
  enum TargetType {
    TARGET_TYPE_UNKNOWN = 0;
    STATEMENT_ID = 1;
    OBJECTIVE_ID = 2;
  }
  TargetType Type = 1;

  // Finding Target Identifier Reference
  // A machine-oriented identifier reference for a specific target qualified by the type.
  string TargetId = 2;

  // Objective Status Title
  // The title for this objective status.
  optional string Title = 3;

  // Objective Status Description
  // A human-readable description of the assessor's conclusions regarding the degree to which an objective is satisfied.
  optional string Description = 4;

  // Properties
  // Additional attributes related to the finding target.
  repeated Property Props = 5;

  // Links
  // References to related resources.
  repeated Link Links = 6;

  // Objective Status
  // A determination of if the objective is satisfied or not within a given system.
  ObjectiveStatus Status = 7;

  // Implementation Status
  // The implementation status of the objective.
  optional ImplementationStatus ImplementationStatus = 8;

  // Remarks
  // Additional explanatory notes.
  optional string Remarks = 9;
}

// Related Observation
// Relates the finding to a set of referenced observations that were used to determine the finding.
message RelatedObservation {
  // Observation Universally Unique Identifier Reference
  // A machine-oriented identifier reference to an observation defined in the list of observations.
  string ObservationUuid = 1;
}

// Associated Risk
// Relates the finding to a set of referenced risks that were used to determine the finding.
message RelatedRisk {
  // Risk Universally Unique Identifier Reference
  // A reference to a risk in the list of risks.
  string RiskUuid = 1;
}

// Relevant Evidence
// Links this observation to relevant evidence.
message RelevantEvidence {
  // Relevant Evidence Reference
  // A resolvable URL reference to relevant evidence.
  optional string Href = 1;

  // Relevant Evidence Description
  // A human-readable description of this evidence.
  string Description = 2;

  // Properties
  // Additional attributes related to the evidence.
  repeated Property Props = 3;

  // Links
  // References to related resources.
  repeated Link Links = 4;

  // Remarks
  // Additional explanatory notes.
  optional string Remarks = 5;
}

// Identifies the Subject
// A human-oriented identifier reference to a resource. Use type to indicate whether the identified resource is a component, inventory item, location, user, or something else.
message SubjectReference {
  // Subject Universally Unique Identifier Reference
  // A machine-oriented identifier reference to a component, inventory-item, location, party, user, or resource using its UUID.
  string SubjectUuid = 1;

  // Subject Universally Unique Identifier Reference Type
  // Used to indicate the type of object pointed to by the uuid-ref within a subject.
  SubjectType Type = 2;

  // Subject Reference Title
  // The title or name for the referenced subject.
  optional string Title = 3;

  // Properties
  // Additional attributes related to the subject reference.
  repeated Property Props = 4;

  // Links
  // References to related resources.
  repeated Link Links = 5;

  // Remarks
  // Additional explanatory notes.
  optional string Remarks = 6;
}


// Finding
// Describes an individual finding.
message Finding {
  // Finding Universally Unique Identifier
  // A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this finding in this or other OSCAL instances. The locally defined UUID of the finding can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
  string Uuid = 1;

  // Finding Title
  // The title for this finding.
  string Title = 2;

  // Finding Description
  // A human-readable description of this finding.
  string Description = 3;

  // Properties
  // Additional attributes related to the finding.
  repeated Property Props = 4;

  // Links
  // References to related resources.
  repeated Link Links = 5;

  // Origins
  // The sources of the finding, such as tools or activities.
  repeated Origin Origins = 6;

  // Target
  // The objective status and target of the finding.
  FindingTarget Target = 7;

  // Implementation Statement UUID
  // A reference to the implementation statement in the SSP related to this finding.
  optional string ImplementationStatementUuid = 8;

  // Related Observation
  // Relates the finding to a set of referenced observations that were used to determine the finding.
  repeated RelatedObservation RelatedObservations = 9;

  // Associated Risk
  // Relates the finding to a set of referenced risks that were used to determine the finding.
  repeated RelatedRisk RelatedRisks = 10;

  // Remarks
  // Additional explanatory notes.
  optional string Remarks = 11;
}

// Observation Method
// Identifies how the observation was made.
enum ObservationMethod {
  OBSERVATION_METHOD_UNKNOWN = 0;
  OBSERVATION_METHOD_EXAMINE = 1;
  OBSERVATION_METHOD_INTERVIEW = 2;
  OBSERVATION_METHOD_TEST = 3;
}

// Observation Type
// Identifies the nature of the observation. More than one may be used to further qualify and enable filtering.
enum ObservationType {
  OBSERVATION_TYPE_UNKNOWN = 0;
  OBSERVATION_TYPE_SSP_STATEMENT_ISSUE = 1;
  OBSERVATION_TYPE_CONTROL_OBJECTIVE = 2;
  OBSERVATION_TYPE_MITIGATION = 3;
  OBSERVATION_TYPE_FINDING = 4;
  OBSERVATION_TYPE_HISTORIC = 5;
}

// Observation
// Describes an individual observation.
message Observation {
  // Observation Universally Unique Identifier
  // A globally unique identifier for this observation, used for cross-instance referencing.
  string Uuid = 1;

  // Observation Title
  // The title for this observation.
  optional string Title = 2;

  // Observation Description
  // A human-readable description of this assessment observation.
  string Description = 3;

  // Properties
  // Additional attributes related to the observation.
  repeated Property Props = 4;

  // Links
  // References to related resources.
  repeated Link Links = 5;

  // Observation Method
  // Identifies how the observation was made.
  repeated ObservationMethod Methods = 6;

  // Observation Type
  // Identifies the nature of the observation. More than one may be used to further qualify and enable filtering.
  repeated ObservationType Types = 7;

  // Origins
  // The sources of the observation, such as tools or activities.
  repeated Origin Origins = 8;

  // Subjects
  // References to subjects related to this observation.
  repeated SubjectReference Subjects = 9;

  // Relevant Evidence
  // Links this observation to relevant evidence.
  repeated RelevantEvidence RelevantEvidence = 10;

  // Collected Field
  // Date/time stamp identifying when the observation information was collected.
  google.protobuf.Timestamp Collected = 11;

  // Expires Field
  // Date/time identifying when the observation information is out-of-date and no longer valid.
  optional google.protobuf.Timestamp Expires = 12;

  // Remarks
  // Additional explanatory notes.
  optional string Remarks = 13;
}

// Risk Status
// Describes the status of the associated risk.
enum RiskStatus {
  RISK_STATUS_UNKNOWN = 0;
  RISK_STATUS_OPEN = 1;
  RISK_STATUS_INVESTIGATING = 2;
  RISK_STATUS_REMEDIATING = 3;
  RISK_STATUS_DEVIATION_REQUESTED = 4;
  RISK_STATUS_DEVIATION_APPROVED = 5;
  RISK_STATUS_CLOSED = 6;
}

// Threat ID
// A pointer, by ID, to an externally-defined threat.
message ThreatId {
  // Threat Type Identification System
  // Specifies the source of the threat information.
  string System = 1;

  // Threat Information Resource Reference
  // An optional location for the threat data, from which this ID originates.
  optional string Href = 2;

  // Threat Identifier
  // A unique identifier for the threat.
  string Id = 3;
}

// Facet
// An individual characteristic that is part of a larger set produced by the same actor.
message Facet {
  // Facet Name
  // The name of the risk metric within the specified system.
  string Name = 1;

  // Naming System
  // Specifies the naming system under which this risk metric is organized, which allows for the same names to be used in different systems controlled by different parties. This avoids the potential of a name clash.
  string System = 2;

  // Facet Value
  // Indicates the value of the facet.
  string Value = 3;

  // Properties
  // Additional attributes related to the facet.
  repeated Property Props = 4;

  // Links
  // References to related resources.
  repeated Link Links = 5;

  // Remarks
  // Additional explanatory notes.
  optional string Remarks = 6;
}

// Characterization
// A collection of descriptive data about the containing object from a specific origin.
message Characterization {
  // Properties
  // Additional attributes related to the characterization.
  repeated Property Props = 1;

  // Links
  // References to related resources.
  repeated Link Links = 2;

  // Origin
  // The source of the characterization data.
  Origin Origin = 3;

  repeated Facet Facets = 4;
}

// Mitigating Factors
// Describes an existing mitigating factor that may affect the overall determination of the risk, with an optional link to an implementation statement in the SSP.
message MitigatingFactor {
  // Mitigating Factor Universally Unique Identifier
  // A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this mitigating factor elsewhere in this or other OSCAL instances. The locally defined UUID of the mitigating factor can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
  string Uuid = 1;

  // Implementation UUID
  // A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this implementation statement elsewhere in this or other OSCAL instancess. The locally defined UUID of the implementation statement can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
  optional string ImplementationUuid = 2;

  // Mitigating Factor Description
  // A human-readable description of this mitigating factor.
  string Description = 3;

  // Properties
  repeated Property Props = 4;

  // Links
  repeated Link Links = 5;

  // Subjects
  repeated SubjectReference Subjects = 6;
}

// Required Asset
// Identifies an asset required to achieve remediation.
message RequiredAsset {
  // Required Universally Unique Identifier
  // A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this required asset elsewhere in this or other OSCAL instances. The locally defined UUID of the asset can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
  string Uuid = 1;

  // Subjects
  repeated SubjectReference Subjects = 2;

  // Title for Required Asset
  optional string Title = 3;

  // Description of Required Asset
  string Description = 4;

  // Properties
  repeated Property Props = 5;

  // Links
  repeated Link Links = 6;

  // Remarks
  optional string Remarks = 7;
}

// Task Type
// The type of task.
enum TaskType {
  TASK_TYPE_UNKNOWN = 0;
  TASK_TYPE_MILESTONE = 1;
  TASK_TYPE_ACTION = 2;
}

// Event Timing
// The timing under which the task is intended to occur.
message EventTiming {
  // On Date Condition
  // The task must occur on the specified date.
  optional google.protobuf.Timestamp OnDate = 1;

  // On Date Range Condition
  // The task must occur within the specified date range.
  message DateRange {
    google.protobuf.Timestamp Start = 1;
    google.protobuf.Timestamp End = 2;
  }
  optional DateRange WithinDateRange = 2;

  // Frequency Condition
  // The task is intended to occur at the specified frequency.
  message Frequency {
    int32 Period = 1;
    enum TimeUnit {
      UNIT_UNKNOWN = 0;
      SECONDS = 1;
      MINUTES = 2;
      HOURS = 3;
      DAYS = 4;
      MONTHS = 5;
      YEARS = 6;
    }
    TimeUnit Unit = 2;
  }
  optional Frequency AtFrequency = 3;
}

// Responsible Role
// A reference to a role with responsibility for performing a function relative to the containing object, optionally associated with a set of persons and/or organizations that perform that role.
message ResponsibleRole {
  // Responsible Role ID
  // A human-oriented identifier reference to a role performed.
  string RoleId = 1;

  // Properties
  // Additional attributes related to the responsible role.
  repeated Property Props = 2;

  // Links
  // References to related resources.
  repeated Link Links = 3;

  // Party UUIDs
  // Identifiers for the persons or organizations that perform this role.
  repeated string PartyUuids = 4;

  // Remarks
  // Additional explanatory notes.
  optional string Remarks = 5;
}


// Task
// Represents a scheduled event or milestone, which may be associated with a series of assessment actions.
message Task {
  // Task Universally Unique Identifier
  // A globally unique identifier for this task.
  string Uuid = 1;

  TaskType Type = 2;

  // Task Title
  // The title for this task.
  string Title = 3;

  // Task Description
  // A human-readable description of this task.
  optional string Description = 4;

  // Properties
  // Additional attributes related to the task.
  repeated Property Props = 5;

  // Links
  // References to related resources.
  repeated Link Links = 6;

  // Event Timing
  // The timing under which the task is intended to occur.
  optional EventTiming Timing = 7;

  // Task Dependency
  // Used to indicate that a task is dependent on another task.
  message TaskDependency {
    string TaskUuid = 1;
    optional string Remarks = 2;
  }
  repeated TaskDependency Dependencies = 8;

  // Sub-Tasks
  // Nested tasks within this task.
  repeated Task Tasks = 9;

  // Associated Activity
  // Identifies an individual activity to be performed as part of a task.
  message AssociatedActivity {
    // Activity Universally Unique Identifier Reference
    string ActivityUuid = 1;

    // Properties
    repeated Property Props = 2;

    // Links
    repeated Link Links = 3;

    // Responsible Roles
    repeated ResponsibleRole ResponsibleRoles = 4;

    // Subjects
    repeated AssessmentSubject Subjects = 5;

    // Remarks
    optional string Remarks = 6;
  }
  repeated AssociatedActivity AssociatedActivities = 10;

  // Subjects
  // Subjects related to this task.
  repeated AssessmentSubject Subjects = 11;

  // Responsible Roles
  // Roles responsible for executing this task.
  repeated ResponsibleRole ResponsibleRoles = 12;

  // Remarks
  // Additional explanatory notes.
  optional string Remarks = 13;
}


// Remediation Intent
// Identifies whether this is a recommendation, a planned action, or a completed action.
enum Lifecycle {
  LIFECYCLE_UNKNOWN = 0;
  LIFECYCLE_RECOMMENDATION = 1;
  LIFECYCLE_PLANNED = 2;
  LIFECYCLE_COMPLETED = 3;
}

// Risk Response
// Describes either a recommended or an actual plan for addressing the risk.
message Response {
  // Remediation Universally Unique Identifier
  // A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this remediation elsewhere in this or other OSCAL instances. The locally defined UUID of the risk response can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
  string Uuid = 1;

  // Remediation Intent
  // Identifies whether this is a recommendation, such as from an assessor or tool, or an actual plan accepted by the system owner.
  Lifecycle Lifecycle = 2;

  // Response Title
  // The title for this response activity.
  string Title = 3;

  // Response Description
  // A human-readable description of this response plan.
  string Description = 4;

  // Properties
  // Additional attributes related to the response.
  repeated Property Props = 5;

  // Links
  // References to related resources.
  repeated Link Links = 6;

  // Origins
  // The sources that provided or influenced this response.
  repeated Origin Origins = 7;

  repeated RequiredAsset RequiredAssets = 8;

  // Tasks
  // The tasks associated with executing this response.
  repeated Task Tasks = 9;

  // Remarks
  // Additional explanatory notes.
  optional string Remarks = 10;
}

// Risk Log
// A log of all risk-related tasks.
message RiskLog {
  // Risk Log Entry
  // Identifies an individual risk response.
  message Entry {
    // Risk Log Entry Universally Unique Identifier
    string Uuid = 1;

    // Title
    optional string Title = 2;

    // Risk Task Description
    optional string Description = 3;

    // Start
    google.protobuf.Timestamp Start = 4;

    // End
    optional google.protobuf.Timestamp End = 5;

    // Properties
    repeated Property Props = 6;

    // Links
    repeated Link Links = 7;

    // Logged By
    repeated LoggedBy LoggedBy = 8;

    // Status Change
    optional RiskStatus StatusChange = 9;

    // Related Responses
    message RelatedResponse {
      // Response Universally Unique Identifier Reference
      string ResponseUuid = 1;

      // Properties
      repeated Property Props = 2;

      // Links
      repeated Link Links = 3;

      // Related Tasks
      repeated RelatedTask RelatedTasks = 4;

      // Remarks
      optional string Remarks = 5;
    }
    repeated RelatedResponse RelatedResponses = 10;

    // Remarks
    optional string Remarks = 11;
  }
  repeated Entry Entries = 1;
}

// Logged By
// Used to indicate who created a log entry and in what role.
message LoggedBy {
  // Party UUID Reference
  // A globally unique identifier for the party making the log entry.
  string PartyUuid = 1;

  // Actor Role
  // A reference to the role in which the party is making the log entry.
  optional string RoleId = 2;
}


// Identified Risk
// An identified risk.
message Risk {
  // Risk Universally Unique Identifier
  // A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this risk elsewhere in this or other OSCAL instances. The locally defined UUID of the risk can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
  string Uuid = 1;

  // Risk Title
  // The title for this risk.
  string Title = 2;

  // Risk Description
  // A human-readable summary of the identified risk, to include a statement of how the risk impacts the system.
  string Description = 3;

  // Risk Statement
  // An summary of impact for how the risk affects the system.
  string Statement = 4;

  // Properties
  // Additional attributes related to the risk.
  repeated Property Props = 5;

  // Links
  // References to related resources.
  repeated Link Links = 6;

  // Risk Status
  // The current status of the risk.
  RiskStatus Status = 7;

  // Origins
  // The sources that identified the risk.
  repeated Origin Origins = 8;

  // Threat Identifiers
  // Identifies threats associated with the risk.
  repeated ThreatId ThreatIds = 9;

  // Characterizations
  // A collection of descriptive data about the containing object from a specific origin.
  repeated Characterization Characterizations = 10;

  // Mitigating Factors
  // Describes an existing mitigating factor that may affect the overall determination of the risk, with an optional link to an implementation statement in the SSP.
  repeated MitigatingFactor MitigatingFactors = 11;

  // Risk Resolution Deadline
  // The date/time by which the risk must be resolved.
  optional google.protobuf.Timestamp Deadline = 12;

  // Remediations
  // Describes either recommended or an actual plan for addressing the risk.
  repeated Response Remediations = 13;

  optional RiskLog RiskLog = 14;

  repeated RelatedObservation RelatedObservations = 15;
}

// Assessment Log
// A log of all assessment-related actions taken.
message AssessmentLog {
  // Assessment Log Entry
  // Identifies the result of an action/task during the assessment.
  message Entry {
    // Universally Unique Identifier
    string Uuid = 1;

    // Action Title
    optional string Title = 2;

    // Action Description
    optional string Description = 3;

    // Start
    google.protobuf.Timestamp Start = 4;

    // End
    optional google.protobuf.Timestamp End = 5;

    // Properties
    repeated Property Props = 6;

    // Links
    repeated Link Links = 7;

    // Logged By
    repeated LoggedBy LoggedBy = 8;

    // Related Tasks
    repeated RelatedTask RelatedTasks = 9;

    // Remarks
    optional string Remarks = 10;
  }
  repeated Entry Entries = 1;
}

// Assessment Part
// A partition of an assessment plan or results, or a child of another part.
message AssessmentPart {
  // Part Identifier
  // A globally unique identifier for this part.
  optional string Uuid = 1;

  // Part Name
  // A textual label that uniquely identifies the part's semantic type.
  enum PartName {
    PART_NAME_UNKNOWN = 0;
    ASSET = 1;
    METHOD = 2;
    OBJECTIVE = 3;
  }
  PartName Name = 2;

  // Part Namespace
  // A namespace qualifying the part's name.
  optional string Ns = 3;

  // Part Class
  // A sub-type or characterization of the part's name.
  optional string Class = 4;

  // Part Title
  // A name given to the part for display and navigation.
  optional string Title = 5;

  // Properties
  // Additional attributes related to the assessment part.
  repeated Property Props = 6;

  // Part Text
  // Permits multiple paragraphs, lists, tables, etc.
  optional string Prose = 7;

  // Nested Parts
  // Child parts of this assessment part.
  repeated AssessmentPart Parts = 8;

  // Links
  // References to related resources.
  repeated Link Links = 9;
}

// Attestations
// A set of textual statements, typically written by the assessor.
message Attestation {
  // Responsible Parties
  repeated ResponsibleParty ResponsibleParties = 1;

  // Parts
  repeated AssessmentPart Parts = 2;
}

// Select Control
// Used to select a control for inclusion/exclusion based on one or more control identifiers.
message SelectControlById {
  // Control Identifier Reference
  // A reference to a control with a corresponding id value.
  string ControlId = 1;

  // Include Specific Statements
  // Used to constrain the selection to only specifically identified statements.
  repeated string StatementIds = 2;
}

// Select Objective
// Used to select a control objective for inclusion/exclusion based on its identifier.
message SelectObjectiveById {
  // Objective ID
  // Points to an assessment objective.
  string ObjectiveId = 1;
}

// Reviewed Controls and Control Objectives
// Identifies the controls being assessed and their control objectives.
message ReviewedControls {
  // Control Objective Description
  // A human-readable description of control objectives.
  optional string Description = 1;

  // Properties
  // Additional attributes related to the reviewed controls.
  repeated Property Props = 2;

  // Links
  // References to related resources.
  repeated Link Links = 3;

  // Assessed Controls
  // Identifies the controls being assessed.
  message ControlSelection {
    // Assessed Controls Description
    // A human-readable description of in-scope controls specified for assessment.
    optional string Description = 1;

    // Properties
    repeated Property Props = 2;

    // Links
    repeated Link Links = 3;

    // Include All
    // Specifies if all controls should be included.
    optional IncludeAll IncludeAll = 4;

    // Include Controls
    // Explicitly included controls.
    repeated SelectControlById IncludeControls = 5;

    // Exclude Controls
    // Explicitly excluded controls.
    repeated SelectControlById ExcludeControls = 6;

    // Remarks
    // Additional explanatory notes.
    optional string Remarks = 7;
  }
  repeated ControlSelection ControlSelections = 4;

  // Referenced Control Objectives
  // Identifies the control objectives of the assessment.
  message ControlObjectiveSelection {
    // Control Objectives Description
    // A human-readable description of this collection of control objectives.
    optional string Description = 1;

    // Properties
    repeated Property Props = 2;

    // Links
    repeated Link Links = 3;

    // Include All
    // Specifies if all objectives should be included.
    optional IncludeAll IncludeAll = 4;

    // Include Objectives
    // Explicitly included objectives.
    repeated SelectObjectiveById IncludeObjectives = 5;

    // Exclude Objectives
    // Explicitly excluded objectives.
    repeated SelectObjectiveById ExcludeObjectives = 6;

    // Remarks
    // Additional explanatory notes.
    optional string Remarks = 7;
  }
  repeated ControlObjectiveSelection ControlObjectiveSelections = 5;

  // Remarks
  // Additional explanatory notes.
  optional string Remarks = 6;
}

enum State {
  STATE_UNKNOWN = 0;
  STATE_UNDER_DEVELOPMENT = 1;
  STATE_OPERATIONAL = 2;
  STATE_DISPOSITION = 3;
  STATE_OTHER = 4;
}

// Status
// Describes the operational status of the system component.
message Status {
  // State
  // The operational status.
  State State = 1;

  // Remarks
  // Additional explanatory notes.
  optional string Remarks = 2;
}

enum Transport {
  TRANSPORT_UNKNOWN = 0;
  TRANSPORT_TCP = 1;
  TRANSPORT_UDP = 2;
}

// Port Range
// Defines the transport layer protocol port range for an IPv4-based or IPv6-based service.
message PortRange {
  // Start
  // Indicates the starting port number in a port range for a transport layer protocol.
  uint32 Start = 1;

  // End
  // Indicates the ending port number in a port range for a transport layer protocol.
  uint32 End = 2;

  // Transport
  // Indicates the transport type.
  Transport Transport = 3;
}

// Service Protocol Information
// Information about the protocol used to provide a service.
message Protocol {
  // Service Protocol Information Universally Unique Identifier
  // A globally unique identifier for this protocol instance.
  optional string Uuid = 1;

  // Protocol Name
  // The common name of the protocol, typically from the IANA Service Name and Transport Protocol Port Number Registry.
  string Name = 2;

  // Protocol Title
  // A human-readable name for the protocol (e.g., Transport Layer Security).
  optional string Title = 3;

  // Port Ranges
  // The port ranges associated with this protocol.
  repeated PortRange PortRanges = 4;
}

// Component
// A defined component that can be part of an implemented system.
message SystemComponent {
  // Component Identifier
  // A globally unique identifier for this component.
  string Uuid = 1;

  // Component Type
  // A category describing the purpose of the component.
  enum ComponentType {
    COMPONENT_TYPE_UNKNOWN = 0;
    COMPONENT_TYPE_THIS_SYSTEM = 1;
    COMPONENT_TYPE_SYSTEM = 2;
    COMPONENT_TYPE_INTERCONNECTION = 3;
    COMPONENT_TYPE_SOFTWARE = 4;
    COMPONENT_TYPE_HARDWARE = 5;
    COMPONENT_TYPE_SERVICE = 6;
    COMPONENT_TYPE_POLICY = 7;
    COMPONENT_TYPE_PHYSICAL = 8;
    COMPONENT_TYPE_PROCESS_PROCEDURE = 9;
    COMPONENT_TYPE_PLAN = 10;
    COMPONENT_TYPE_GUIDANCE = 11;
    COMPONENT_TYPE_STANDARD = 12;
    COMPONENT_TYPE_VALIDATION = 13;
    COMPONENT_TYPE_NETWORK = 14;
  }
  ComponentType Type = 2;

  // Component Title
  // A human-readable name for the system component.
  string Title = 3;

  // Component Description
  // A description of the component, including its function.
  string Description = 4;

  // Purpose
  // A summary of the technological or business purpose of the component.
  optional string Purpose = 5;

  // Properties
  // Additional attributes related to the component.
  repeated Property Props = 6;

  // Links
  // References to related resources.
  repeated Link Links = 7;


  Status Status = 8;

  // Responsible Roles
  // Roles responsible for managing or implementing this component.
  repeated ResponsibleRole ResponsibleRoles = 9;

  // Protocols
  // Protocols used by this component.
  repeated Protocol Protocols = 10;

  // Remarks
  // Additional explanatory notes.
  optional string Remarks = 11;
}

// Inventory Item
// A single managed inventory item within the system.
message InventoryItem {
  // Inventory Item Universally Unique Identifier
  // A globally unique identifier for this inventory item.
  string Uuid = 1;

  // Inventory Item Description
  // A summary of the inventory item stating its purpose within the system.
  string Description = 2;

  // Properties
  // Additional attributes related to the inventory item.
  repeated Property Props = 3;

  // Links
  // References to related resources.
  repeated Link Links = 4;

  // Responsible Parties
  // Parties responsible for this inventory item.
  repeated ResponsibleParty ResponsibleParties = 5;

  // Implemented Component
  // The set of components that are implemented in a given system inventory item.
  message ImplementedComponent {
    // Component Universally Unique Identifier Reference
    string ComponentUuid = 1;

    // Properties
    repeated Property Props = 2;

    // Links
    repeated Link Links = 3;

    // Responsible Parties
    repeated ResponsibleParty ResponsibleParties = 4;

    // Remarks
    optional string Remarks = 5;
  }
  repeated ImplementedComponent ImplementedComponents = 6;

  // Remarks
  // Additional explanatory notes.
  optional string Remarks = 7;
}

// Functions Performed
// Describes a function performed for a given authorized privilege by this user class.
message FunctionPerformed {
  // Function Name
  // A string representing the function performed.
  string Name = 1;
}


// Privilege
// Identifies a specific system privilege held by the user, with an associated description and/or rationale.
message AuthorizedPrivilege {
  // Privilege Title
  // A human-readable name for the privilege.
  string Title = 1;

  // Privilege Description
  // A summary of the privilege's purpose within the system.
  optional string Description = 2;

  // Functions Performed
  // The functions performed under this privilege.
  repeated FunctionPerformed FunctionsPerformed = 3;
}

// System User
// A type of user that interacts with the system based on an associated role.
message SystemUser {
  // User Universally Unique Identifier
  // A globally unique identifier for this user class.
  string Uuid = 1;

  // User Title
  // A name given to the user, used for display and navigation.
  optional string Title = 2;

  // User Short Name
  // A short common name, abbreviation, or acronym for the user.
  optional string ShortName = 3;

  // User Description
  // A summary of the user's purpose within the system.
  optional string Description = 4;

  // Properties
  // Additional attributes related to the user.
  repeated Property Props = 5;

  // Links
  // References to related resources.
  repeated Link Links = 6;

  // Role Identifiers
  // Identifiers of roles associated with the user.
  repeated string RoleIds = 7;

  // Authorized Privileges
  // Privileges that the user is authorized to perform.
  repeated AuthorizedPrivilege AuthorizedPrivileges = 8;

  // Remarks
  // Additional explanatory notes.
  optional string Remarks = 9;
}

// Assessment Assets
// Identifies the assets used to perform this assessment, such as the assessment team, scanning tools, and assumptions.
message AssessmentAssets {
  // Components
  // System components involved in the assessment.
  repeated SystemComponent Components = 1;

  // Assessment Platform
  // Represents the toolset used to perform aspects of the assessment.
  message AssessmentPlatform {
    // Assessment Platform Universally Unique Identifier
    string Uuid = 1;

    // Assessment Platform Title
    optional string Title = 2;

    // Properties
    repeated Property Props = 3;

    // Links
    repeated Link Links = 4;

    // Uses Component
    // The set of components that are used by the assessment platform.
    message UsesComponent {
      // Component Universally Unique Identifier Reference
      string ComponentUuid = 1;

      // Properties
      repeated Property Props = 2;

      // Links
      repeated Link Links = 3;

      // Responsible Parties
      repeated ResponsibleParty ResponsibleParties = 4;

      // Remarks
      optional string Remarks = 5;
    }
    repeated UsesComponent UsesComponents = 5;

    // Remarks
    optional string Remarks = 6;
  }
  repeated AssessmentPlatform AssessmentPlatforms = 2;
}

// Local Definitions
// Used to define data objects used in the assessment plan but not appearing in the referenced SSP.
message LocalDefinitions {
  // Components
  repeated SystemComponent Components = 1;

  // Inventory Items
  repeated InventoryItem InventoryItems = 2;

  // Users
  repeated SystemUser Users = 3;

  // Assessment Assets
  optional AssessmentAssets AssessmentAssets = 4;

  // Tasks
  repeated Task Tasks = 5;
}

// TODO this is a partial implementation to support bidirectional implementation.
// This should be fledged more completely as soon as possible.
// Assessment Result
// Used by the assessment results and POA&M. Identifies observations, findings, risks, deviations, and dispositions.

// Assessment Result
// Used by the assessment results and POA&M. In the assessment results, this identifies all of the assessment observations and findings, initial and residual risks, deviations, and disposition. In the POA&M, this identifies initial and residual risks, deviations, and disposition.
message AssessmentResult {
  // Results Universally Unique Identifier
  // A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this set of results in this or other OSCAL instances. The locally defined UUID of the assessment result can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
  string Uuid = 1;

  // Results Title
  // The title for this set of results.
  string Title = 2;

  // Results Description
  // A human-readable description of this set of test results.
  string Description = 3;

  // Start Field
  // Date/time stamp identifying the start of the evidence collection reflected in these results.
  google.protobuf.Timestamp Start = 4;

  // End Field
  // Date/time stamp identifying the end of the evidence collection reflected in these results. In a continuous motoring scenario, this may contain the same value as start if appropriate.
  optional google.protobuf.Timestamp End = 5;

  // Properties
  // An attribute, characteristic, or quality of the containing object expressed as a namespace qualified name/value pair.
  repeated Property Props = 6;

  // Links
  // A reference to a local or remote resource, that has a specific relation to the containing object.
  repeated Link Links = 7;

  optional LocalDefinitions LocalDefinitions = 8;

  // Reviewed Controls
  // Identifies the controls reviewed in the assessment.
  ReviewedControls ReviewedControls = 9;

  repeated Attestation Attestations = 10;

  optional AssessmentLog AssessmentLog = 11;

  // Observations
  // The observations made during the assessment.
  repeated Observation Observations = 12;

  // Risks
  // The risks identified during the assessment.
  repeated Risk Risks = 13;

  // Findings
  // The findings identified during the assessment.
  repeated Finding Findings = 14;

  // Remarks
  // Additional explanatory notes.
  optional string Remarks = 15;

  // The Subjects that this result relates to.
  // We can attach multiple subjects to a result.
  // For example if we test a compound implementation, for example Mongo DB ports and Firewall rules under one
  // plugin, we want to specify both in the result.
  repeated Subject subjects = 16;
}
